{"created": 1748880632.6861608, "duration": 0.12566900253295898, "exitcode": 1, "root": "/home/graham/workspace/experiments/marker", "environment": {}, "summary": {"failed": 1, "total": 1, "collected": 1}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/providers/test_html_native.py::TestNativeHTMLExtractor::test_simple_html", "type": "Function", "lineno": 19}]}], "tests": [{"nodeid": "tests/providers/test_html_native.py::TestNativeHTMLExtractor::test_simple_html", "lineno": 19, "outcome": "failed", "keywords": ["test_simple_html", "TestNativeHTMLExtractor", "test_html_native.py", "providers", "tests", "marker", ""], "setup": {"duration": 0.00031273579224944115, "outcome": "passed"}, "call": {"duration": 0.004515782929956913, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/marker/tests/providers/test_html_native.py", "lineno": 89, "message": "assert 0.2 <= 0.004011869430541992"}, "traceback": [{"path": "tests/providers/test_html_native.py", "lineno": 89, "message": "AssertionError"}], "stderr": "2025-06-02 12:10:32.604 | INFO     | marker.core.providers.html_native:extract_document:51 - Extracting HTML document: /tmp/tmpf6d5wygg.html\n2025-06-02 12:10:32.608 | INFO     | marker.core.providers.html_native:extract_document:81 - Extracted 10 blocks from HTML\n", "longrepr": "self = <test_html_native.TestNativeHTMLExtractor object at 0x76ac3e4209a0>\n\n    def test_simple_html(self):\n        \"\"\"Test extraction of simple HTML with sections\"\"\"\n        html_content = \"\"\"\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <title>Simple Test Document</title>\n            <meta name=\"author\" content=\"Test Author\">\n            <meta name=\"description\" content=\"A simple test document\">\n        </head>\n        <body>\n            <article>\n                <h1>Introduction</h1>\n                <p>This is the introduction paragraph with some text.</p>\n    \n                <h2>Background</h2>\n                <p>This section provides background information.</p>\n    \n                <h3>Historical Context</h3>\n                <p>Some historical details here.</p>\n    \n                <h2>Methods</h2>\n                <p>Description of methods used.</p>\n    \n                <h1>Conclusion</h1>\n                <p>Final thoughts and conclusions.</p>\n            </article>\n        </body>\n        </html>\n        \"\"\"\n    \n        # Create temp file\n        with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False) as f:\n            f.write(html_content)\n            temp_path = Path(f.name)\n    \n        try:\n            # Extract\n            start_time = time.time()\n            provider = NativeHTMLProvider()\n            doc = provider.extract_document(temp_path)\n            duration = time.time() - start_time\n    \n            # Verify extraction\n            assert doc.source_type == SourceType.HTML\n            assert doc.metadata.title == \"Simple Test Document\"\n            assert doc.metadata.author == \"Test Author\"\n            assert doc.metadata.language == \"en\"\n    \n            # Check hierarchy\n            heading_blocks = [b for b in doc.blocks if b.type == BlockType.HEADING]\n            assert len(heading_blocks) == 5\n    \n            # Verify section hierarchy preserved\n            h1_blocks = [b for b in heading_blocks if b.metadata.attributes.get('level') == 1]\n            assert len(h1_blocks) == 2\n            assert h1_blocks[0].content == \"Introduction\"\n            assert h1_blocks[1].content == \"Conclusion\"\n    \n            # Check breadcrumbs\n            h3_block = [b for b in heading_blocks if b.metadata.attributes.get('level') == 3][0]\n            breadcrumb = h3_block.metadata.attributes.get('breadcrumb', [])\n            assert len(breadcrumb) == 3\n            assert breadcrumb[0] == \"Introduction\"\n            assert breadcrumb[1] == \"Background\"\n            assert breadcrumb[2] == \"Historical Context\"\n    \n            # Check duration\n>           assert 0.2 <= duration <= 1.0\nE           assert 0.2 <= 0.004011869430541992\n\ntests/providers/test_html_native.py:89: AssertionError"}, "teardown": {"duration": 0.00021095387637615204, "outcome": "passed"}}]}