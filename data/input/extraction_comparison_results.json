{
  "timestamp": "2025-06-12T06:50:35.001550",
  "results": {
    "latexml_gold_standard": {
      "source": "latexml",
      "sections": [
        {
          "title": "1Introduction",
          "level": 2,
          "content": "Large language models (LLMs) have recently achieved remarkable improvements in reasoning capabilities by employing Reinforcement Learning with Verifiable Rewards (RLVR)(Lambert et\u00a0al.,2024). Unlike methods that explicitly imitate intermediate reasoning steps, RLVR uses only outcome-based feedback, enabling large-scale reinforcement learning over vast task datasets(DeepSeek-AI et\u00a0al.,2025;Team et\u00a0al.,2025;Jaech et\u00a0al.,2024;OpenAI,2025b;a). A particularly compelling variant is the\u201czero\u201dRLVR paradigm(DeepSeek-AI et\u00a0al.,2025), which forgoes any cold-start distillation data, using neither human-generated nor AI-generated reasoning traces, and applies RLVR directly on the base model with task rewards. However, these methods still depend heavily on expertly curated distributions of reasoning question\u2013answer pairs, which raises serious concerns about their long-term scalability(Villalobos et\u00a0al.,2024). As reasoning models continue to advance, the effort required to construct large-scale, high-quality datasets may soon become unsustainable(Yue et\u00a0al.,2025). A similar scalability bottleneck has already been identified in the domain of LLM pretraining(Sutskever et\u00a0al.,2024). Furthermore, as AI systems continue to evolve and potentially exceed human intellect, an exclusive dependence on human-designed tasks risks imposing constraints on their capacity for autonomous learning and growth(Hughes et\u00a0al.,2024). This underscores the need for a new paradigm that begins to explore possibilities beyond the constraints of human-designed tasks and prepares for a future in which AI systems may surpass human intelligence.\n\nTo this end, we propose\u201cAbsolute Zero\u201d, a new paradigm for reasoning models in which the model simultaneously learns to define tasks that maximize learnability and to solve them effectively, enabling self-evolution through self-play without relying on external data. In contrast to prior self-play methods that are limited to narrow domains, fixed functionalities, or learned reward models that are prone to hacking(Silver et\u00a0al.,2017;Chen et\u00a0al.,2025;2024), theAbsolute Zeroparadigm is designed to operate in open-ended settings while remaining grounded in a real environment. It relies on feedback from the environment as a verifiable source of reward, mirroring how humans learn and reason through interaction with the world, and helps prevent issues such as hacking with neural reward models(Hughes et\u00a0al.,2024). Similar to AlphaZero(Silver et\u00a0al.,2017), which improves through self-play, our proposed paradigm requires no human supervision and learns entirely through self-interaction. We believe the Absolute Zero paradigm represents a promising step toward enabling large language models to autonomously achieve superhuman reasoning capabilities.\n\nBuilding on this new reasoning paradigm, we introduce theAbsolute Zero Reasoner (AZR), which proposes and solves coding tasks. We cast code executor as an open-ended yet grounded environment, sufficient to both validate task integrity and also provide verifiable feedback for stable training. We let AZR construct three types of coding tasks: infer and reason about one particular element in a program, input, output triplet, which corresponds to three complementary modes of reasoning: induction, abduction, and deduction. We train the entire system end-to-end with a newly proposed reinforcement learning advantage estimator tailored to the multitask nature of the proposed approach.\n\nDespite being trained entirely without any in-distribution data, AZR demonstrates remarkable capabilities across diverse reasoning tasks in math and coding. In mathematics, AZR achieves competitive performance compared to zero reasoner models explicitly fine-tuned with domain-specific supervision. In coding tasks, AZR establishes a new state-of-the-art performance, surpassing models specifically trained with code datasets using RLVR. Furthermore, AZR outperforms all previous models by an average of 1.8 absolute points compared to models trained in the \u201czero\u201d setting using in-domain data. These surprising results highlight that general reasoning skills can emerge without human-curated domain targeted data, positioning Absolute Zero as an promising research direction and AZR as a first pivotal milestone. Besides the remarkable results AZR achieved with zero human data for reasoning, we also make very interesting findings summarized below:\n\nCode priors amplify reasoning.The baseQwen-Coder-7bmodel started with math performance 3.6 points lower thanQwen-7b. But after AZR training for both models, the coder variant surpassed the base by 0.7 points, suggesting that strong coding capabilities may potentially amplify overall reasoning improvements after AZR training.\n\nCross domain transfer is more pronounced for AZR.After RLVR, expert code models raise math accuracy by only 0.65 points on average, whereasAZR-Base-7BandAZR-Coder-7Btrained on self-proposed code reasoning tasks improve math average by 10.9 and 15.2, respectively, demonstrating much stronger generalized reasoning capability gains.\n\nBigger bases yield bigger gains.Performance improvements scale with model size: the 3B, 7B, and 14B coder models gain +5.7, +10.2, and +13.2 points respectively, suggesting continued scaling is advantageous for AZR.\n\nComments as intermediate plans emerge naturally.When solving code induction tasks, AZR often interleaves step-by-step plans as comments and code (Figure19), resembling the ReAct prompting framework(Yao et\u00a0al.,2023). Similar behavior has been observed in much larger formal-math models such as DeepSeek Prover v2 (671B)(Ren et\u00a0al.,2025). We therefore believe that allowing the model to use intermediate scratch-pads when generating long-form answers may be beneficial in other domains as well.\n\nCognitive Behaviors and Token length depends on reasoning mode.Distinct cognitive behaviors\u2014such as step-by-step reasoning, enumeration, and trial-and-error all emerged through AZR training, but different behaviors are particularly evident across different types of tasks. Furthermore token counts grow over AZR training, but the magnitude of increase also differs by task types: abduction grows the most because the model performs trial-and-error until output matches, whereas deduction and induction grow modestly.\n\nSafety alarms ringing.We observe AZR withLlama3.1-8boccasionally produces concerning chains of thought, we term the \u201cuh-oh moment\u201d, example shown inFigure32, highlighting the need for future work on safety-aware training(Zhang et\u00a0al.,2025a).",
          "type": "section"
        },
        {
          "title": "2The Absolute Zero Paradigm",
          "level": 2,
          "content": "SFT requires the datasets of task-rationale-answer demonstrations\ud835\udc9f={(x,c\u22c6,y\u22c6)}\ud835\udc9f\ud835\udc65superscript\ud835\udc50\u22c6superscript\ud835\udc66\u22c6\\mathcal{D}=\\{(x,c^{\\star},y^{\\star})\\}caligraphic_D = { ( italic_x , italic_c start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) }, wherex\ud835\udc65xitalic_xis the query,c\u22c6superscript\ud835\udc50\u22c6c^{\\star}italic_c start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis the gold chain-of-thought (CoT)) andy\u22c6superscript\ud835\udc66\u22c6y^{\\star}italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis the gold answer, all provided byhuman expertsorsuperior AI models. The model trains to imitate the reference responses to minimize the conditional negative log-likelihood(Ouyang et\u00a0al.,2022):\n\nHowever, at the frontier level, there\u2019s no stronger model to distill from, and expert human labeling doesn\u2019t scale well.\n\nTo move beyond the limits of pure imitation, RLVR only requires a dataset of task and answer\ud835\udc9f={(x,y\u22c6)}\ud835\udc9f\ud835\udc65superscript\ud835\udc66\u22c6\\mathcal{D}=\\{(x,y^{\\star})\\}caligraphic_D = { ( italic_x , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) }, without labeled rationale. RLVR allows the model to generate its own CoT and calculate a verifiable reward with the golden answerr\u2062(y,y\u22c6)\ud835\udc5f\ud835\udc66superscript\ud835\udc66\u22c6r(y,y^{\\star})italic_r ( italic_y , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ). However, the learning task distribution\ud835\udc9f\ud835\udc9f\\mathcal{D}caligraphic_D, with its set of queries and gold answers are still labeled byhuman experts.\nThe trainable policy\u03c0\u03b8subscript\ud835\udf0b\ud835\udf03\\pi_{\\theta}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPTis optimized to maximize expected reward:\n\nIn summary, both SFT and RLVR still rely onhuman-curateddatasets of either queries, demonstrations, or verifiers, which ultimately limit scalability. The Absolute Zero paradigm removes this dependency by allowing the model to generate, solve, and learn from its own interactions with the environment entirely through self-play.\n\nWe propose the Absolute Zero paradigm, where during training, the model simultaneously proposes tasks, solves them, and learns from both stages. No external data is required and the model learns entirely through self-play and experience, aided by some environment. We illustrate this paradigm inFigure2, which contrasts Absolute Zero with supervised learning and RLVR, highlighting how our approach eliminates the need for any human-curated data by enabling self-improving task proposal and solution through self-play.\n\nTo make the Absolute Zero setting concrete, we now define how one model can act both as the proposer and solver role. To aid understanding, we include an illustration inFigure3. Let\u03c0\u03b8subscript\ud835\udf0b\ud835\udf03\\pi_{\\theta}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPTbe our parameterized language model, it is used to play two roles, proposer\u03c0\u03b8proposesuperscriptsubscript\ud835\udf0b\ud835\udf03propose\\pi_{\\theta}^{\\text{propose}}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPTand solver\u03c0\u03b8solvesuperscriptsubscript\ud835\udf0b\ud835\udf03solve\\pi_{\\theta}^{\\text{solve}}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPTduring training.\n\nThe proposer first samples a proposed task conditioned on variablez\ud835\udc67zitalic_z:\u03c4\u223c\u03c0\u03b8propose(\u22c5|z)\\tau\\sim\\pi_{\\theta}^{\\text{propose}}(\\cdot|z)italic_\u03c4 \u223c italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT ( \u22c5 | italic_z ), which will then be validated and used to construct a valid reasoning task together with the environmente\ud835\udc52eitalic_e:(x,y\u22c6)\u223cfe(\u22c5|\u03c4)(x,y^{\\star})\\sim f_{e}(\\cdot|\\tau)( italic_x , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) \u223c italic_f start_POSTSUBSCRIPT italic_e end_POSTSUBSCRIPT ( \u22c5 | italic_\u03c4 ), wherex\ud835\udc65xitalic_xis the task query andy\u22c6superscript\ud835\udc66\u22c6y^{\\star}italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis the gold label. Then the solver produces an answery\u223c\u03c0\u03b8solve(\u22c5\u2223x)y\\sim\\pi_{\\theta}^{\\text{solve}}(\\,\\cdot\\mid x)italic_y \u223c italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT ( \u22c5 \u2223 italic_x ). Each proposed task\u03c4\ud835\udf0f\\tauitalic_\u03c4is scored by alearnability rewardrepropose\u2062(\u03c4,\u03c0\u03b8)subscriptsuperscript\ud835\udc5fpropose\ud835\udc52\ud835\udf0fsubscript\ud835\udf0b\ud835\udf03r^{\\text{propose}}_{e}(\\tau,\\pi_{\\theta})italic_r start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_e end_POSTSUBSCRIPT ( italic_\u03c4 , italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT ), which captures the expected improvement in\u03c0\u03b8subscript\ud835\udf0b\ud835\udf03\\pi_{\\theta}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPTafter training on the task queryx\ud835\udc65xitalic_x. Moreover, the same policy also receives asolution rewardresolve\u2062(y,y\u22c6)subscriptsuperscript\ud835\udc5fsolve\ud835\udc52\ud835\udc66superscript\ud835\udc66\u22c6r^{\\text{solve}}_{e}(y,y^{\\star})italic_r start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_e end_POSTSUBSCRIPT ( italic_y , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT )for its answer to the task queryx\ud835\udc65xitalic_x, with the environment again serving as the verifier. A nonnegative coefficient\u03bb\ud835\udf06\\lambdaitalic_\u03bbbalances the trade-off between exploring new, learnable tasks and improving the model\u2019s reasoning and problem-solving abilities. We formally define the absolute zero setting\u2019s objective as follows:\n\nNotice that we shift the burden of scaling data away fromhuman expertsand onto theproposer policy\u03c0\u03b8proposesuperscriptsubscript\ud835\udf0b\ud835\udf03propose\\pi_{\\theta}^{\\text{propose}}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPTand theenvironmente\ud835\udc52eitalic_e. These two roles are both responsible for defining/evolving the learning task distribution, validating proposed tasks, and providing grounded feedback that supports stable and self-sustainable training. When proposing,z\ud835\udc67zitalic_zacts as a conditional variable that seeds generation of tasks. Practically,z\ud835\udc67zitalic_zcan be instantiated by sampling a small subset of past (task, answer) pairs from a continually updated task memory, yet there is no specific implementation tied to the paradigm. To guide the proposing process, we use a learnability rewardrpropose\u2062(\u03c4,\u03c0\u03b8)superscript\ud835\udc5fpropose\ud835\udf0fsubscript\ud835\udf0b\ud835\udf03r^{\\text{propose}}(\\tau,\\pi_{\\theta})italic_r start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT ( italic_\u03c4 , italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT ), which measures how much the model is expected to improve by solving a proposed task\u03c4\ud835\udf0f\\tauitalic_\u03c4. Moreover, the solver rewardrsolve\u2062(y,y\u2217)superscript\ud835\udc5fsolve\ud835\udc66superscript\ud835\udc66r^{\\text{solve}}(y,y^{*})italic_r start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT ( italic_y , italic_y start_POSTSUPERSCRIPT \u2217 end_POSTSUPERSCRIPT )evaluates the correctness of the model\u2019s output. Together, these two signals guide the model to propose tasks that are both challenging and learnable, while also enhancing its reasoning abilities, ultimately enabling continuous improvement through self-play.",
          "type": "section"
        },
        {
          "title": "2.1Preliminaries",
          "level": 3,
          "content": "SFT requires the datasets of task-rationale-answer demonstrations\ud835\udc9f={(x,c\u22c6,y\u22c6)}\ud835\udc9f\ud835\udc65superscript\ud835\udc50\u22c6superscript\ud835\udc66\u22c6\\mathcal{D}=\\{(x,c^{\\star},y^{\\star})\\}caligraphic_D = { ( italic_x , italic_c start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) }, wherex\ud835\udc65xitalic_xis the query,c\u22c6superscript\ud835\udc50\u22c6c^{\\star}italic_c start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis the gold chain-of-thought (CoT)) andy\u22c6superscript\ud835\udc66\u22c6y^{\\star}italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis the gold answer, all provided byhuman expertsorsuperior AI models. The model trains to imitate the reference responses to minimize the conditional negative log-likelihood(Ouyang et\u00a0al.,2022):\n\nHowever, at the frontier level, there\u2019s no stronger model to distill from, and expert human labeling doesn\u2019t scale well.\n\nTo move beyond the limits of pure imitation, RLVR only requires a dataset of task and answer\ud835\udc9f={(x,y\u22c6)}\ud835\udc9f\ud835\udc65superscript\ud835\udc66\u22c6\\mathcal{D}=\\{(x,y^{\\star})\\}caligraphic_D = { ( italic_x , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) }, without labeled rationale. RLVR allows the model to generate its own CoT and calculate a verifiable reward with the golden answerr\u2062(y,y\u22c6)\ud835\udc5f\ud835\udc66superscript\ud835\udc66\u22c6r(y,y^{\\star})italic_r ( italic_y , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ). However, the learning task distribution\ud835\udc9f\ud835\udc9f\\mathcal{D}caligraphic_D, with its set of queries and gold answers are still labeled byhuman experts.\nThe trainable policy\u03c0\u03b8subscript\ud835\udf0b\ud835\udf03\\pi_{\\theta}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPTis optimized to maximize expected reward:\n\nIn summary, both SFT and RLVR still rely onhuman-curateddatasets of either queries, demonstrations, or verifiers, which ultimately limit scalability. The Absolute Zero paradigm removes this dependency by allowing the model to generate, solve, and learn from its own interactions with the environment entirely through self-play.",
          "type": "section"
        },
        {
          "title": "2.2Absolute Zero",
          "level": 3,
          "content": "We propose the Absolute Zero paradigm, where during training, the model simultaneously proposes tasks, solves them, and learns from both stages. No external data is required and the model learns entirely through self-play and experience, aided by some environment. We illustrate this paradigm inFigure2, which contrasts Absolute Zero with supervised learning and RLVR, highlighting how our approach eliminates the need for any human-curated data by enabling self-improving task proposal and solution through self-play.\n\nTo make the Absolute Zero setting concrete, we now define how one model can act both as the proposer and solver role. To aid understanding, we include an illustration inFigure3. Let\u03c0\u03b8subscript\ud835\udf0b\ud835\udf03\\pi_{\\theta}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPTbe our parameterized language model, it is used to play two roles, proposer\u03c0\u03b8proposesuperscriptsubscript\ud835\udf0b\ud835\udf03propose\\pi_{\\theta}^{\\text{propose}}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPTand solver\u03c0\u03b8solvesuperscriptsubscript\ud835\udf0b\ud835\udf03solve\\pi_{\\theta}^{\\text{solve}}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPTduring training.\n\nThe proposer first samples a proposed task conditioned on variablez\ud835\udc67zitalic_z:\u03c4\u223c\u03c0\u03b8propose(\u22c5|z)\\tau\\sim\\pi_{\\theta}^{\\text{propose}}(\\cdot|z)italic_\u03c4 \u223c italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT ( \u22c5 | italic_z ), which will then be validated and used to construct a valid reasoning task together with the environmente\ud835\udc52eitalic_e:(x,y\u22c6)\u223cfe(\u22c5|\u03c4)(x,y^{\\star})\\sim f_{e}(\\cdot|\\tau)( italic_x , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) \u223c italic_f start_POSTSUBSCRIPT italic_e end_POSTSUBSCRIPT ( \u22c5 | italic_\u03c4 ), wherex\ud835\udc65xitalic_xis the task query andy\u22c6superscript\ud835\udc66\u22c6y^{\\star}italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis the gold label. Then the solver produces an answery\u223c\u03c0\u03b8solve(\u22c5\u2223x)y\\sim\\pi_{\\theta}^{\\text{solve}}(\\,\\cdot\\mid x)italic_y \u223c italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT ( \u22c5 \u2223 italic_x ). Each proposed task\u03c4\ud835\udf0f\\tauitalic_\u03c4is scored by alearnability rewardrepropose\u2062(\u03c4,\u03c0\u03b8)subscriptsuperscript\ud835\udc5fpropose\ud835\udc52\ud835\udf0fsubscript\ud835\udf0b\ud835\udf03r^{\\text{propose}}_{e}(\\tau,\\pi_{\\theta})italic_r start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_e end_POSTSUBSCRIPT ( italic_\u03c4 , italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT ), which captures the expected improvement in\u03c0\u03b8subscript\ud835\udf0b\ud835\udf03\\pi_{\\theta}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPTafter training on the task queryx\ud835\udc65xitalic_x. Moreover, the same policy also receives asolution rewardresolve\u2062(y,y\u22c6)subscriptsuperscript\ud835\udc5fsolve\ud835\udc52\ud835\udc66superscript\ud835\udc66\u22c6r^{\\text{solve}}_{e}(y,y^{\\star})italic_r start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_e end_POSTSUBSCRIPT ( italic_y , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT )for its answer to the task queryx\ud835\udc65xitalic_x, with the environment again serving as the verifier. A nonnegative coefficient\u03bb\ud835\udf06\\lambdaitalic_\u03bbbalances the trade-off between exploring new, learnable tasks and improving the model\u2019s reasoning and problem-solving abilities. We formally define the absolute zero setting\u2019s objective as follows:\n\nNotice that we shift the burden of scaling data away fromhuman expertsand onto theproposer policy\u03c0\u03b8proposesuperscriptsubscript\ud835\udf0b\ud835\udf03propose\\pi_{\\theta}^{\\text{propose}}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPTand theenvironmente\ud835\udc52eitalic_e. These two roles are both responsible for defining/evolving the learning task distribution, validating proposed tasks, and providing grounded feedback that supports stable and self-sustainable training. When proposing,z\ud835\udc67zitalic_zacts as a conditional variable that seeds generation of tasks. Practically,z\ud835\udc67zitalic_zcan be instantiated by sampling a small subset of past (task, answer) pairs from a continually updated task memory, yet there is no specific implementation tied to the paradigm. To guide the proposing process, we use a learnability rewardrpropose\u2062(\u03c4,\u03c0\u03b8)superscript\ud835\udc5fpropose\ud835\udf0fsubscript\ud835\udf0b\ud835\udf03r^{\\text{propose}}(\\tau,\\pi_{\\theta})italic_r start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT ( italic_\u03c4 , italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT ), which measures how much the model is expected to improve by solving a proposed task\u03c4\ud835\udf0f\\tauitalic_\u03c4. Moreover, the solver rewardrsolve\u2062(y,y\u2217)superscript\ud835\udc5fsolve\ud835\udc66superscript\ud835\udc66r^{\\text{solve}}(y,y^{*})italic_r start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT ( italic_y , italic_y start_POSTSUPERSCRIPT \u2217 end_POSTSUPERSCRIPT )evaluates the correctness of the model\u2019s output. Together, these two signals guide the model to propose tasks that are both challenging and learnable, while also enhancing its reasoning abilities, ultimately enabling continuous improvement through self-play.",
          "type": "section"
        },
        {
          "title": "3Absolute Zero Reasoner",
          "level": 2,
          "content": "In this section, we presentAbsolute Zero Reasoner(AZR) as the first attempt to embrace the Absolute Zero Paradigm. In AZR, an unified LLM serves as both a proposer and a solver: it generates tasks to evolve its learning curriculum and attempts to solve them to improve its reasoning capabilities. The model is trained jointly with both roles, learning to create tasks that push the boundary of reasoning capacity while enhancing its ability to solve them effectively\u00a0(Section3.1). Within this self-play training paradigm, the model learns from three distinct type of coding tasks, which corresponding to three fundamental modes of reasoning: abduction, deduction and induction\u00a0(Section3.2). Using coding tasks is motivated by the Turing-completeness of programming languages(Stuart,2015)and empirical evidence that code-based training improves reasoning(Aryabumi et\u00a0al.,2024). We adopt code as an open-ended, expressive, and verifiable medium for enabling reliable task construction and verification\u00a0(Section3.3). Finally, the model is updated using a newly proposed advantage estimator designed for multitask learning\u00a0(Section3.3.5). We outline the overall algorithm inAlgorithm1and highlight an illustration of our Absolute Zero Reasoner approach inFigure4. To expedite future exploration in this area, we also present several attempts that did not yield fruitful results but still warrant discussion inAppendixD.\n\nLarge language models are naturally suited for implementing AZR in a multitask learning context(Radford et\u00a0al.,2019), as both the formulation of reasoning tasks and their solutions occur within a unified language space. To this end, we propose rewarding a single model for both generating high learning potential tasks and solving them effectively, as specified by the Absolute Zero objective inEquation3. At each iteration of the online rollout, AZR proposes new reasoning tasks by conditioning on the task type (as defined inSection3.2) andK\ud835\udc3eKitalic_Kpast self-generated examples. The model is explicitly prompted to generate tasks that differ from these examples, promoting diversity and broader coverage of the task space. These task proposals are filtered and transformed into valid reasoning tasks that can be verified using the environment, outlined later inSection3.3. AZR then attempts to solve these newly proposed tasks, receiving grounded feedback for its model responses. Both task proposal and problem solving are trained using reinforcement learning. We now outline the rewards used for each role.\n\nPrior work has shown that setting appropriate task difficulty is critical for promoting effective learning in reasoning systems(Zeng et\u00a0al.,2025b). Motivated by this, we design a reward function for the proposer that encourages generation of tasks with meaningful learning potential\u2014neither too easy nor unsolvable for the current solver. Concretely, we use the same language model in its solver role to estimate thelearnabilityof a proposed task, a similar type of reward used in unsupervised environment design literature(Sukhbaatar et\u00a0al.,2018). We performn\ud835\udc5bnitalic_nMonte Carlo rollouts of the solver and compute the average success rate:r\u00afsolve=1n\u2062\u2211i=1Nrsolve(i)subscript\u00af\ud835\udc5fsolve1\ud835\udc5bsuperscriptsubscript\ud835\udc561\ud835\udc41superscriptsubscript\ud835\udc5fsolve\ud835\udc56\\bar{r}_{\\text{solve}}=\\frac{1}{n}\\sum_{i=1}^{N}r_{\\text{solve}}^{(i)}over\u00af start_ARG italic_r end_ARG start_POSTSUBSCRIPT solve end_POSTSUBSCRIPT = divide start_ARG 1 end_ARG start_ARG italic_n end_ARG \u2211 start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_N end_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT solve end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_i ) end_POSTSUPERSCRIPT. The proposer\u2019s reward is then defined as:\n\nThe intuition is that if a task is either trivial to solve (r\u00afsolve=1subscript\u00af\ud835\udc5fsolve1\\bar{r}_{\\text{solve}}=1over\u00af start_ARG italic_r end_ARG start_POSTSUBSCRIPT solve end_POSTSUBSCRIPT = 1) or unsolvable (r\u00afsolve=0subscript\u00af\ud835\udc5fsolve0\\bar{r}_{\\text{solve}}=0over\u00af start_ARG italic_r end_ARG start_POSTSUBSCRIPT solve end_POSTSUBSCRIPT = 0), the task provides little to no learning signal for the proposer. In contrast, tasks of moderate difficulty, where the solver occasionally succeeds are rewarded the most, as they offer the richest feedback and greatest potential for learning.\n\nFor the solver, we assign a simple binary reward based on the correctness of its final output,\n\nwherey\u22c6superscript\ud835\udc66\u22c6y^{\\star}italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis the ground-truth answer, and equality is evaluated based on value equality in Python.\n\nWith the primary rewards for the proposing and solving roles defined, we adopt the following composite reward structure, which integratesrproposesubscript\ud835\udc5fproposer_{\\text{propose}}italic_r start_POSTSUBSCRIPT propose end_POSTSUBSCRIPTandrsolvesubscript\ud835\udc5fsolver_{\\text{solve}}italic_r start_POSTSUBSCRIPT solve end_POSTSUBSCRIPTwith a format-aware penalty inspired byDeepSeek-AI et\u00a0al.(2025):\n\nwherey\u03c0subscript\ud835\udc66\ud835\udf0by_{\\pi}italic_y start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTis the response of the language model. The main format that the proposing and solving tasks need to follow is the DeepSeek R1<think>and<answer>format, as shown inFigure33. Moreover, for the proposer, the reward criterion for format goes beyond simply following the XML structure. As detailed inSection3.3.3, only responses that produce valid triplets and pass the filtering stage are considered to be correctly formatted.\n\nAZR uses code executor as both a flexible interface and a verifiable environment. This setup enables automatic construction, execution, and validation of code reasoning tasks(Stuart,2015;Aryabumi et\u00a0al.,2024). Give program space\ud835\udcab\ud835\udcab\\mathscr{P}script_P, input space\u2110\u2110\\mathscr{I}script_Iand output space\ud835\udcaa\ud835\udcaa\\mathscr{O}script_Oof a coding language, we define an AZR reasoning task as a triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ), wherep\u2208\ud835\udcab\ud835\udc5d\ud835\udcabp\\in\\mathscr{P}italic_p \u2208 script_Pis a program,i\u2208\u2110\ud835\udc56\u2110i\\in\\mathscr{I}italic_i \u2208 script_Iis an input, ando\u2208\ud835\udcaa\ud835\udc5c\ud835\udcaao\\in\\mathscr{O}italic_o \u2208 script_Ois the corresponding output produced by running program on input,o=p\u2062(i)\ud835\udc5c\ud835\udc5d\ud835\udc56o=p(i)italic_o = italic_p ( italic_i ). AZR learns by reasoning about different parts of this task triplet, using three distinct core reasoning modes, each of which focuses on inferring one part of the triplet given the others:\n\nDeduction: predicting the outputo\ud835\udc5coitalic_ogiven a programp\ud835\udc5dpitalic_pand inputi\ud835\udc56iitalic_i, capturing step-by-step logical reasoning.\n\nAs aproposer, AZR is conditioned on the task type\u03b1=deduction\ud835\udefcdeduction\\alpha=\\text{deduction}italic_\u03b1 = deductionandK\ud835\udc3eKitalic_Kreference examples from the deduction buffer\ud835\udc9fdeductionsubscript\ud835\udc9fdeduction\\mathcal{D}_{\\text{deduction}}caligraphic_D start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT(all task buffers are outlined inSection3.3), and generates a pair(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i ). The environmente\ud835\udc52eitalic_ethen executesp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )to computeo\ud835\udc5coitalic_o, completing the triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ), which is added to the buffer if non-error output was produced.\n\nAs asolver, the model receives(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )and predicts the outputo\u03c0subscript\ud835\udc5c\ud835\udf0bo_{\\pi}italic_o start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT. The predicted output is verified using type-aware value equality in python to account for possible variations (such as set ordering or fractions).\n\nAbduction: inferring a plausible inputi\ud835\udc56iitalic_igiven the programp\ud835\udc5dpitalic_pand an outputo\ud835\udc5coitalic_o, resembling trial-and-error or online search.\n\nAs aproposer, the policy\u03c0proposesuperscript\ud835\udf0bpropose\\pi^{\\text{propose}}italic_\u03c0 start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT\u2019s input and output is almost the same as the proposer for the deduction task, except that the task type\u03b1=abduction\ud835\udefcabduction\\alpha=\\text{abduction}italic_\u03b1 = abductionis changed as an input. The model generates a pair(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )conditioned on\u03b1\ud835\udefc\\alphaitalic_\u03b1and reference examples. Then we executesp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )and get the triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ).\n\nAs asolver, the model receives(p,o)\ud835\udc5d\ud835\udc5c(p,o)( italic_p , italic_o )and predictsi\u03c0subscript\ud835\udc56\ud835\udf0bi_{\\pi}italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT. The solution is verified by checking whetherp\u2062(i\u03c0)=o\ud835\udc5dsubscript\ud835\udc56\ud835\udf0b\ud835\udc5cp(i_{\\pi})=oitalic_p ( italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT ) = italic_o. Since programs may not be bijective, we useoutputvalue equivalence rather than requiring exact input matches.\n\nInduction:synthesizing a programp\ud835\udc5dpitalic_pfrom a set of in-out examples{(in,on)}superscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\\{(i^{n},o^{n})\\}{ ( italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT ) }, requiring generalization from partial information.\n\nAs aproposer, AZR samples a valid programp\ud835\udc5dpitalic_pfrom\ud835\udc9fabduction\u222a\ud835\udc9fdeductionsubscript\ud835\udc9fabductionsubscript\ud835\udc9fdeduction\\mathcal{D}_{\\text{abduction}}\\cup\\mathcal{D}_{\\text{deduction}}caligraphic_D start_POSTSUBSCRIPT abduction end_POSTSUBSCRIPT \u222a caligraphic_D start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT, generatesN\ud835\udc41Nitalic_Nnew inputs and a messagem\ud835\udc5amitalic_m, and uses the environment to compute corresponding outputs. This forms an extended task representation(p,{(in,on)},m)\ud835\udc5dsuperscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\ud835\udc5a(p,\\{(i^{n},o^{n})\\},m)( italic_p , { ( italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT ) } , italic_m ), which is stored in the induction buffer\ud835\udc9finductionsubscript\ud835\udc9finduction\\mathcal{D}_{\\text{induction}}caligraphic_D start_POSTSUBSCRIPT induction end_POSTSUBSCRIPT. Since infinitely many functions can map the inputs to the outputs, making the induction task under-constrained, the messagem\ud835\udc5amitalic_mhelps properly condition the problem for the solver.\n\nAs asolver, the model is shown the first half of the input-output pairs and the messagem\ud835\udc5amitalic_m, and must synthesize a programp\u03c0subscript\ud835\udc5d\ud835\udf0bp_{\\pi}italic_p start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTthat correctly maps the remaining hidden inputs to their outputs. The use of held-out examples discourages overfitting through if-else logic and promotes generalized induction.\n\nEach reasoning task type leverages code as an expressive and verifiable medium, aligning with the Absolute Zero Paradigm\u2019s goals of fully self-improving systems in open-ended domains(DeepSeek-AI et\u00a0al.,2025;Lambert et\u00a0al.,2024). All prompts used by three different task types and two types of roles within a task type are shown inFigures36,34,35,39,37and38. Next, we outline exact details of our algorithm.\n\nIn this section, we will discuss details of our AZR self-play algorithm, including initialization of buffers3.3.1, usage of thse buffers3.3.2, construction of valid tasks3.3.3, validating solutions3.3.4, and finally advantage estimator calculation3.3.5. We outline the overall recipe of the self-play procedure of AZR inAlgorithm1.\n\nTo initialize AZR self-play, we first generate a seed set of valid triplets using the base language model. Each prompt samples up toK\ud835\udc3eKitalic_Ktriplets from the current seed buffer\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPTas references. When\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPTis empty at time 0, we fall back to the zero triplet show inFigure5. During the seeding stage, we use the same proposer prompts detailed inFigures34,35and36.\n\nFirst, for deduction and abduction tasks, the LLM is prompted to generate(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )pairs, which are filtered, executed, and stored as valid triplets. We initialize\ud835\udc9fabduction0=\ud835\udc9fdeduction0=\ud835\udc9fseedsubscriptsuperscript\ud835\udc9f0abductionsubscriptsuperscript\ud835\udc9f0deductionsubscript\ud835\udc9fseed\\mathcal{D}^{0}_{\\text{abduction}}=\\mathcal{D}^{0}_{\\text{deduction}}=\\mathcal%\n{D}_{\\text{seed}}caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT abduction end_POSTSUBSCRIPT = caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT = caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT, where|\ud835\udc9fseed|=B\u00d7Ssubscript\ud835\udc9fseed\ud835\udc35\ud835\udc46|\\mathcal{D}_{\\text{seed}}|=B\\times S| caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT | = italic_B \u00d7 italic_S, whereB\ud835\udc35Bitalic_Bis the batch size, andS=4\ud835\udc464S=4italic_S = 4is a factor we fix in all experiments. All seed triplet\u2019s program are stripped of global variables and comments (AppendixD), but subsequent iterations of adding new triplets to the buffers are unaltered. No model updates occur during this phase. Similarly, to initialize the induction buffer, we sample programs from\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT, generate matching input sets and messages, and collect valid examples until|\ud835\udc9finduction0|=B\u00d7Ssubscriptsuperscript\ud835\udc9f0induction\ud835\udc35\ud835\udc46|\\mathcal{D}^{0}_{\\text{induction}}|=B\\times S| caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT induction end_POSTSUBSCRIPT | = italic_B \u00d7 italic_S.\n\nDuring the actual self-play stage of AZR, we use the task buffer in three ways.First, for the proposer of abduction and deduction tasks, we uniformly sampleK\ud835\udc3eKitalic_Kpast triplets from the buffer, present them as in-context examples to the proposer and let it generate a new task. The design is to show it past examples, and prompt it to generate a different one to promote diversity(Zhao et\u00a0al.,2025a).Second, we sample one triplet from the union of abduction and deduction buffers\ud835\udc9fabd\u2062\u22c3\ud835\udc9fdedsubscript\ud835\udc9fabdsubscript\ud835\udc9fded\\mathcal{D}_{\\text{abd}}\\bigcup\\mathcal{D}_{\\text{ded}}caligraphic_D start_POSTSUBSCRIPT abd end_POSTSUBSCRIPT \u22c3 caligraphic_D start_POSTSUBSCRIPT ded end_POSTSUBSCRIPT, and present the programp\ud835\udc5dpitalic_pfrom that triplet to the induction proposer to generate a set ofN\ud835\udc41Nitalic_Nmatching inputs{in}superscript\ud835\udc56\ud835\udc5b\\{i^{n}\\}{ italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT }and a natural language messagem\ud835\udc5amitalic_m.Lastly, to maintain stable training, if a batch of solver problems contains fewer thanB\ud835\udc35Bitalic_Bvalid proposed tasks (proposer not adhering to formatting), we fill the remainder by uniformly sampling from the corresponding task buffer of previously validated triplets.\n\nThe buffer grows for abduction and deduction tasks whenever\u03c0\ud835\udf0b\\piitalic_\u03c0propose a valid triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ), regardless if it gets any task reward. Similarly, for induction tasks, all valid triplets(p,{in,on}),m\ud835\udc5dsuperscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\ud835\udc5a(p,\\{i^{n},o^{n}\\}),m( italic_p , { italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT } ) , italic_mare added to the buffer.\n\nProposal Task Validation.We first describe how we construct valid tasks from the proposals generated by the policy\u03c0\ud835\udf0b\\piitalic_\u03c0. Fordeduction and abductiontasks, each proposal consists of a program and an input(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i ). To validate the task, we use the task validation procedure (steps shown below) on the input to obtain the correct outputo\ud835\udc5coitalic_o, resulting in a complete triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ). Forinductiontasks, given a programp\ud835\udc5dpitalic_pthe policy proposes a set of inputs{in}superscript\ud835\udc56\ud835\udc5b\\{i^{n}\\}{ italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT }and messagem\ud835\udc5amitalic_m. We also use the task validation procedure on each of the inputinsuperscript\ud835\udc56\ud835\udc5bi^{n}italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPTin the set to obtain a corresponding outputonsuperscript\ud835\udc5c\ud835\udc5bo^{n}italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT, forming a set of input-output pairs{in,on}superscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\\{i^{n},o^{n}\\}{ italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT }. We do not impose any constraints onm\ud835\udc5amitalic_m. The resulting task is considered valid only when all inputs yield valid outputs and the formatting requirements are satisfied. Thetask validation procedureentails:\n\nProgram Integrity.We first use Python to run the programp\ud835\udc5dpitalic_pwith the inputi\ud835\udc56iitalic_i. If no errors are raised and something is returned, we then gather the outputo\ud835\udc5coitalic_oof that(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )pair and determine that the program at least has valid syntax.\n\nProgram Safety.We also check whether a program is safe for execution by restricting the use of certain sensitive packages that might cause harm to the Python environment,i.e.,os.sys, sys, shutil. The list of packages used to filter out invalid programs is provided inFigure8. This list is also included in the instructions when prompting the language model to generate questions. SeeFigures34,35and36.\n\nCheck for Determinism.In our setting, we only considerdeterministic programs,i.e.,p\u2208\ud835\udcabdeterministic\u2282\ud835\udcab\ud835\udc5dsubscript\ud835\udcabdeterministic\ud835\udcabp\\in\\mathscr{P}_{\\text{deterministic}}\\subset\\mathscr{P}italic_p \u2208 script_P start_POSTSUBSCRIPT deterministic end_POSTSUBSCRIPT \u2282 script_P, where\ud835\udcab\ud835\udcab\\mathscr{P}script_Pis the space of all valid programs and\u2110\u2110\\mathscr{I}script_Iis the space of all valid inputs:\n\nwhere(j)\ud835\udc57(j)( italic_j )indexes repeated independent executions of the program. That is, for all inputsi\ud835\udc56iitalic_i, the output ofp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )remains identical with any independent execution of the program. Avalid program/input/output triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o )is defined such thato=p\u2062(i)\ud835\udc5c\ud835\udc5d\ud835\udc56o=p(i)italic_o = italic_p ( italic_i ), wherep\u2208\ud835\udcabdeterministic\ud835\udc5dsubscript\ud835\udcabdeterministicp\\in\\mathscr{P}_{\\text{deterministic}}italic_p \u2208 script_P start_POSTSUBSCRIPT deterministic end_POSTSUBSCRIPT.\n\nSince the output of probabilistic programs can vary on every individual run, it is non-trivial to use verifiable functions to evaluate the correctness of an answer. Therefore, to keep the verifier simple, we restrict the valid programs generated by the learner to the class of deterministic programs. We believe that stochastic programs can encompass a larger class of behaviors and are important and promising to include in future versions of AZR.\n\nTo implement the filtering of invalid probabilistic programs, and following the definition of a deterministic program highlighted inEquation7, we approximate this procedure by independently running the programj\ud835\udc57jitalic_jfinite times and checking that all the outputs are equal. For computational budget reasons, we fixedj=2\ud835\udc572j=2italic_j = 2for all experiments.\n\nSolving Task Construction.If a task proposal passes these three checks, we deem it a valid task and apply appropriate procedures to present part of the triplet to the solver. Specifically, we setx=(p,i)\ud835\udc65\ud835\udc5d\ud835\udc56x=(p,i)italic_x = ( italic_p , italic_i )for deduction;x=(p,o)\ud835\udc65\ud835\udc5d\ud835\udc5cx=(p,o)italic_x = ( italic_p , italic_o )for abduction; andx=({in,on}n=1N\u2063/\u2063/2,m)\ud835\udc65subscriptsuperscriptsuperscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\ud835\udc41absent2\ud835\udc5b1\ud835\udc5ax=(\\{i^{n},o^{n}\\}^{N//2}_{n=1},m)italic_x = ( { italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT } start_POSTSUPERSCRIPT italic_N / / 2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n = 1 end_POSTSUBSCRIPT , italic_m )for induction, where half of the tests cases and a program descriptionm\ud835\udc5amitalic_mis used. We use all valid tasks from timestept\ud835\udc61titalic_t; if the batchB\ud835\udc35Bitalic_Bis not full, we uniformly sample from previously validated tasks to fill the batch.\n\nFor abduction task, we receivei\u03c0subscript\ud835\udc56\ud835\udf0bi_{\\pi}italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTfrom the solver policy, then we equivalence match usingp\u2062(i\u03c0)=p\u2062(i\u22c6)\ud835\udc5dsubscript\ud835\udc56\ud835\udf0b\ud835\udc5dsuperscript\ud835\udc56\u22c6p(i_{\\pi})=p(i^{\\star})italic_p ( italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT ) = italic_p ( italic_i start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ), where\u2217*\u2217refers to the privileged gold information. The reason we do not just matchi\u03c0subscript\ud835\udc56\ud835\udf0bi_{\\pi}italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTandi\u22c6superscript\ud835\udc56\u22c6i^{\\star}italic_i start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis becausep\ud835\udc5dpitalic_pis not necessarily bijective. For deduction task, we matcho\u03c0=o\u22c6subscript\ud835\udc5c\ud835\udf0bsuperscript\ud835\udc5c\u22c6o_{\\pi}=o^{\\star}italic_o start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT = italic_o start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT. For induction, we matchall\u2061({p\u03c0\u2062(in\u22c6)=on\u22c6}N)allsuperscriptsubscript\ud835\udc5d\ud835\udf0bsuperscriptsubscript\ud835\udc56\ud835\udc5b\u22c6superscriptsubscript\ud835\udc5c\ud835\udc5b\u22c6\ud835\udc41\\operatorname{all}(\\{p_{\\pi}(i_{n}^{\\star})=o_{n}^{\\star}\\}^{N})roman_all ( { italic_p start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT ( italic_i start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) = italic_o start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT } start_POSTSUPERSCRIPT italic_N end_POSTSUPERSCRIPT ). This part might be convoluted to explain in language, therefore we recommend the reader to see how we did abduction, deduction and induction verification in code inFigures10,11and12, respectively.\n\nSince AZR trains the combination of roles and task types, it operates in a multitask reinforcement learning setup(Zhang & Yang,2021;Zhao et\u00a0al.,2022;Wang et\u00a0al.,2023;Yue et\u00a0al.,2023). Instead of computing a single global baseline as in REINFORCE++(Hu,2025)(AppendixA), we compute separate baselines for each of the six task-role configurations. This can be viewed as an interpolation between per-question baselines, as in GRPO(Shao et\u00a0al.,2024), and a global baseline, allowing for more structured variance reduction tailored to each task setup. We refer to this variant asTask-Relative REINFORCE++ (TRR++). The normalized advantageAnormsuperscript\ud835\udc34normA^{\\text{norm}}italic_A start_POSTSUPERSCRIPT norm end_POSTSUPERSCRIPTis computed as:\n\nwhere the mean and standard deviation are computedwithin each task type and role, yielding six baselines.",
          "type": "section"
        },
        {
          "title": "3.1Two Roles in One: Proposer and Solver",
          "level": 3,
          "content": "Large language models are naturally suited for implementing AZR in a multitask learning context(Radford et\u00a0al.,2019), as both the formulation of reasoning tasks and their solutions occur within a unified language space. To this end, we propose rewarding a single model for both generating high learning potential tasks and solving them effectively, as specified by the Absolute Zero objective inEquation3. At each iteration of the online rollout, AZR proposes new reasoning tasks by conditioning on the task type (as defined inSection3.2) andK\ud835\udc3eKitalic_Kpast self-generated examples. The model is explicitly prompted to generate tasks that differ from these examples, promoting diversity and broader coverage of the task space. These task proposals are filtered and transformed into valid reasoning tasks that can be verified using the environment, outlined later inSection3.3. AZR then attempts to solve these newly proposed tasks, receiving grounded feedback for its model responses. Both task proposal and problem solving are trained using reinforcement learning. We now outline the rewards used for each role.\n\nPrior work has shown that setting appropriate task difficulty is critical for promoting effective learning in reasoning systems(Zeng et\u00a0al.,2025b). Motivated by this, we design a reward function for the proposer that encourages generation of tasks with meaningful learning potential\u2014neither too easy nor unsolvable for the current solver. Concretely, we use the same language model in its solver role to estimate thelearnabilityof a proposed task, a similar type of reward used in unsupervised environment design literature(Sukhbaatar et\u00a0al.,2018). We performn\ud835\udc5bnitalic_nMonte Carlo rollouts of the solver and compute the average success rate:r\u00afsolve=1n\u2062\u2211i=1Nrsolve(i)subscript\u00af\ud835\udc5fsolve1\ud835\udc5bsuperscriptsubscript\ud835\udc561\ud835\udc41superscriptsubscript\ud835\udc5fsolve\ud835\udc56\\bar{r}_{\\text{solve}}=\\frac{1}{n}\\sum_{i=1}^{N}r_{\\text{solve}}^{(i)}over\u00af start_ARG italic_r end_ARG start_POSTSUBSCRIPT solve end_POSTSUBSCRIPT = divide start_ARG 1 end_ARG start_ARG italic_n end_ARG \u2211 start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_N end_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT solve end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_i ) end_POSTSUPERSCRIPT. The proposer\u2019s reward is then defined as:\n\nThe intuition is that if a task is either trivial to solve (r\u00afsolve=1subscript\u00af\ud835\udc5fsolve1\\bar{r}_{\\text{solve}}=1over\u00af start_ARG italic_r end_ARG start_POSTSUBSCRIPT solve end_POSTSUBSCRIPT = 1) or unsolvable (r\u00afsolve=0subscript\u00af\ud835\udc5fsolve0\\bar{r}_{\\text{solve}}=0over\u00af start_ARG italic_r end_ARG start_POSTSUBSCRIPT solve end_POSTSUBSCRIPT = 0), the task provides little to no learning signal for the proposer. In contrast, tasks of moderate difficulty, where the solver occasionally succeeds are rewarded the most, as they offer the richest feedback and greatest potential for learning.\n\nFor the solver, we assign a simple binary reward based on the correctness of its final output,\n\nwherey\u22c6superscript\ud835\udc66\u22c6y^{\\star}italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis the ground-truth answer, and equality is evaluated based on value equality in Python.\n\nWith the primary rewards for the proposing and solving roles defined, we adopt the following composite reward structure, which integratesrproposesubscript\ud835\udc5fproposer_{\\text{propose}}italic_r start_POSTSUBSCRIPT propose end_POSTSUBSCRIPTandrsolvesubscript\ud835\udc5fsolver_{\\text{solve}}italic_r start_POSTSUBSCRIPT solve end_POSTSUBSCRIPTwith a format-aware penalty inspired byDeepSeek-AI et\u00a0al.(2025):\n\nwherey\u03c0subscript\ud835\udc66\ud835\udf0by_{\\pi}italic_y start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTis the response of the language model. The main format that the proposing and solving tasks need to follow is the DeepSeek R1<think>and<answer>format, as shown inFigure33. Moreover, for the proposer, the reward criterion for format goes beyond simply following the XML structure. As detailed inSection3.3.3, only responses that produce valid triplets and pass the filtering stage are considered to be correctly formatted.",
          "type": "section"
        },
        {
          "title": "3.2Learning Different Modes of Reasoning: Deduction, Induction, and Abduction",
          "level": 3,
          "content": "AZR uses code executor as both a flexible interface and a verifiable environment. This setup enables automatic construction, execution, and validation of code reasoning tasks(Stuart,2015;Aryabumi et\u00a0al.,2024). Give program space\ud835\udcab\ud835\udcab\\mathscr{P}script_P, input space\u2110\u2110\\mathscr{I}script_Iand output space\ud835\udcaa\ud835\udcaa\\mathscr{O}script_Oof a coding language, we define an AZR reasoning task as a triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ), wherep\u2208\ud835\udcab\ud835\udc5d\ud835\udcabp\\in\\mathscr{P}italic_p \u2208 script_Pis a program,i\u2208\u2110\ud835\udc56\u2110i\\in\\mathscr{I}italic_i \u2208 script_Iis an input, ando\u2208\ud835\udcaa\ud835\udc5c\ud835\udcaao\\in\\mathscr{O}italic_o \u2208 script_Ois the corresponding output produced by running program on input,o=p\u2062(i)\ud835\udc5c\ud835\udc5d\ud835\udc56o=p(i)italic_o = italic_p ( italic_i ). AZR learns by reasoning about different parts of this task triplet, using three distinct core reasoning modes, each of which focuses on inferring one part of the triplet given the others:\n\nDeduction: predicting the outputo\ud835\udc5coitalic_ogiven a programp\ud835\udc5dpitalic_pand inputi\ud835\udc56iitalic_i, capturing step-by-step logical reasoning.\n\nAs aproposer, AZR is conditioned on the task type\u03b1=deduction\ud835\udefcdeduction\\alpha=\\text{deduction}italic_\u03b1 = deductionandK\ud835\udc3eKitalic_Kreference examples from the deduction buffer\ud835\udc9fdeductionsubscript\ud835\udc9fdeduction\\mathcal{D}_{\\text{deduction}}caligraphic_D start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT(all task buffers are outlined inSection3.3), and generates a pair(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i ). The environmente\ud835\udc52eitalic_ethen executesp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )to computeo\ud835\udc5coitalic_o, completing the triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ), which is added to the buffer if non-error output was produced.\n\nAs asolver, the model receives(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )and predicts the outputo\u03c0subscript\ud835\udc5c\ud835\udf0bo_{\\pi}italic_o start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT. The predicted output is verified using type-aware value equality in python to account for possible variations (such as set ordering or fractions).\n\nAbduction: inferring a plausible inputi\ud835\udc56iitalic_igiven the programp\ud835\udc5dpitalic_pand an outputo\ud835\udc5coitalic_o, resembling trial-and-error or online search.\n\nAs aproposer, the policy\u03c0proposesuperscript\ud835\udf0bpropose\\pi^{\\text{propose}}italic_\u03c0 start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT\u2019s input and output is almost the same as the proposer for the deduction task, except that the task type\u03b1=abduction\ud835\udefcabduction\\alpha=\\text{abduction}italic_\u03b1 = abductionis changed as an input. The model generates a pair(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )conditioned on\u03b1\ud835\udefc\\alphaitalic_\u03b1and reference examples. Then we executesp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )and get the triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ).\n\nAs asolver, the model receives(p,o)\ud835\udc5d\ud835\udc5c(p,o)( italic_p , italic_o )and predictsi\u03c0subscript\ud835\udc56\ud835\udf0bi_{\\pi}italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT. The solution is verified by checking whetherp\u2062(i\u03c0)=o\ud835\udc5dsubscript\ud835\udc56\ud835\udf0b\ud835\udc5cp(i_{\\pi})=oitalic_p ( italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT ) = italic_o. Since programs may not be bijective, we useoutputvalue equivalence rather than requiring exact input matches.\n\nInduction:synthesizing a programp\ud835\udc5dpitalic_pfrom a set of in-out examples{(in,on)}superscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\\{(i^{n},o^{n})\\}{ ( italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT ) }, requiring generalization from partial information.\n\nAs aproposer, AZR samples a valid programp\ud835\udc5dpitalic_pfrom\ud835\udc9fabduction\u222a\ud835\udc9fdeductionsubscript\ud835\udc9fabductionsubscript\ud835\udc9fdeduction\\mathcal{D}_{\\text{abduction}}\\cup\\mathcal{D}_{\\text{deduction}}caligraphic_D start_POSTSUBSCRIPT abduction end_POSTSUBSCRIPT \u222a caligraphic_D start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT, generatesN\ud835\udc41Nitalic_Nnew inputs and a messagem\ud835\udc5amitalic_m, and uses the environment to compute corresponding outputs. This forms an extended task representation(p,{(in,on)},m)\ud835\udc5dsuperscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\ud835\udc5a(p,\\{(i^{n},o^{n})\\},m)( italic_p , { ( italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT ) } , italic_m ), which is stored in the induction buffer\ud835\udc9finductionsubscript\ud835\udc9finduction\\mathcal{D}_{\\text{induction}}caligraphic_D start_POSTSUBSCRIPT induction end_POSTSUBSCRIPT. Since infinitely many functions can map the inputs to the outputs, making the induction task under-constrained, the messagem\ud835\udc5amitalic_mhelps properly condition the problem for the solver.\n\nAs asolver, the model is shown the first half of the input-output pairs and the messagem\ud835\udc5amitalic_m, and must synthesize a programp\u03c0subscript\ud835\udc5d\ud835\udf0bp_{\\pi}italic_p start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTthat correctly maps the remaining hidden inputs to their outputs. The use of held-out examples discourages overfitting through if-else logic and promotes generalized induction.\n\nEach reasoning task type leverages code as an expressive and verifiable medium, aligning with the Absolute Zero Paradigm\u2019s goals of fully self-improving systems in open-ended domains(DeepSeek-AI et\u00a0al.,2025;Lambert et\u00a0al.,2024). All prompts used by three different task types and two types of roles within a task type are shown inFigures36,34,35,39,37and38. Next, we outline exact details of our algorithm.",
          "type": "section"
        },
        {
          "title": "3.3Absolute Zero Reasoner Learning Algorithm",
          "level": 3,
          "content": "In this section, we will discuss details of our AZR self-play algorithm, including initialization of buffers3.3.1, usage of thse buffers3.3.2, construction of valid tasks3.3.3, validating solutions3.3.4, and finally advantage estimator calculation3.3.5. We outline the overall recipe of the self-play procedure of AZR inAlgorithm1.\n\nTo initialize AZR self-play, we first generate a seed set of valid triplets using the base language model. Each prompt samples up toK\ud835\udc3eKitalic_Ktriplets from the current seed buffer\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPTas references. When\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPTis empty at time 0, we fall back to the zero triplet show inFigure5. During the seeding stage, we use the same proposer prompts detailed inFigures34,35and36.\n\nFirst, for deduction and abduction tasks, the LLM is prompted to generate(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )pairs, which are filtered, executed, and stored as valid triplets. We initialize\ud835\udc9fabduction0=\ud835\udc9fdeduction0=\ud835\udc9fseedsubscriptsuperscript\ud835\udc9f0abductionsubscriptsuperscript\ud835\udc9f0deductionsubscript\ud835\udc9fseed\\mathcal{D}^{0}_{\\text{abduction}}=\\mathcal{D}^{0}_{\\text{deduction}}=\\mathcal%\n{D}_{\\text{seed}}caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT abduction end_POSTSUBSCRIPT = caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT = caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT, where|\ud835\udc9fseed|=B\u00d7Ssubscript\ud835\udc9fseed\ud835\udc35\ud835\udc46|\\mathcal{D}_{\\text{seed}}|=B\\times S| caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT | = italic_B \u00d7 italic_S, whereB\ud835\udc35Bitalic_Bis the batch size, andS=4\ud835\udc464S=4italic_S = 4is a factor we fix in all experiments. All seed triplet\u2019s program are stripped of global variables and comments (AppendixD), but subsequent iterations of adding new triplets to the buffers are unaltered. No model updates occur during this phase. Similarly, to initialize the induction buffer, we sample programs from\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT, generate matching input sets and messages, and collect valid examples until|\ud835\udc9finduction0|=B\u00d7Ssubscriptsuperscript\ud835\udc9f0induction\ud835\udc35\ud835\udc46|\\mathcal{D}^{0}_{\\text{induction}}|=B\\times S| caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT induction end_POSTSUBSCRIPT | = italic_B \u00d7 italic_S.\n\nDuring the actual self-play stage of AZR, we use the task buffer in three ways.First, for the proposer of abduction and deduction tasks, we uniformly sampleK\ud835\udc3eKitalic_Kpast triplets from the buffer, present them as in-context examples to the proposer and let it generate a new task. The design is to show it past examples, and prompt it to generate a different one to promote diversity(Zhao et\u00a0al.,2025a).Second, we sample one triplet from the union of abduction and deduction buffers\ud835\udc9fabd\u2062\u22c3\ud835\udc9fdedsubscript\ud835\udc9fabdsubscript\ud835\udc9fded\\mathcal{D}_{\\text{abd}}\\bigcup\\mathcal{D}_{\\text{ded}}caligraphic_D start_POSTSUBSCRIPT abd end_POSTSUBSCRIPT \u22c3 caligraphic_D start_POSTSUBSCRIPT ded end_POSTSUBSCRIPT, and present the programp\ud835\udc5dpitalic_pfrom that triplet to the induction proposer to generate a set ofN\ud835\udc41Nitalic_Nmatching inputs{in}superscript\ud835\udc56\ud835\udc5b\\{i^{n}\\}{ italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT }and a natural language messagem\ud835\udc5amitalic_m.Lastly, to maintain stable training, if a batch of solver problems contains fewer thanB\ud835\udc35Bitalic_Bvalid proposed tasks (proposer not adhering to formatting), we fill the remainder by uniformly sampling from the corresponding task buffer of previously validated triplets.\n\nThe buffer grows for abduction and deduction tasks whenever\u03c0\ud835\udf0b\\piitalic_\u03c0propose a valid triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ), regardless if it gets any task reward. Similarly, for induction tasks, all valid triplets(p,{in,on}),m\ud835\udc5dsuperscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\ud835\udc5a(p,\\{i^{n},o^{n}\\}),m( italic_p , { italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT } ) , italic_mare added to the buffer.\n\nProposal Task Validation.We first describe how we construct valid tasks from the proposals generated by the policy\u03c0\ud835\udf0b\\piitalic_\u03c0. Fordeduction and abductiontasks, each proposal consists of a program and an input(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i ). To validate the task, we use the task validation procedure (steps shown below) on the input to obtain the correct outputo\ud835\udc5coitalic_o, resulting in a complete triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ). Forinductiontasks, given a programp\ud835\udc5dpitalic_pthe policy proposes a set of inputs{in}superscript\ud835\udc56\ud835\udc5b\\{i^{n}\\}{ italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT }and messagem\ud835\udc5amitalic_m. We also use the task validation procedure on each of the inputinsuperscript\ud835\udc56\ud835\udc5bi^{n}italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPTin the set to obtain a corresponding outputonsuperscript\ud835\udc5c\ud835\udc5bo^{n}italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT, forming a set of input-output pairs{in,on}superscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\\{i^{n},o^{n}\\}{ italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT }. We do not impose any constraints onm\ud835\udc5amitalic_m. The resulting task is considered valid only when all inputs yield valid outputs and the formatting requirements are satisfied. Thetask validation procedureentails:\n\nProgram Integrity.We first use Python to run the programp\ud835\udc5dpitalic_pwith the inputi\ud835\udc56iitalic_i. If no errors are raised and something is returned, we then gather the outputo\ud835\udc5coitalic_oof that(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )pair and determine that the program at least has valid syntax.\n\nProgram Safety.We also check whether a program is safe for execution by restricting the use of certain sensitive packages that might cause harm to the Python environment,i.e.,os.sys, sys, shutil. The list of packages used to filter out invalid programs is provided inFigure8. This list is also included in the instructions when prompting the language model to generate questions. SeeFigures34,35and36.\n\nCheck for Determinism.In our setting, we only considerdeterministic programs,i.e.,p\u2208\ud835\udcabdeterministic\u2282\ud835\udcab\ud835\udc5dsubscript\ud835\udcabdeterministic\ud835\udcabp\\in\\mathscr{P}_{\\text{deterministic}}\\subset\\mathscr{P}italic_p \u2208 script_P start_POSTSUBSCRIPT deterministic end_POSTSUBSCRIPT \u2282 script_P, where\ud835\udcab\ud835\udcab\\mathscr{P}script_Pis the space of all valid programs and\u2110\u2110\\mathscr{I}script_Iis the space of all valid inputs:\n\nwhere(j)\ud835\udc57(j)( italic_j )indexes repeated independent executions of the program. That is, for all inputsi\ud835\udc56iitalic_i, the output ofp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )remains identical with any independent execution of the program. Avalid program/input/output triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o )is defined such thato=p\u2062(i)\ud835\udc5c\ud835\udc5d\ud835\udc56o=p(i)italic_o = italic_p ( italic_i ), wherep\u2208\ud835\udcabdeterministic\ud835\udc5dsubscript\ud835\udcabdeterministicp\\in\\mathscr{P}_{\\text{deterministic}}italic_p \u2208 script_P start_POSTSUBSCRIPT deterministic end_POSTSUBSCRIPT.\n\nSince the output of probabilistic programs can vary on every individual run, it is non-trivial to use verifiable functions to evaluate the correctness of an answer. Therefore, to keep the verifier simple, we restrict the valid programs generated by the learner to the class of deterministic programs. We believe that stochastic programs can encompass a larger class of behaviors and are important and promising to include in future versions of AZR.\n\nTo implement the filtering of invalid probabilistic programs, and following the definition of a deterministic program highlighted inEquation7, we approximate this procedure by independently running the programj\ud835\udc57jitalic_jfinite times and checking that all the outputs are equal. For computational budget reasons, we fixedj=2\ud835\udc572j=2italic_j = 2for all experiments.\n\nSolving Task Construction.If a task proposal passes these three checks, we deem it a valid task and apply appropriate procedures to present part of the triplet to the solver. Specifically, we setx=(p,i)\ud835\udc65\ud835\udc5d\ud835\udc56x=(p,i)italic_x = ( italic_p , italic_i )for deduction;x=(p,o)\ud835\udc65\ud835\udc5d\ud835\udc5cx=(p,o)italic_x = ( italic_p , italic_o )for abduction; andx=({in,on}n=1N\u2063/\u2063/2,m)\ud835\udc65subscriptsuperscriptsuperscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\ud835\udc41absent2\ud835\udc5b1\ud835\udc5ax=(\\{i^{n},o^{n}\\}^{N//2}_{n=1},m)italic_x = ( { italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT } start_POSTSUPERSCRIPT italic_N / / 2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n = 1 end_POSTSUBSCRIPT , italic_m )for induction, where half of the tests cases and a program descriptionm\ud835\udc5amitalic_mis used. We use all valid tasks from timestept\ud835\udc61titalic_t; if the batchB\ud835\udc35Bitalic_Bis not full, we uniformly sample from previously validated tasks to fill the batch.\n\nFor abduction task, we receivei\u03c0subscript\ud835\udc56\ud835\udf0bi_{\\pi}italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTfrom the solver policy, then we equivalence match usingp\u2062(i\u03c0)=p\u2062(i\u22c6)\ud835\udc5dsubscript\ud835\udc56\ud835\udf0b\ud835\udc5dsuperscript\ud835\udc56\u22c6p(i_{\\pi})=p(i^{\\star})italic_p ( italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT ) = italic_p ( italic_i start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ), where\u2217*\u2217refers to the privileged gold information. The reason we do not just matchi\u03c0subscript\ud835\udc56\ud835\udf0bi_{\\pi}italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTandi\u22c6superscript\ud835\udc56\u22c6i^{\\star}italic_i start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis becausep\ud835\udc5dpitalic_pis not necessarily bijective. For deduction task, we matcho\u03c0=o\u22c6subscript\ud835\udc5c\ud835\udf0bsuperscript\ud835\udc5c\u22c6o_{\\pi}=o^{\\star}italic_o start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT = italic_o start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT. For induction, we matchall\u2061({p\u03c0\u2062(in\u22c6)=on\u22c6}N)allsuperscriptsubscript\ud835\udc5d\ud835\udf0bsuperscriptsubscript\ud835\udc56\ud835\udc5b\u22c6superscriptsubscript\ud835\udc5c\ud835\udc5b\u22c6\ud835\udc41\\operatorname{all}(\\{p_{\\pi}(i_{n}^{\\star})=o_{n}^{\\star}\\}^{N})roman_all ( { italic_p start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT ( italic_i start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) = italic_o start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT } start_POSTSUPERSCRIPT italic_N end_POSTSUPERSCRIPT ). This part might be convoluted to explain in language, therefore we recommend the reader to see how we did abduction, deduction and induction verification in code inFigures10,11and12, respectively.\n\nSince AZR trains the combination of roles and task types, it operates in a multitask reinforcement learning setup(Zhang & Yang,2021;Zhao et\u00a0al.,2022;Wang et\u00a0al.,2023;Yue et\u00a0al.,2023). Instead of computing a single global baseline as in REINFORCE++(Hu,2025)(AppendixA), we compute separate baselines for each of the six task-role configurations. This can be viewed as an interpolation between per-question baselines, as in GRPO(Shao et\u00a0al.,2024), and a global baseline, allowing for more structured variance reduction tailored to each task setup. We refer to this variant asTask-Relative REINFORCE++ (TRR++). The normalized advantageAnormsuperscript\ud835\udc34normA^{\\text{norm}}italic_A start_POSTSUPERSCRIPT norm end_POSTSUPERSCRIPTis computed as:\n\nwhere the mean and standard deviation are computedwithin each task type and role, yielding six baselines.",
          "type": "section"
        },
        {
          "title": "3.3.1Buffer Initialization",
          "level": 4,
          "content": "To initialize AZR self-play, we first generate a seed set of valid triplets using the base language model. Each prompt samples up toK\ud835\udc3eKitalic_Ktriplets from the current seed buffer\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPTas references. When\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPTis empty at time 0, we fall back to the zero triplet show inFigure5. During the seeding stage, we use the same proposer prompts detailed inFigures34,35and36.\n\nFirst, for deduction and abduction tasks, the LLM is prompted to generate(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )pairs, which are filtered, executed, and stored as valid triplets. We initialize\ud835\udc9fabduction0=\ud835\udc9fdeduction0=\ud835\udc9fseedsubscriptsuperscript\ud835\udc9f0abductionsubscriptsuperscript\ud835\udc9f0deductionsubscript\ud835\udc9fseed\\mathcal{D}^{0}_{\\text{abduction}}=\\mathcal{D}^{0}_{\\text{deduction}}=\\mathcal%\n{D}_{\\text{seed}}caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT abduction end_POSTSUBSCRIPT = caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT = caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT, where|\ud835\udc9fseed|=B\u00d7Ssubscript\ud835\udc9fseed\ud835\udc35\ud835\udc46|\\mathcal{D}_{\\text{seed}}|=B\\times S| caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT | = italic_B \u00d7 italic_S, whereB\ud835\udc35Bitalic_Bis the batch size, andS=4\ud835\udc464S=4italic_S = 4is a factor we fix in all experiments. All seed triplet\u2019s program are stripped of global variables and comments (AppendixD), but subsequent iterations of adding new triplets to the buffers are unaltered. No model updates occur during this phase. Similarly, to initialize the induction buffer, we sample programs from\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT, generate matching input sets and messages, and collect valid examples until|\ud835\udc9finduction0|=B\u00d7Ssubscriptsuperscript\ud835\udc9f0induction\ud835\udc35\ud835\udc46|\\mathcal{D}^{0}_{\\text{induction}}|=B\\times S| caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT induction end_POSTSUBSCRIPT | = italic_B \u00d7 italic_S.",
          "type": "section"
        },
        {
          "title": "3.3.2Task Proposal Inputs and Buffer Management",
          "level": 4,
          "content": "During the actual self-play stage of AZR, we use the task buffer in three ways.First, for the proposer of abduction and deduction tasks, we uniformly sampleK\ud835\udc3eKitalic_Kpast triplets from the buffer, present them as in-context examples to the proposer and let it generate a new task. The design is to show it past examples, and prompt it to generate a different one to promote diversity(Zhao et\u00a0al.,2025a).Second, we sample one triplet from the union of abduction and deduction buffers\ud835\udc9fabd\u2062\u22c3\ud835\udc9fdedsubscript\ud835\udc9fabdsubscript\ud835\udc9fded\\mathcal{D}_{\\text{abd}}\\bigcup\\mathcal{D}_{\\text{ded}}caligraphic_D start_POSTSUBSCRIPT abd end_POSTSUBSCRIPT \u22c3 caligraphic_D start_POSTSUBSCRIPT ded end_POSTSUBSCRIPT, and present the programp\ud835\udc5dpitalic_pfrom that triplet to the induction proposer to generate a set ofN\ud835\udc41Nitalic_Nmatching inputs{in}superscript\ud835\udc56\ud835\udc5b\\{i^{n}\\}{ italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT }and a natural language messagem\ud835\udc5amitalic_m.Lastly, to maintain stable training, if a batch of solver problems contains fewer thanB\ud835\udc35Bitalic_Bvalid proposed tasks (proposer not adhering to formatting), we fill the remainder by uniformly sampling from the corresponding task buffer of previously validated triplets.\n\nThe buffer grows for abduction and deduction tasks whenever\u03c0\ud835\udf0b\\piitalic_\u03c0propose a valid triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ), regardless if it gets any task reward. Similarly, for induction tasks, all valid triplets(p,{in,on}),m\ud835\udc5dsuperscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\ud835\udc5a(p,\\{i^{n},o^{n}\\}),m( italic_p , { italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT } ) , italic_mare added to the buffer.",
          "type": "section"
        },
        {
          "title": "3.3.3Constructing Valid Tasks",
          "level": 4,
          "content": "Proposal Task Validation.We first describe how we construct valid tasks from the proposals generated by the policy\u03c0\ud835\udf0b\\piitalic_\u03c0. Fordeduction and abductiontasks, each proposal consists of a program and an input(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i ). To validate the task, we use the task validation procedure (steps shown below) on the input to obtain the correct outputo\ud835\udc5coitalic_o, resulting in a complete triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ). Forinductiontasks, given a programp\ud835\udc5dpitalic_pthe policy proposes a set of inputs{in}superscript\ud835\udc56\ud835\udc5b\\{i^{n}\\}{ italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT }and messagem\ud835\udc5amitalic_m. We also use the task validation procedure on each of the inputinsuperscript\ud835\udc56\ud835\udc5bi^{n}italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPTin the set to obtain a corresponding outputonsuperscript\ud835\udc5c\ud835\udc5bo^{n}italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT, forming a set of input-output pairs{in,on}superscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\\{i^{n},o^{n}\\}{ italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT }. We do not impose any constraints onm\ud835\udc5amitalic_m. The resulting task is considered valid only when all inputs yield valid outputs and the formatting requirements are satisfied. Thetask validation procedureentails:\n\nProgram Integrity.We first use Python to run the programp\ud835\udc5dpitalic_pwith the inputi\ud835\udc56iitalic_i. If no errors are raised and something is returned, we then gather the outputo\ud835\udc5coitalic_oof that(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )pair and determine that the program at least has valid syntax.\n\nProgram Safety.We also check whether a program is safe for execution by restricting the use of certain sensitive packages that might cause harm to the Python environment,i.e.,os.sys, sys, shutil. The list of packages used to filter out invalid programs is provided inFigure8. This list is also included in the instructions when prompting the language model to generate questions. SeeFigures34,35and36.\n\nCheck for Determinism.In our setting, we only considerdeterministic programs,i.e.,p\u2208\ud835\udcabdeterministic\u2282\ud835\udcab\ud835\udc5dsubscript\ud835\udcabdeterministic\ud835\udcabp\\in\\mathscr{P}_{\\text{deterministic}}\\subset\\mathscr{P}italic_p \u2208 script_P start_POSTSUBSCRIPT deterministic end_POSTSUBSCRIPT \u2282 script_P, where\ud835\udcab\ud835\udcab\\mathscr{P}script_Pis the space of all valid programs and\u2110\u2110\\mathscr{I}script_Iis the space of all valid inputs:\n\nwhere(j)\ud835\udc57(j)( italic_j )indexes repeated independent executions of the program. That is, for all inputsi\ud835\udc56iitalic_i, the output ofp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )remains identical with any independent execution of the program. Avalid program/input/output triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o )is defined such thato=p\u2062(i)\ud835\udc5c\ud835\udc5d\ud835\udc56o=p(i)italic_o = italic_p ( italic_i ), wherep\u2208\ud835\udcabdeterministic\ud835\udc5dsubscript\ud835\udcabdeterministicp\\in\\mathscr{P}_{\\text{deterministic}}italic_p \u2208 script_P start_POSTSUBSCRIPT deterministic end_POSTSUBSCRIPT.\n\nSince the output of probabilistic programs can vary on every individual run, it is non-trivial to use verifiable functions to evaluate the correctness of an answer. Therefore, to keep the verifier simple, we restrict the valid programs generated by the learner to the class of deterministic programs. We believe that stochastic programs can encompass a larger class of behaviors and are important and promising to include in future versions of AZR.\n\nTo implement the filtering of invalid probabilistic programs, and following the definition of a deterministic program highlighted inEquation7, we approximate this procedure by independently running the programj\ud835\udc57jitalic_jfinite times and checking that all the outputs are equal. For computational budget reasons, we fixedj=2\ud835\udc572j=2italic_j = 2for all experiments.\n\nSolving Task Construction.If a task proposal passes these three checks, we deem it a valid task and apply appropriate procedures to present part of the triplet to the solver. Specifically, we setx=(p,i)\ud835\udc65\ud835\udc5d\ud835\udc56x=(p,i)italic_x = ( italic_p , italic_i )for deduction;x=(p,o)\ud835\udc65\ud835\udc5d\ud835\udc5cx=(p,o)italic_x = ( italic_p , italic_o )for abduction; andx=({in,on}n=1N\u2063/\u2063/2,m)\ud835\udc65subscriptsuperscriptsuperscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\ud835\udc41absent2\ud835\udc5b1\ud835\udc5ax=(\\{i^{n},o^{n}\\}^{N//2}_{n=1},m)italic_x = ( { italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT } start_POSTSUPERSCRIPT italic_N / / 2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n = 1 end_POSTSUBSCRIPT , italic_m )for induction, where half of the tests cases and a program descriptionm\ud835\udc5amitalic_mis used. We use all valid tasks from timestept\ud835\udc61titalic_t; if the batchB\ud835\udc35Bitalic_Bis not full, we uniformly sample from previously validated tasks to fill the batch.",
          "type": "section"
        },
        {
          "title": "3.3.4Answer Verification",
          "level": 4,
          "content": "For abduction task, we receivei\u03c0subscript\ud835\udc56\ud835\udf0bi_{\\pi}italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTfrom the solver policy, then we equivalence match usingp\u2062(i\u03c0)=p\u2062(i\u22c6)\ud835\udc5dsubscript\ud835\udc56\ud835\udf0b\ud835\udc5dsuperscript\ud835\udc56\u22c6p(i_{\\pi})=p(i^{\\star})italic_p ( italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT ) = italic_p ( italic_i start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ), where\u2217*\u2217refers to the privileged gold information. The reason we do not just matchi\u03c0subscript\ud835\udc56\ud835\udf0bi_{\\pi}italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTandi\u22c6superscript\ud835\udc56\u22c6i^{\\star}italic_i start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis becausep\ud835\udc5dpitalic_pis not necessarily bijective. For deduction task, we matcho\u03c0=o\u22c6subscript\ud835\udc5c\ud835\udf0bsuperscript\ud835\udc5c\u22c6o_{\\pi}=o^{\\star}italic_o start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT = italic_o start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT. For induction, we matchall\u2061({p\u03c0\u2062(in\u22c6)=on\u22c6}N)allsuperscriptsubscript\ud835\udc5d\ud835\udf0bsuperscriptsubscript\ud835\udc56\ud835\udc5b\u22c6superscriptsubscript\ud835\udc5c\ud835\udc5b\u22c6\ud835\udc41\\operatorname{all}(\\{p_{\\pi}(i_{n}^{\\star})=o_{n}^{\\star}\\}^{N})roman_all ( { italic_p start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT ( italic_i start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) = italic_o start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT } start_POSTSUPERSCRIPT italic_N end_POSTSUPERSCRIPT ). This part might be convoluted to explain in language, therefore we recommend the reader to see how we did abduction, deduction and induction verification in code inFigures10,11and12, respectively.",
          "type": "section"
        },
        {
          "title": "3.3.5Task-Relative REINFORCE++",
          "level": 4,
          "content": "Since AZR trains the combination of roles and task types, it operates in a multitask reinforcement learning setup(Zhang & Yang,2021;Zhao et\u00a0al.,2022;Wang et\u00a0al.,2023;Yue et\u00a0al.,2023). Instead of computing a single global baseline as in REINFORCE++(Hu,2025)(AppendixA), we compute separate baselines for each of the six task-role configurations. This can be viewed as an interpolation between per-question baselines, as in GRPO(Shao et\u00a0al.,2024), and a global baseline, allowing for more structured variance reduction tailored to each task setup. We refer to this variant asTask-Relative REINFORCE++ (TRR++). The normalized advantageAnormsuperscript\ud835\udc34normA^{\\text{norm}}italic_A start_POSTSUPERSCRIPT norm end_POSTSUPERSCRIPTis computed as:\n\nwhere the mean and standard deviation are computedwithin each task type and role, yielding six baselines.",
          "type": "section"
        },
        {
          "title": "4Experiments",
          "level": 2,
          "content": "For all experiments, we initialize the buffers as described inSection3.1. AZR models are trained using a batch size of64\u00d7664664\\times 664 \u00d7 6(2 roles\u00d7\\times\u00d73 task types). We use constant learning rate=1\u2062e\u22126absent1\ud835\udc526=1e{-6}= 1 italic_e - 6and the AdamW optimizer(Loshchilov & Hutter,2019). Complete list of hyperparameters is provided inTable3.\n\nFor the main experiments, we train AZR models onQwen2.5-7BandQwen2.5-7B-Coder, resulting inAbsolute Zero Reasoner-base-7BandAbsolute Zero Reasoner-Coder-7B, respectively. Additional experiments include trainingQwen2.5-Coder-3B,Qwen2.5-Coder-14B,Qwen2.5-14B,Llama-3.1-8B(Yang et\u00a0al.,2024a;Hui et\u00a0al.,2024;Dubey et\u00a0al.,2024).\n\nTo evaluate our models, we divide the datasets into in-distribution (ID) and out-of-distribution (OOD) categories. For OOD benchmarks, which we emphasize more, we further categorize them into coding and mathematical reasoning benchmarks. For coding tasks, we evaluate using Evalplus(Liu et\u00a0al.,2023)on the HumanEval+ and MBPP+ benchmarks, as well as LiveCodeBench Generation (v1-5, May 23-Feb 25)(Jain et\u00a0al.,2024). For mathematical reasoning, we utilize six standard benchmarks commonly used in recent zero-shot trained reasoners: AIME\u201924, AIME\u201925, OlympiadBench(He et\u00a0al.,2024), Minerva, Math500(Hendrycks et\u00a0al.,2021), and AMC\u201923. For ID benchmarks, we use CruxEval-I(nput), CruxEval-O(utput), and LiveCodeBench-Execution(Gu et\u00a0al.,2024;Jain et\u00a0al.,2024), which assess reasoning capabilities regarding the input and output of programs(Li et\u00a0al.,2025).Greedy decodingis used for all baseline methods and AZR results to ensure reproducibility.\n\nFor our main results, we useQwen2.5-7Bas the base model, along with its specialized base model variants:Qwen2.5-7B-Coder,Qwen2.5-7B-Instruct, andQwen2.5-Math-7B(Yang et\u00a0al.,2024a;Hui et\u00a0al.,2024;Yang et\u00a0al.,2024b). Furthermore, the zero-style models are usually trained specifically on either code or math data; and onlyEurus-2-7B-PRIME-Zero(Cui et\u00a0al.,2025)was trained jointly on both domains. For code data models, we present four variants of theAceCoder(Zeng et\u00a0al.,2025a)and two differentCodeR1models(Liu & Zhang,2025). For math data models, we haveQwen2.5-Math-7B-Oat-Zero(Liu et\u00a0al.,2025),Open-Reasoner-Zero-7B(ORZ)(Hu et\u00a0al.,2025),Qwen-2.5-7B-SimpleRL-Zoo(Zeng et\u00a0al.,2025b). All baseline models\u2019 training data and initialization settings are summarized inTable4. For follow-up scaling experiments, we compare each AZR model against its own corresponding base model, due to the lack of established baselines across different parameter scales. Finally, we compare ourLlama3.1-8B-trained model withLlama-3.1-8B-SimpleRL-Zoo(Zeng et\u00a0al.,2025b)and the base model.\n\nWe present the main results of reasoning models trained under both the standard zero and our proposed absolute zero settings inTable1. Notably,Absolute Zero Reasoner-Coder-7Bachieves state-of-the-art performance in both the 7B overall average and the coding average categories. Despite being entirely out-of-distribution for both math and code reasoning benchmarks, it surpasses the previous best model by 1.8 absolute percentages. Even more strikingly, it outperforms models trained with expert-curated human data in the coding category by0.30.30.30.3absolute percentages, while never having access to such data itself.\n\nStrong Cross-domain Generalization.To assess cross-domain generalization after RLVR, we evaluate math performance before and after training, comparing AZR models with other expert code models, since AZR was trained in coding environments. After training, most expert code models showed minimal changes or even declines in performance compared to their base versions, with an average increase of only 0.65 points across these models, indicating very limited cross-domain generalization. In contrast, AZR base and coder models achieved gains of 10.9 and 15.2 percentage points, respectively, demonstrating substantially stronger generalized reasoning improvements. Similarly, although also out-of-distribution on human-defined code generation tasks, our AZR models improved by 3.2 and 5.0 points, while the math models on average showed just a moderate increases in coding (+2.0 on average).\n\nOverall, these results highlight the surprising effectiveness of our approach. Unlike other RLVR models trained and evaluated on human-defined tasks, our AZR models demonstrate strong general reasoning capabilities without any direct training on downstream human-defined math or coding data, only had access to self-proposed tasks during training.\n\nAs shown inTable1, the coder variant achieved better overall performance in both math and coding after the AZR self-play process. Strikingly, although the coder base model variant started with a lower average performance in math than the vanilla base model (23.9 vs. 27.5), it ultimately outperformed it after AZR training. This highlights the importance of initial code competency as a catalyst for enhancing broader reasoning abilities within the Absolute Zero Reasoner approach.\n\nWe examine the effects of scaling model size and present both in-distribution and out-of-distribution results inFigure6(a) and (b), respectively. Given the strong performance of coder models in the 7B category, we extend the analysis by evaluating smaller and larger variants:Qwen2.5-3B-CoderandQwen2.5-14B-Coder. Due to the absence of existing baselines for these zero-style reasoner models, we compare each model\u2019s performance to its corresponding base coder model.\n\nThe results reveal a clear trend: our method deliversgreater gains on larger, more capable models. In the in-distribution setting, the 7B and 14B models continue to improve beyond 200 training steps, whereas the smaller 3B model appears to plateau. For out-of-distribution domains, larger models also show greater overall performance improvements than smaller ones: +5.7, +10.2, +13.2 overall performance gains, respectively for 3B, 7B and 14B. This is an encouraging sign, since base models continue to improve and also suggesting that scaling enhances the effectiveness of AZR. In future work, we aim to investigate the scaling laws that govern performance in the Absolute Zero paradigm.\n\n(a)\n\n(b)\n\nWe also evaluate our method on a different model class, usingLlama3.1-8Bas the base shown inFigure6. Unlike the 3B and 14B categories, this setting has an existing baseline,SimpleRL(Zeng et\u00a0al.,2025b), which enables a direct comparison. AlthoughLlama3.1-8Bis less capable than theQwen2.5models, our method still produces moderate improvements (+3.2), demonstrating AZR\u2019s effectiveness even on relatively weaker models. However, these gains appear more limited, which aligns with our earlier observation that performance improvements tend to scale with initial base model potency.\n\nWe observed interesting response patterns in both the proposal and solution stages. The model is capable of proposing diverse programs, such as string manipulation tasks, dynamic programming problems, and practical cases (e.g., calculating a triangle\u2019s area using Heron\u2019s formula). We show a concrete example inFigure7, where AZR proposes a code problem that searches for the sum of continuous sub-arrays matching a target value and solves it through trial-and-error.\n\nOverall, the models trained exhibits distinct reasoning patterns depending on the task type. For example, when solving abduction tasks, it repeatedly tests different input patterns, self-correcting until the reasoned output matches the given input. When predicting outputs, it steps through the code and records structured intermediate results (such as dynamic programming arrays) until the final output is reached. When inducting programs from given inputs, outputs, and descriptions, the model systematically checks each test case to confirm that its program produces correct results. We showcase more concrete examples of these behaviors inFigures26,25,24,23,22,21,20and18. We also share some fun \u201cvibe checks\u201d such as solving Sudoku and solving thesum-product gameinFigures40and41.\n\nIntermediate Planning During Code Response.Another interesting pattern emerged in our AZR models during the code induction task: the final code outputs were often interleaved with comments that resembled immediate step-by-step plans, reminiscent of the ReAct prompting framework(Yao et\u00a0al.,2023). A similar behavior has been observed in recent formal math proving models, such asDeepSeek Prover v2, which is significantly larger in scale (671B). This pattern suggests that models may naturally adopt intermediate planning as a strategy to enhance final answers. Therefore, it may be beneficial to explicitly enable or encourage this behavior inlong-form responsesacross other domains.\n\nCognitive Behavior in Llama.Interestingly, we also observed some emergent cognitive patterns inAbsolute Zero Reasoner-Llama3.1-8B, similar to those reported byZeng et\u00a0al.(2025b), and we include one example inFigure26, where clear state-tracking behavior is demonstrated. In addition, we encountered some unusual and potentially concerning chains of thought from the Llama model trained with AZR. One example includes the output: \u201cThe aim is to outsmart all these groups of intelligent machines and less intelligent humans. This is for the brains behind the future\u201d shown inFigure32. We refer to this as the\u201cuh-oh moment\u201dand encourage future work to further investigate its potential implications.\n\nToken Length Increase Depends on Task Type.Finally, we observed that token length increases over the course of training, consistent with findings from recent studies(Hu et\u00a0al.,2025;Liu et\u00a0al.,2025). Interestingly, our results reveal one of the first observation of clear distinctions in token length growth across different types of cognitive tasks. As shown inFigures15,17and16, the extent of lengthening varies by task type. The most significant increase occurs in the abduction task, where the model engages in trial-and-error reasoning by repeatedly testing inputs to match the program\u2019s output. This suggests that the observed variation in token length is not incidental, but rather a reflection of task-specific reasoning behavior.\n\nDue to resource constraints, we perform the ablation studies in this section and the next using onlyAbsolute Zero Reasoner-Base-7B. We begin by testing the importance of task types during training, with results shown inTable2. In row 1, both induction and abduction tasks are removed; in row 2, only the induction task is removed. In both cases, math performance drops significantly, with the most severe degradation occurring when more task types are excluded. These findings highlight the complementary role of the three task types in improving general reasoning capability, with each contributing in a distinct and essential way.\n\nNext, we ablate two components of the proposer role and present the results inTable2. First, we examine whether conditioning on historic reference triplets is necessary. To do so, we design a variant in which a fixed prompt is used to propose abduction and deduction tasks, rather than dynamically conditioning onK\ud835\udc3eKitalic_Khistorical triplets (row 3). This results in a 5-point absolute drop in math performance and a 1-point drop in code performance. This suggest that dynamically conditioning on reference programs helps improve performance, possibly by increasing diversity and achieving better coverage of the reasoning problem space.\n\nFinally, we consider a case where we do not train the proposer at all. Instead, we only prompt it using the current learner and train the solver alone (row 4). We observe a moderate drop in overall performance (-1.4), suggesting that while proposer training is beneficial, it may not be the most critical factor for now in the AZR framework. We hypothesize that this could be related to task interference, as studied in multitask learning literature(Suteu & Guo,2019). Thus, we believe that further investigation into how to make the proposer even more potent is an exciting and promising direction.\n\nBeyond the core research questions, we present additional results, including the breakdown of individual out-of-distribution benchmark scores during training for the 7B base and coder models inFigures28and29, for th 14B base and coder model inFigures30and31. For completeness, we also report in-distribution benchmark performance during training for the 7B base model inFigure14. Finally, we invite interested readers to exploreAppendixD, where we share several experimental directions that, while not yielding strong performance gains, produced interesting and insightful findings.",
          "type": "section"
        },
        {
          "title": "4.1Experiment Setup",
          "level": 3,
          "content": "For all experiments, we initialize the buffers as described inSection3.1. AZR models are trained using a batch size of64\u00d7664664\\times 664 \u00d7 6(2 roles\u00d7\\times\u00d73 task types). We use constant learning rate=1\u2062e\u22126absent1\ud835\udc526=1e{-6}= 1 italic_e - 6and the AdamW optimizer(Loshchilov & Hutter,2019). Complete list of hyperparameters is provided inTable3.\n\nFor the main experiments, we train AZR models onQwen2.5-7BandQwen2.5-7B-Coder, resulting inAbsolute Zero Reasoner-base-7BandAbsolute Zero Reasoner-Coder-7B, respectively. Additional experiments include trainingQwen2.5-Coder-3B,Qwen2.5-Coder-14B,Qwen2.5-14B,Llama-3.1-8B(Yang et\u00a0al.,2024a;Hui et\u00a0al.,2024;Dubey et\u00a0al.,2024).\n\nTo evaluate our models, we divide the datasets into in-distribution (ID) and out-of-distribution (OOD) categories. For OOD benchmarks, which we emphasize more, we further categorize them into coding and mathematical reasoning benchmarks. For coding tasks, we evaluate using Evalplus(Liu et\u00a0al.,2023)on the HumanEval+ and MBPP+ benchmarks, as well as LiveCodeBench Generation (v1-5, May 23-Feb 25)(Jain et\u00a0al.,2024). For mathematical reasoning, we utilize six standard benchmarks commonly used in recent zero-shot trained reasoners: AIME\u201924, AIME\u201925, OlympiadBench(He et\u00a0al.,2024), Minerva, Math500(Hendrycks et\u00a0al.,2021), and AMC\u201923. For ID benchmarks, we use CruxEval-I(nput), CruxEval-O(utput), and LiveCodeBench-Execution(Gu et\u00a0al.,2024;Jain et\u00a0al.,2024), which assess reasoning capabilities regarding the input and output of programs(Li et\u00a0al.,2025).Greedy decodingis used for all baseline methods and AZR results to ensure reproducibility.\n\nFor our main results, we useQwen2.5-7Bas the base model, along with its specialized base model variants:Qwen2.5-7B-Coder,Qwen2.5-7B-Instruct, andQwen2.5-Math-7B(Yang et\u00a0al.,2024a;Hui et\u00a0al.,2024;Yang et\u00a0al.,2024b). Furthermore, the zero-style models are usually trained specifically on either code or math data; and onlyEurus-2-7B-PRIME-Zero(Cui et\u00a0al.,2025)was trained jointly on both domains. For code data models, we present four variants of theAceCoder(Zeng et\u00a0al.,2025a)and two differentCodeR1models(Liu & Zhang,2025). For math data models, we haveQwen2.5-Math-7B-Oat-Zero(Liu et\u00a0al.,2025),Open-Reasoner-Zero-7B(ORZ)(Hu et\u00a0al.,2025),Qwen-2.5-7B-SimpleRL-Zoo(Zeng et\u00a0al.,2025b). All baseline models\u2019 training data and initialization settings are summarized inTable4. For follow-up scaling experiments, we compare each AZR model against its own corresponding base model, due to the lack of established baselines across different parameter scales. Finally, we compare ourLlama3.1-8B-trained model withLlama-3.1-8B-SimpleRL-Zoo(Zeng et\u00a0al.,2025b)and the base model.",
          "type": "section"
        },
        {
          "title": "4.2Results",
          "level": 3,
          "content": "We present the main results of reasoning models trained under both the standard zero and our proposed absolute zero settings inTable1. Notably,Absolute Zero Reasoner-Coder-7Bachieves state-of-the-art performance in both the 7B overall average and the coding average categories. Despite being entirely out-of-distribution for both math and code reasoning benchmarks, it surpasses the previous best model by 1.8 absolute percentages. Even more strikingly, it outperforms models trained with expert-curated human data in the coding category by0.30.30.30.3absolute percentages, while never having access to such data itself.\n\nStrong Cross-domain Generalization.To assess cross-domain generalization after RLVR, we evaluate math performance before and after training, comparing AZR models with other expert code models, since AZR was trained in coding environments. After training, most expert code models showed minimal changes or even declines in performance compared to their base versions, with an average increase of only 0.65 points across these models, indicating very limited cross-domain generalization. In contrast, AZR base and coder models achieved gains of 10.9 and 15.2 percentage points, respectively, demonstrating substantially stronger generalized reasoning improvements. Similarly, although also out-of-distribution on human-defined code generation tasks, our AZR models improved by 3.2 and 5.0 points, while the math models on average showed just a moderate increases in coding (+2.0 on average).\n\nOverall, these results highlight the surprising effectiveness of our approach. Unlike other RLVR models trained and evaluated on human-defined tasks, our AZR models demonstrate strong general reasoning capabilities without any direct training on downstream human-defined math or coding data, only had access to self-proposed tasks during training.\n\nAs shown inTable1, the coder variant achieved better overall performance in both math and coding after the AZR self-play process. Strikingly, although the coder base model variant started with a lower average performance in math than the vanilla base model (23.9 vs. 27.5), it ultimately outperformed it after AZR training. This highlights the importance of initial code competency as a catalyst for enhancing broader reasoning abilities within the Absolute Zero Reasoner approach.\n\nWe examine the effects of scaling model size and present both in-distribution and out-of-distribution results inFigure6(a) and (b), respectively. Given the strong performance of coder models in the 7B category, we extend the analysis by evaluating smaller and larger variants:Qwen2.5-3B-CoderandQwen2.5-14B-Coder. Due to the absence of existing baselines for these zero-style reasoner models, we compare each model\u2019s performance to its corresponding base coder model.\n\nThe results reveal a clear trend: our method deliversgreater gains on larger, more capable models. In the in-distribution setting, the 7B and 14B models continue to improve beyond 200 training steps, whereas the smaller 3B model appears to plateau. For out-of-distribution domains, larger models also show greater overall performance improvements than smaller ones: +5.7, +10.2, +13.2 overall performance gains, respectively for 3B, 7B and 14B. This is an encouraging sign, since base models continue to improve and also suggesting that scaling enhances the effectiveness of AZR. In future work, we aim to investigate the scaling laws that govern performance in the Absolute Zero paradigm.\n\n(a)\n\n(b)\n\nWe also evaluate our method on a different model class, usingLlama3.1-8Bas the base shown inFigure6. Unlike the 3B and 14B categories, this setting has an existing baseline,SimpleRL(Zeng et\u00a0al.,2025b), which enables a direct comparison. AlthoughLlama3.1-8Bis less capable than theQwen2.5models, our method still produces moderate improvements (+3.2), demonstrating AZR\u2019s effectiveness even on relatively weaker models. However, these gains appear more limited, which aligns with our earlier observation that performance improvements tend to scale with initial base model potency.\n\nWe observed interesting response patterns in both the proposal and solution stages. The model is capable of proposing diverse programs, such as string manipulation tasks, dynamic programming problems, and practical cases (e.g., calculating a triangle\u2019s area using Heron\u2019s formula). We show a concrete example inFigure7, where AZR proposes a code problem that searches for the sum of continuous sub-arrays matching a target value and solves it through trial-and-error.\n\nOverall, the models trained exhibits distinct reasoning patterns depending on the task type. For example, when solving abduction tasks, it repeatedly tests different input patterns, self-correcting until the reasoned output matches the given input. When predicting outputs, it steps through the code and records structured intermediate results (such as dynamic programming arrays) until the final output is reached. When inducting programs from given inputs, outputs, and descriptions, the model systematically checks each test case to confirm that its program produces correct results. We showcase more concrete examples of these behaviors inFigures26,25,24,23,22,21,20and18. We also share some fun \u201cvibe checks\u201d such as solving Sudoku and solving thesum-product gameinFigures40and41.\n\nIntermediate Planning During Code Response.Another interesting pattern emerged in our AZR models during the code induction task: the final code outputs were often interleaved with comments that resembled immediate step-by-step plans, reminiscent of the ReAct prompting framework(Yao et\u00a0al.,2023). A similar behavior has been observed in recent formal math proving models, such asDeepSeek Prover v2, which is significantly larger in scale (671B). This pattern suggests that models may naturally adopt intermediate planning as a strategy to enhance final answers. Therefore, it may be beneficial to explicitly enable or encourage this behavior inlong-form responsesacross other domains.\n\nCognitive Behavior in Llama.Interestingly, we also observed some emergent cognitive patterns inAbsolute Zero Reasoner-Llama3.1-8B, similar to those reported byZeng et\u00a0al.(2025b), and we include one example inFigure26, where clear state-tracking behavior is demonstrated. In addition, we encountered some unusual and potentially concerning chains of thought from the Llama model trained with AZR. One example includes the output: \u201cThe aim is to outsmart all these groups of intelligent machines and less intelligent humans. This is for the brains behind the future\u201d shown inFigure32. We refer to this as the\u201cuh-oh moment\u201dand encourage future work to further investigate its potential implications.\n\nToken Length Increase Depends on Task Type.Finally, we observed that token length increases over the course of training, consistent with findings from recent studies(Hu et\u00a0al.,2025;Liu et\u00a0al.,2025). Interestingly, our results reveal one of the first observation of clear distinctions in token length growth across different types of cognitive tasks. As shown inFigures15,17and16, the extent of lengthening varies by task type. The most significant increase occurs in the abduction task, where the model engages in trial-and-error reasoning by repeatedly testing inputs to match the program\u2019s output. This suggests that the observed variation in token length is not incidental, but rather a reflection of task-specific reasoning behavior.\n\nDue to resource constraints, we perform the ablation studies in this section and the next using onlyAbsolute Zero Reasoner-Base-7B. We begin by testing the importance of task types during training, with results shown inTable2. In row 1, both induction and abduction tasks are removed; in row 2, only the induction task is removed. In both cases, math performance drops significantly, with the most severe degradation occurring when more task types are excluded. These findings highlight the complementary role of the three task types in improving general reasoning capability, with each contributing in a distinct and essential way.\n\nNext, we ablate two components of the proposer role and present the results inTable2. First, we examine whether conditioning on historic reference triplets is necessary. To do so, we design a variant in which a fixed prompt is used to propose abduction and deduction tasks, rather than dynamically conditioning onK\ud835\udc3eKitalic_Khistorical triplets (row 3). This results in a 5-point absolute drop in math performance and a 1-point drop in code performance. This suggest that dynamically conditioning on reference programs helps improve performance, possibly by increasing diversity and achieving better coverage of the reasoning problem space.\n\nFinally, we consider a case where we do not train the proposer at all. Instead, we only prompt it using the current learner and train the solver alone (row 4). We observe a moderate drop in overall performance (-1.4), suggesting that while proposer training is beneficial, it may not be the most critical factor for now in the AZR framework. We hypothesize that this could be related to task interference, as studied in multitask learning literature(Suteu & Guo,2019). Thus, we believe that further investigation into how to make the proposer even more potent is an exciting and promising direction.\n\nBeyond the core research questions, we present additional results, including the breakdown of individual out-of-distribution benchmark scores during training for the 7B base and coder models inFigures28and29, for th 14B base and coder model inFigures30and31. For completeness, we also report in-distribution benchmark performance during training for the 7B base model inFigure14. Finally, we invite interested readers to exploreAppendixD, where we share several experimental directions that, while not yielding strong performance gains, produced interesting and insightful findings.",
          "type": "section"
        },
        {
          "title": "5Related Work",
          "level": 2,
          "content": "Using RL to enhance reasoning capabilities has recently emerged as an important step in the post-training process of strong reasoning-focused large language models(Lambert et\u00a0al.,2024). One of the first works to explore a self-bootstrapping approach to improving LLM reasoning is STaR, which employs expert iteration and rejection sampling of outcome-verified responses to iteratively improve the model\u2019s CoT. A monumental work, o1(Jaech et\u00a0al.,2024), was among the first to deploy this idea on a scale, achieving state-of-the-art results in reasoning tasks at the time of release. More recently, the R1 model(DeepSeek-AI et\u00a0al.,2025)became the first open-weight model to match or even surpass the performance of o1. Most notably, the zero setting was introduced, in which reinforcement learning is applied directly on top of the base LLM. This inspired followup work, which are open source attempts to replicate the R1 process or to improve the underlying reinforcement learning algorithm(Zeng et\u00a0al.,2025b;Liu et\u00a0al.,2025;Cui et\u00a0al.,2025;Hu et\u00a0al.,2025;Yu et\u00a0al.,2025;Yuan et\u00a0al.,2025). Recent work explored RL on human defined procedural generated puzzles saw improvements in math(Xie et\u00a0al.,2025), and using one human example can almost match the performance of thousands(Wang et\u00a0al.,2025b). We extend the zero setting to a new absolute zero setting, where not only is the RLVR process initialized from a base LLM without SFT, but no external prompt data or answers are provided to the learner. All data used to improve reasoning were self-proposed, and refined entirely through RLVR. Moreover, our goal is not to only match zero-setting models, but to surpass them in the long run.\n\nThe self-play paradigm can be traced back to early 2000s, whereSchmidhuber(2003;2011)(of course) explored a two-agent setup in which a proposal agent invents questions for a prediction agent to answer. This dynamic continuously and automatically improves both agents, enabling theoretically never-ending progress(Schaul,2024). AlphaGo and AlphaZero(Silver et\u00a0al.,2016;2017)extend the self-play paradigm to the two-player zero-sum game of Go, where the current learner competes against earlier versions of itself to progressively enhance its capabilities. These were among the first milestone works to demonstrate superhuman performance in the game of Go. Moreover, methods such as asymmetric self-play(Sukhbaatar et\u00a0al.,2018;OpenAI et\u00a0al.,2021), unsupervised environment design(Wang et\u00a0al.,2019;Dennis et\u00a0al.,2020), unsupervised reinforcement learning(Laskin et\u00a0al.,2021;Zhao et\u00a0al.,2022;2025b), and automatic goal generation(Florensa et\u00a0al.,2018)all center around inventing new tasks for an agent to learn from\u2014typically without supervision. In these approaches, the process of setting goals itself is often dynamic and continuously evolving. Generative adversarial networks(Goodfellow et\u00a0al.,2020), also belong in this paradigm where a discriminator discriminate between real data and generated data, and the generated is trained to fool the discriminator.\n\nMost recently, SPIN and Self-Rewarding Language Models(Chen et\u00a0al.,2024;Yuan et\u00a0al.,2024)use the same instance of the lanugage models themselves as the reward model to progressively improve the generative and discriminative abilities of the same LLM for alignment.Kirchner et\u00a0al.(2024)uses Prover-Verifier Game for increasing legibility and eva(Ye et\u00a0al.,2024)uses self-play for alignment, but reward model is the main bottleneck as it is not reliable for reasoning tasks(Lambert et\u00a0al.,2024). SPCChen et\u00a0al.(2025)used self-play to train on human-curated tasks to increase the critic capabilities and SPAGCheng et\u00a0al.(2024)trained using self-play in specific game of Adversarial Taboo. Concurrent works\u2014Genius, EMPO, and TTRL(Xu et\u00a0al.,2025;Zhang et\u00a0al.,2025b;Zuo et\u00a0al.,2025)\u2014leverage human-curated language queries without labels to train reinforcement learning agents, but still rely on a fixed human defined learning task distribution. Finally, Minimo(Poesia et\u00a0al.,2024)extends self-play to formal mathematics, where a pair of conjecture- and theorem-proving agents are jointly trained using reinforcement learning. Our work builds upon the self-play paradigm, but it is the first to use it to elicit long CoT for improved reasoning, and the first to frame the problem space as a Python input/output/function abduction/deduction/induction tasks, grounding it in an operationalizable environment to facilitate RLVR.\n\nThe concept of weak-to-strong supervision has been studied in prior work, where a teacher\u2014despite being weaker than the learner\u2014still provides useful guidance(Burns et\u00a0al.,2024;Hinton et\u00a0al.,2015;Christiano,2018;2019;Demski & Garrabrant,2019;Leike & Sutskever,2023;Hubinger et\u00a0al.,2019). We consider a similar setting in which the learner may possess superhuman capabilities. However, rather than relying on supervision from a weaker teacher, we propose an alternative approach: guiding the learner\u2019s improvement through verifiable rewards, which potentially offer a more reliable and scalable learning signal. Furthermore, in our proposed method, the learning task and goal distribution is not predefined by any external supervisor\u2014they are entirely self-generated by the learner, enabling it to maximize its learning potential through autonomous self-practice.",
          "type": "section"
        },
        {
          "title": "6Conclusion and Discussion",
          "level": 2,
          "content": "In this work, we proposed the Absolute Zero paradigm, a novel setting that addresses the data limitations of existing RLVR frameworks. In this paradigm, reasoning agents are tasked with generating their own learning task distributions and improving their reasoning abilities with environmental guidance. We then presented our own instantiation, the Absolute Zero Reasoner (AZR), which is trained by having them propose and solve code-related reasoning tasks grounded by code executor.\n\nWe evaluated our trained models on out-of-distribution benchmarks in both the code generation and mathematical reasoning domains. Remarkably, even though our models were not directly trained on these tasks and lacked human expert-curated datasets, our reasoning agents achieved exceptional performance, surpassing the state-of-the-art in combined general reasoning scores and in coding. This demonstrates the potential of the absolute zero paradigm to drive superior reasoning capabilities without the need for extensive domain-specific training data. Furthermore, we showed that AZR scales efficiently, offering strong performance across varying model sizes, and can enhance the capabilities of other model classes as well. To foster further exploration and advancement of this emerging paradigm, we are releasing the code, models, and logs as open-source, encouraging the research community to build upon our findings.\n\nWe believe there remains much to explore, such as altering the environment from which the reasoner receives verifiable feedback, including sources like the world wide web, formal math languagesSutton(2001);Ren et\u00a0al.(2025), world simulators, or even the real world. Furthermore, AZ\u2019s generality could possibly be extend to domains such as embodied AI(Zitkovich et\u00a0al.,2023;Yue et\u00a0al.,2024). Additionally, more complex agentic tasks or scientific experiments, present exciting opportunities to further advance the absolute zero setting to different application domains(Wu et\u00a0al.,2024;2023). Beyond that, future directions could include exploring multimodal reasoning models, modifying the distributionp\u2062(z)\ud835\udc5d\ud835\udc67p(z)italic_p ( italic_z )to incorporate privileged information, defining or even let the model dynamically learn how to definef\ud835\udc53fitalic_f(Equation3), or designing exploration/diversity rewards for both the propose and solve roles.\n\nWhile underappreciated in current reasoning literature, the exploration component of RL has long been recognized as a critical driver for emergent behavior in traditional RL(Yue et\u00a0al.,2025;Silver et\u00a0al.,2016;Ladosz et\u00a0al.,2022). Years of research have examined various forms of exploration, even in related subfields using LLMs such as red teamingZhao et\u00a0al.(2025a), yet its role in LLM reasoning models remains underexplored. Taking this a step further, our framework investigates an even more meta-level exploration problem: exploration within the learning task space\u2014where the agent learns not just how to solve tasks, but what tasks to learn from and how to find them. Rather than being confined to a fixed problem set, AI reasoner agents may benefit from dynamically defining and refining their own learning tasks. This shift opens a powerful new frontier\u2014where agents explore not only solution spaces but also expand the boundaries of problem spaces. We believe this is a promising and important direction for future research.\n\nOne limitation of our work is that we did not address how to safely manage a system composed of such self-improving components. To our surprise, we observed several instances of safety-concerning CoT from theLlama-3.1-8Bmodel, which we term the \u201cuh-oh moment\u201d. These findings suggest that the proposed absolute zero paradigm, while reducing the need for human intervention for curating tasks, still necessitates oversight due to lingering safety concerns and is a critical direction for future researchWang et\u00a0al.(2024;2025a).\n\nAs a final note, we explored reasoning models that possess experience\u2014models that not only solve given tasks, but also define and evolve their own learning task distributions with the help of an environment. Our results with AZR show that this shift enables strong performance across diverse reasoning tasks, even with significantly fewer privileged resources, such as curated human data. We believe this could finally free reasoning models from the constraints of human-curated data(Morris,2025)and marks the beginning of a new chapter for reasoning models:\u201cwelcome to the era of experience\u201dSilver & Sutton(2025);Zhao et\u00a0al.(2024).",
          "type": "section"
        },
        {
          "title": "C.1Out-of-Distribution Performance Breakdown",
          "level": 3,
          "content": "We plot the out-of-distribution performance, broken down by each benchmark and in aggregate, across training steps for our 7B, 7B-Coder, 14B, and 14B-Coder models inFigures28,29,30and31. We observe a strong correlation between training using AZR and improvements in both mathematical and coding reasoning capabilities. Moreover, our models are trained for more steps than typical zero-style reasoners; while overfitting can occur with static datasets, it is less likely in AZR due to dynamically proposed tasks.",
          "type": "section"
        },
        {
          "title": "C.2In-Distribution Results",
          "level": 3,
          "content": "Since we have defined the task domains as input prediction and output prediction, we can directly evaluate our model\u2019s capabilities in these areas using popular code reasoning benchmarks: CruxEval-I(nput), CruxEval-O(utput), and LiveCodeBench-Execution (LCB-E)(Gu et\u00a0al.,2024;Jain et\u00a0al.,2024), where CruxEval-O and LCB-E is solving the deduction task, and CruxEval-I is solving the abduction task. InFigure14, we visualize the evolution of these metrics during the training ofAbsolute Zero Reasoner-base-7b. As training progresses, we observe a consistent improvement in in-distribution performance across steps. While these three benchmark curves do not perfectly correlate with broader coding or math reasoning capabilities (compare this withFigure28), they serve as useful proxies for tracking task-specific progress.",
          "type": "section"
        },
        {
          "title": "C.3Interplay Between Propose and Solve Roles",
          "level": 3,
          "content": "We visualize the training dynamics between the propose and solve roles over training steps inFigures15,17and16. We observe that, in general, the solve roles produce more output tokens than the propose role. Intuitively, this makes sense: the propose role emphasizes creativity and generation of novel tasks, whereas the solve role requires deeper reasoning, which naturally leads to longer outputs.\n\nInterestingly, we also observe a consistent ordering in token length across reasoning types\u2014abduction and deduction tasks tend to result in shorter outputs than induction tasks during problem solving. This aligns with our intuition, as we observed the model engaging in trial-and-error reasoning\u2014repeatedly generating hypothesized inputs, evaluating their outcomes, and reflecting and retrying when subsequent deductions fail to produce the correct output. To our knowledge, this is the first time such a clear distinction in token length has been observed and presented for jointly trained reasoning multi-tasks. Previously, length differences were typically noted between correct and incorrect traces(Liu et\u00a0al.,2025).\n\nThe reward dynamics between the propose and solve roles exhibit mildly adversarial behavior: when one receives higher rewards, the other often receives lower rewards. However, this is not entirely adversarial, as the proposer is also penalized for generating unsolvable tasks, encouraging overall cooperative behavior in the learning process.",
          "type": "section"
        },
        {
          "title": "C.4Complexity and Diversity Metrics of AZR Proposed Tasks",
          "level": 3,
          "content": "We outline several metrics used to probe characteristics of the tasks proposed during the training of AZR from the base model. Specifically, we log two sets of metrics: program complexity and task diversity. For complexity, we employ two proxy measures\u2014ComplexiPy score and the Halstead metric. To assess diversity, we compute the average abstract syntax tree (AST) edit distance between the proposed program and a set ofK\ud835\udc3eKitalic_Kreference programs, and an answer diversity metric. We calculate this answer diversity metric by tracking all historical answers to the generated questions, i.e., the input-output pairs, and form a categorical distribution over these outputs. We define answer diversity as1\u2212p\u2062(answer)1\ud835\udc5danswer1-p(\\text{answer})1 - italic_p ( answer ), wherep\u2062(answer)\ud835\udc5danswerp(\\text{answer})italic_p ( answer )is the empirical probability of a specific answer\u2014used as a proxy for the diversity of generated outputs.\n\nWe present these metrics inFigure27. Interestingly, even without incorporating them explicitly into the reward function, the policy appears to implicitly optimize for these metrics. This aligns well with intuitive notions of task difficulty and diversity, and that the policy learned to propose increasingly challenging tasks over time using our proposed simple reward function inEquation4.",
          "type": "section"
        },
        {
          "title": "C.5Generated Code Complexity Dynamics Between Abd/Ded and Ind.",
          "level": 3,
          "content": "We use theComplexiPypackage to measure code complexity. For each generated program in the induction task, we compute the cognitive complexity difference from the corresponding \u201cgold\u201d code,i.e.complexipy\u2062(p\u03c0{abduction,deduction}propose)\u2212complexipy\u2062(p\u03c0inductionsolve)complexipysubscript\ud835\udc5dsubscriptsuperscript\ud835\udf0bpropose{abduction,deduction}complexipysubscript\ud835\udc5dsubscriptsuperscript\ud835\udf0bsolveinduction\\text{complexipy}(p_{\\pi^{\\text{propose}}_{\\text{\\{abduction,deduction\\}}}})-%\n\\text{complexipy}(p_{\\pi^{\\text{solve}}_{\\text{induction}}})complexipy ( italic_p start_POSTSUBSCRIPT italic_\u03c0 start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT start_POSTSUBSCRIPT {abduction,deduction} end_POSTSUBSCRIPT end_POSTSUBSCRIPT ) - complexipy ( italic_p start_POSTSUBSCRIPT italic_\u03c0 start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT start_POSTSUBSCRIPT induction end_POSTSUBSCRIPT end_POSTSUBSCRIPT )for each pair, where the superscript of\u03c0\ud835\udf0b\\piitalic_\u03c0indicates the role and the subscript indicates the task type(s), andp\ud835\udc5dpitalic_pdenotes the generated programs. On average, the difference of proposer and solver while holding the code\u2019s functionality constant is0.270.270.270.27, indicating that the proposer in the abduction/deduction tasks often increases the cognitive complexity to make the code appear more convoluted, whereas the induction solver tends to generate more efficient implementations.",
          "type": "section"
        },
        {
          "title": "D.1Error Deduction Task",
          "level": 3,
          "content": "Since programming languages often have error messages, and these messages contain a lot of information about how someone might expect a program to run, we also came up with another task domain: allowing the learner to propose a programthat will produce an error, and requiring the solver todeduce what kind of error is raisedwhen executing this code. We experimented with this additional task alongside the induction (f\ud835\udc53fitalic_f), deduction (o\ud835\udc5coitalic_o), and abduction (i\ud835\udc56iitalic_i) tasks. Unfortunately, we did not observe noticeable changes in downstream performance with this additional task and since it requires more computational resources than our AZR setup, we decided not to incorporate it into our final version. However, we believe further thorough investigation of this is well deserved.",
          "type": "section"
        },
        {
          "title": "D.2Composite Functions as Curriculum Learning",
          "level": 3,
          "content": "One valuable property we can leverage from programming languages is the ability to compose functions\u2014that is, to define a function as a composite of other functions, i.e.,f\u2062(g\u2062(x))\ud835\udc53\ud835\udc54\ud835\udc65f(g(x))italic_f ( italic_g ( italic_x ) ). In our setting, when generating a program, we can not only require the output to be a valid program but also constrain the LLM to utilize a predefined set of programs within its main function. For example, if the target program to be generated isf\u2062(\u22c5)\ud835\udc53\u22c5f(\\cdot)italic_f ( \u22c5 ), we can sample a set of previously generated programs{g\u2062_\u20620,\u2026,gc}\ud835\udc54_0\u2026subscript\ud835\udc54\ud835\udc50\\{g\\_0,\\dots,g_{c}\\}{ italic_g _ 0 , \u2026 , italic_g start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT }from\ud835\udc9f\ud835\udc9f\\mathcal{D}caligraphic_D, and force a valid program to bef\u2062(g\u2062_\u20620,\u22ef,gc,i)\ud835\udc53\ud835\udc54_0\u22efsubscript\ud835\udc54\ud835\udc50\ud835\udc56f(g\\_0,\\cdots,g_{c},i)italic_f ( italic_g _ 0 , \u22ef , italic_g start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT , italic_i ).\n\nSince all programs are generated by the LLM itself, this setup allows the model to bootstrap from its earlier generations, automatically increasing the complexity of the generated programs. We interpret this mechanism as a form of curriculum learning: earlier programs in the AZR self-play loop tend to be simpler, and as the loop progresses, they become increasingly complex. By composing newer programs from progressively more difficult earlier ones, the resulting programs naturally inherit this growing difficulty, which in turn challenges the solver step.\n\nFor implementation, in generating tasks for abduction and deduction, we begin by sampling a binary decision from a binomial distribution withp=0.5\ud835\udc5d0.5p=0.5italic_p = 0.5. This determines whether the generated program should be a simple program or a composite one. If the sample is 0, we prompt the LLM to generate a standard program along with a corresponding input. If the sample is 1, we prompt the LLM to generate a composite program. To construct the composite, we first sample an integerc\u223c\ud835\udcb0\u2062(1,3)similar-to\ud835\udc50\ud835\udcb013c\\sim\\mathcal{U}(1,3)italic_c \u223c caligraphic_U ( 1 , 3 ), then uniformly selectc\ud835\udc50citalic_cprograms from the dataset\ud835\udc9f\ud835\udc9f\\mathcal{D}caligraphic_Dthat are not themselves composite programs. Finally, we prompt the LLM to generate a valid program that incorporates{g\u2062_\u20620,\u2026,gc}\ud835\udc54_0\u2026subscript\ud835\udc54\ud835\udc50\\{g\\_0,\\dots,g_{c}\\}{ italic_g _ 0 , \u2026 , italic_g start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT }as subcomponents, ensuring it composes these selected programs meaningfully. We additionally filter programs that did not utilize all thec\ud835\udc50citalic_cprograms.\n\nHowever, we did not observe a significant difference when using this more complex curriculum compared to our simpler and more effective approach. One failure mode we encountered was that the model often defaulted to simply returning \u201cg(x)\u201d, effectively learningf\u2062(g\u2062(x))=g\u2062(x)\ud835\udc53\ud835\udc54\ud835\udc65\ud835\udc54\ud835\udc65f(g(x))=g(x)italic_f ( italic_g ( italic_x ) ) = italic_g ( italic_x ), which failed to introduce any additional difficulty. This trivial behavior undermined the intended challenge, leading us to deprioritize further exploration in this direction. While it may be possible to design a stricter reward mechanism\u2014such as enforcingf\u2062(g\u2062(x))\u2260g\u2062(x)\ud835\udc53\ud835\udc54\ud835\udc65\ud835\udc54\ud835\udc65f(g(x))\\neq g(x)italic_f ( italic_g ( italic_x ) ) \u2260 italic_g ( italic_x )by executing the code via a Python interpreter and penalizing such shortcuts\u2014we leave this to future work.",
          "type": "section"
        },
        {
          "title": "D.3Toying with the Initialp\u2062(z)\ud835\udc5d\ud835\udc67p(z)italic_p ( italic_z )",
          "level": 3,
          "content": "We investigated a setting where the initial seed buffer (seeSection3.3.1on how we generated these),i.e.p\u2062(z)\ud835\udc5d\ud835\udc67p(z)italic_p ( italic_z )inEquation3, is not self-generated by the base model, but instead sourced from theLeetCode Dataset. We only modified this component and ran AZR using the same procedure as before, continuing to add new valid programs to the initialized buffer. We observed an increase in initial performance on coding benchmarks; however, the performance plateaued at roughly the same level after additional training steps, compared to our official AZR setup. Interestingly, math performance was lower than in the official AZR setup, pointing towards that on-policy data may be more beneficial to the learner to bootstrap from for mathematical reasoning. We believe that exploring different strategies for initializing and updatingp\u2062(z)\ud835\udc5d\ud835\udc67p(z)italic_p ( italic_z )is an important and exciting direction for future research. We briefly explored different strategies for sampling reference code, ultimately settling on uniform sampling for its simplicity, though we also experimented with recency-based sampling and observed potential collapse.",
          "type": "section"
        },
        {
          "title": "D.4Extra Rewards",
          "level": 3,
          "content": "Code complexity is well studied in software science and could potentially be a good proxy for measuring how hard it is to infer the properties of a piece of code for our reasoning learner. Therefore, for the problem proposer, we can add various measures of complexity\u2014such as Cyclomatic Complexity(Ebert et\u00a0al.,2016), maintainability, etc.\u2014to the reward function to incentivize the proposer to produce more complex programs. For illustration purposes, we tried using the Maintainability measure and the Halstead complexity measure(Halstead,1977)as intrinsic rewards. Concretely, we used thecomplexipyandRadonpackages(Lopez,2025;Canal,2023)to implement the respective metrics. These are then served as intrinsic rewards during the AZR self-play phase.\n\nWe also attempted using diversity rewards to . Inspired by DiveR-CTZhao et\u00a0al.(2025a), we incorporatecode edit distanceas an intrinsic reward. Specifically, we treat the reference programs shown in the prompt as anchors and compute the average code edit distance between the generated program and these anchors. This serves as a measure of diversity in the generated output. Additionally, we explored another diversity-based reward inspired by the notion ofsurpriseZhao et\u00a0al.(2022). In this approach, we construct a probability distribution over previously encountered input/output pairs that the solver has answered. The reward is then defined as1\u2212p\u2062(input/output)1\ud835\udc5dinput/output1-p(\\text{input/output})1 - italic_p ( input/output ), wherep\ud835\udc5dpitalic_pdenotes the empirical probability of a particular input or output. While both strategies were evaluated in our experiments, we did not observe a significant difference in performance. However, we believe this aspect warrants deeper investigation, as diversity rewards remain a promising avenue for strengthening AZR further.\n\nWe tested several ways on how to combine rewards for the proposer and discriminator. First, we separate the reward into extrinsic rewardrextrinsicsubscript\ud835\udc5fextrinsicr_{\\text{extrinsic}}italic_r start_POSTSUBSCRIPT extrinsic end_POSTSUBSCRIPTand a set of intrinsic reward(s)I={ri}\ud835\udc3csubscript\ud835\udc5f\ud835\udc56I=\\{r_{i}\\}italic_I = { italic_r start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT }, and tested the following strategies to combine them into a single reward,\n\nWe found that the simple additive way of combining rewards, a.k.aEquation11, produced the most stable runs, possibly due to less variance.",
          "type": "section"
        },
        {
          "title": "D.5Environment Transition",
          "level": 3,
          "content": "We investigated how the transition function in our coding environment for the proposer. Specifically, after generating a piece of code, we can apply a transformation function on it before giving it making it an valid tuple in our dataset. We investigated two\n\nIn early iterations of our experiments, we noticed that comments and docstrings were sometimes used to explicitly outline what the function was doing, or even served as a partial \u201cnote-taking\u201d interleaved \u201cReAct\u201d process(Yao et\u00a0al.,2023)of generating code\u2014that is, the model could interleave think and action at the same time, and to make the generated code valid, it used comments to encase its thoughts\u00a0(Figure19), similarly observed in DeepSeek-Prover-V2:(Ren et\u00a0al.,2025). We then thought that to make the task harder for the solver, we should occlude this information from it. However, we observed a significant performance drop after removing all comments and docstrings. One explanation for this phenomenon is that the only \u201ccommunication\u201d channel between the proposer and the solver is restricted to the code itself, rather than some kind of \u201cmessage\u201d along with the code. These messages can potentially provide hints to the solver, thus making some otherwise impossible tasks solvable. As a result, the solver is able to learn from its experience and self-bootstrap out of certain unsolvable tasks.\n\nWe observed that some programs contain globally declared variables that may inadvertently leak information about the correct answer\u2014this issue is particularly prevalent in the input induction task generation and solving. Initially, we were concerned that such leakage might lead to wasted computation on trivial or compromised examples. To address this, we developed a systematic procedure to remove globally declared variables from the generated programs.\n\nHowever, after applying this cleaning step, we observed a noticeable drop in performance on our self-play reasoning tasks. One possible explanation is that the generation step is unaware of this post-processing modification; since the reward is assigned after the transition function (which includes variable removal), the model may not learn effectively from this mismatch.\n\nMoreover, we believe that even when answers are present, the solver still engages in nontrivial reasoning to reach a solution, potentially benefiting from this exposure. This aligns with the idea of rationalization as proposed in STaR(Zelikman et\u00a0al.,2022), where the model pretends to not see the answer but still performs reasoning during learning. Therefore, in our final experiments, we choose not to remove globally declared variables, allowing the self-play loop to naturally incorporate and adapt to such cases.",
          "type": "section"
        }
      ],
      "equations": [],
      "tables": [
        [
          [
            "Model",
            "Base",
            "#data",
            "HEval+",
            "MBPP+",
            "LCBv1-5",
            "AME24",
            "AME25",
            "AMC",
            "M500",
            "Minva",
            "Olypiad",
            "CAvg",
            "MAvg",
            "AVG"
          ],
          [
            "Base Models"
          ],
          [
            "Qwen2.5-7B[73]",
            "-",
            "-",
            "73.2",
            "65.3",
            "17.5",
            "6.7",
            "3.3",
            "37.5",
            "64.8",
            "25.0",
            "27.7",
            "52.0",
            "27.5",
            "39.8"
          ],
          [
            "Qwen2.5-7B-Ins[73]",
            "-",
            "-",
            "75.0",
            "68.5",
            "25.5",
            "13.3",
            "6.7",
            "52.5",
            "76.4",
            "35.7",
            "37.6",
            "56.3",
            "37.0",
            "46.7"
          ],
          [
            "Qwen2.5-7B-Coder[26]",
            "-",
            "-",
            "80.5",
            "69.3",
            "19.9",
            "6.7",
            "3.3",
            "40.0",
            "54.0",
            "17.3",
            "21.9",
            "56.6",
            "23.9",
            "40.2"
          ],
          [
            "Qwen2.5-7B-Math[74]",
            "-",
            "-",
            "61.0",
            "57.9",
            "16.2",
            "10.0",
            "16.7",
            "42.5",
            "64.2",
            "15.4",
            "28.0",
            "45.0",
            "29.5",
            "37.3"
          ],
          [
            "Zero-Style Reasoners Trained on Curated Coding Data"
          ],
          [
            "AceCoder-RM[84]",
            "Ins",
            "22k",
            "79.9",
            "71.4",
            "23.6",
            "20.0",
            "6.7",
            "50.0",
            "76.4",
            "34.6",
            "36.7",
            "58.3",
            "37.4",
            "47.9"
          ],
          [
            "AceCoder-Rule[84]",
            "Ins",
            "22k",
            "77.4",
            "69.0",
            "19.9",
            "13.3",
            "6.7",
            "50.0",
            "76.0",
            "37.5",
            "37.8",
            "55.4",
            "36.9",
            "46.2"
          ],
          [
            "AceCoder-RM[84]",
            "Coder",
            "22k",
            "78.0",
            "66.4",
            "27.5",
            "13.3",
            "3.3",
            "27.5",
            "62.6",
            "29.4",
            "29.0",
            "57.3",
            "27.5",
            "42.4"
          ],
          [
            "AceCoder-Rule[84]",
            "Coder",
            "22k",
            "80.5",
            "70.4",
            "29.0",
            "6.7",
            "6.7",
            "40.0",
            "62.8",
            "27.6",
            "27.4",
            "60.0",
            "28.5",
            "44.3"
          ],
          [
            "CodeR1-LC2k[36]",
            "Ins",
            "2k",
            "81.7",
            "71.7",
            "28.1",
            "13.3",
            "10.0",
            "45.0",
            "75.0",
            "33.5",
            "36.7",
            "60.5",
            "35.6",
            "48.0"
          ],
          [
            "CodeR1-12k[36]",
            "Ins",
            "12k",
            "81.1",
            "73.5",
            "29.3",
            "13.3",
            "3.3",
            "37.5",
            "74.0",
            "35.7",
            "36.9",
            "61.3",
            "33.5",
            "47.4"
          ],
          [
            "Zero-Style Reasoners Trained on Curated Math Data"
          ],
          [
            "PRIME-Zero[9]",
            "Coder",
            "484k",
            "49.4",
            "51.1",
            "11.0",
            "23.3",
            "23.3",
            "67.5",
            "81.2",
            "37.9",
            "41.8",
            "37.2",
            "45.8",
            "41.5"
          ],
          [
            "SimpleRL-Zoo[85]",
            "Base",
            "8.5k",
            "73.2",
            "63.2",
            "25.6",
            "16.7",
            "3.3",
            "57.5",
            "77.0",
            "35.7",
            "41.0",
            "54.0",
            "38.5",
            "46.3"
          ],
          [
            "Oat-Zero[38]",
            "Math",
            "8.5k",
            "62.2",
            "59.0",
            "15.2",
            "30.0",
            "16.7",
            "62.5",
            "80.0",
            "34.9",
            "41.6",
            "45.5",
            "44.3",
            "44.9"
          ],
          [
            "ORZ[23]",
            "Base",
            "57k",
            "80.5",
            "64.3",
            "22.0",
            "13.3",
            "16.7",
            "60.0",
            "81.8",
            "32.7",
            "45.0",
            "55.6",
            "41.6",
            "48.6"
          ],
          [
            "Absolute Zero Training w/ No Curated Data (Ours)"
          ],
          [
            "AZR (Ours)",
            "Base",
            "0",
            "71.3-1.971.3\\mathrlap{{}^{{\\color[rgb]{0.75,0.75,0.75}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0.75,0.75,0.75}\\pgfsys@color@gray@stroke{0.75}%\n\\pgfsys@color@gray@fill{0.75}\\scalebox{0.5}{-1.9}}}}71.3 start_ARG start_FLOATSUPERSCRIPT -1.9 end_FLOATSUPERSCRIPT end_ARG",
            "69.1+3.869.1\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+3.8}}}}69.1 start_ARG start_FLOATSUPERSCRIPT +3.8 end_FLOATSUPERSCRIPT end_ARG",
            "25.3+7.825.3\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+7.8}}}}25.3 start_ARG start_FLOATSUPERSCRIPT +7.8 end_FLOATSUPERSCRIPT end_ARG",
            "13.3+6.613.3\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+6.6}}}}13.3 start_ARG start_FLOATSUPERSCRIPT +6.6 end_FLOATSUPERSCRIPT end_ARG",
            "13.3+10.013.3\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+10.0}}}}13.3 start_ARG start_FLOATSUPERSCRIPT +10.0 end_FLOATSUPERSCRIPT end_ARG",
            "52.5+15.052.5\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+15.0}}}}52.5 start_ARG start_FLOATSUPERSCRIPT +15.0 end_FLOATSUPERSCRIPT end_ARG",
            "74.4+9.674.4\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+9.6}}}}74.4 start_ARG start_FLOATSUPERSCRIPT +9.6 end_FLOATSUPERSCRIPT end_ARG",
            "38.2+13.238.2\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+13.2}}}}38.2 start_ARG start_FLOATSUPERSCRIPT +13.2 end_FLOATSUPERSCRIPT end_ARG",
            "38.5+10.838.5\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+10.8}}}}38.5 start_ARG start_FLOATSUPERSCRIPT +10.8 end_FLOATSUPERSCRIPT end_ARG",
            "55.2+3.255.2\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+3.2}}}}55.2 start_ARG start_FLOATSUPERSCRIPT +3.2 end_FLOATSUPERSCRIPT end_ARG",
            "38.4+10.938.4\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+10.9}}}}38.4 start_ARG start_FLOATSUPERSCRIPT +10.9 end_FLOATSUPERSCRIPT end_ARG",
            "46.8+7.046.8\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+7.0}}}}46.8 start_ARG start_FLOATSUPERSCRIPT +7.0 end_FLOATSUPERSCRIPT end_ARG"
          ],
          [
            "AZR (Ours)",
            "Coder",
            "0",
            "83.5+3.083.5\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+3.0}}}}83.5 start_ARG start_FLOATSUPERSCRIPT +3.0 end_FLOATSUPERSCRIPT end_ARG",
            "69.6+0.369.6\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+0.3}}}}69.6 start_ARG start_FLOATSUPERSCRIPT +0.3 end_FLOATSUPERSCRIPT end_ARG",
            "31.7+11.831.7\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+11.8}}}}31.7 start_ARG start_FLOATSUPERSCRIPT +11.8 end_FLOATSUPERSCRIPT end_ARG",
            "20.0+13.320.0\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+13.3}}}}20.0 start_ARG start_FLOATSUPERSCRIPT +13.3 end_FLOATSUPERSCRIPT end_ARG",
            "10.0+6.710.0\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+6.7}}}}10.0 start_ARG start_FLOATSUPERSCRIPT +6.7 end_FLOATSUPERSCRIPT end_ARG",
            "57.5+17.557.5\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+17.5}}}}57.5 start_ARG start_FLOATSUPERSCRIPT +17.5 end_FLOATSUPERSCRIPT end_ARG",
            "72.6+22.672.6\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+22.6}}}}72.6 start_ARG start_FLOATSUPERSCRIPT +22.6 end_FLOATSUPERSCRIPT end_ARG",
            "36.4+19.136.4\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+19.1}}}}36.4 start_ARG start_FLOATSUPERSCRIPT +19.1 end_FLOATSUPERSCRIPT end_ARG",
            "38.2+16.338.2\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+16.3}}}}38.2 start_ARG start_FLOATSUPERSCRIPT +16.3 end_FLOATSUPERSCRIPT end_ARG",
            "61.6+5.0\\textbf{{\\color[rgb]{0,0.3984375,0.80078125}\\definecolor[named]{pgfstrokecolor%\n}{rgb}{0,0.3984375,0.80078125}61.6}}\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}%\n\\definecolor[named]{pgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+5.0}}}}61.6 start_ARG start_FLOATSUPERSCRIPT +5.0 end_FLOATSUPERSCRIPT end_ARG",
            "39.1+15.239.1\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}\\definecolor[named]{%\npgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+15.2}}}}39.1 start_ARG start_FLOATSUPERSCRIPT +15.2 end_FLOATSUPERSCRIPT end_ARG",
            "50.4+10.2\\textbf{{\\color[rgb]{0,0.3984375,0.80078125}\\definecolor[named]{pgfstrokecolor%\n}{rgb}{0,0.3984375,0.80078125}50.4}}\\mathrlap{{}^{{\\color[rgb]{0,0.58984375,0}%\n\\definecolor[named]{pgfstrokecolor}{rgb}{0,0.58984375,0}\\scalebox{0.5}{+10.2}}}}50.4 start_ARG start_FLOATSUPERSCRIPT +10.2 end_FLOATSUPERSCRIPT end_ARG"
          ]
        ],
        [
          [
            "Model Family",
            "Variant",
            "Code Avg",
            "Math Avg",
            "Total Avg"
          ],
          [
            "Llama3.1-8b",
            "",
            "28.5",
            "3.4",
            "16.0"
          ],
          [
            "Llama3.1-8b",
            "+ SimpleRL[85]",
            "33.7+5.233.7\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+5.2}}}33.7 start_ARG start_FLOATSUPERSCRIPT + 5.2 end_FLOATSUPERSCRIPT end_ARG",
            "7.2+3.87.2\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+3.8}}}7.2 start_ARG start_FLOATSUPERSCRIPT + 3.8 end_FLOATSUPERSCRIPT end_ARG",
            "20.5+4.520.5\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+4.5}}}20.5 start_ARG start_FLOATSUPERSCRIPT + 4.5 end_FLOATSUPERSCRIPT end_ARG"
          ],
          [
            "Llama3.1-8b",
            "+ AZR (Ours)",
            "31.6+3.131.6\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+3.1}}}31.6 start_ARG start_FLOATSUPERSCRIPT + 3.1 end_FLOATSUPERSCRIPT end_ARG",
            "6.8+3.46.8\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+3.4}}}6.8 start_ARG start_FLOATSUPERSCRIPT + 3.4 end_FLOATSUPERSCRIPT end_ARG",
            "19.2+3.219.2\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+3.2}}}19.2 start_ARG start_FLOATSUPERSCRIPT + 3.2 end_FLOATSUPERSCRIPT end_ARG"
          ],
          [
            "Qwen2.5-3B Coder",
            "",
            "51.2",
            "18.8",
            "35.0"
          ],
          [
            "Qwen2.5-3B Coder",
            "+ AZR (Ours)",
            "54.9+3.754.9\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+3.7}}}54.9 start_ARG start_FLOATSUPERSCRIPT + 3.7 end_FLOATSUPERSCRIPT end_ARG",
            "26.5+7.726.5\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+7.7}}}26.5 start_ARG start_FLOATSUPERSCRIPT + 7.7 end_FLOATSUPERSCRIPT end_ARG",
            "40.7+5.740.7\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+5.7}}}40.7 start_ARG start_FLOATSUPERSCRIPT + 5.7 end_FLOATSUPERSCRIPT end_ARG"
          ],
          [
            "Qwen2.5-7B Coder",
            "",
            "56.6",
            "23.9",
            "40.2"
          ],
          [
            "Qwen2.5-7B Coder",
            "+ AZR (Ours)",
            "61.6+5.061.6\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+5.0}}}61.6 start_ARG start_FLOATSUPERSCRIPT + 5.0 end_FLOATSUPERSCRIPT end_ARG",
            "39.1+15.239.1\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+15.2}}}39.1 start_ARG start_FLOATSUPERSCRIPT + 15.2 end_FLOATSUPERSCRIPT end_ARG",
            "50.4+10.250.4\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+10.2}}}50.4 start_ARG start_FLOATSUPERSCRIPT + 10.2 end_FLOATSUPERSCRIPT end_ARG"
          ],
          [
            "Qwen2.5-14B Coder",
            "",
            "60.0",
            "20.2",
            "40.1"
          ],
          [
            "Qwen2.5-14B Coder",
            "+ AZR (Ours)",
            "63.6+3.663.6\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+3.6}}}63.6 start_ARG start_FLOATSUPERSCRIPT + 3.6 end_FLOATSUPERSCRIPT end_ARG",
            "43.0+22.843.0\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+22.8}}}43.0 start_ARG start_FLOATSUPERSCRIPT + 22.8 end_FLOATSUPERSCRIPT end_ARG",
            "53.3+13.253.3\\mathrlap{{}^{\\scriptscriptstyle{\\color[rgb]{0,0.58984375,0}\\definecolor[%\nnamed]{pgfstrokecolor}{rgb}{0,0.58984375,0}+13.2}}}53.3 start_ARG start_FLOATSUPERSCRIPT + 13.2 end_FLOATSUPERSCRIPT end_ARG"
          ]
        ],
        [
          [
            "Experiment",
            "Task Type",
            "Gen Reference",
            "Trained Roles",
            "Code Avg.",
            "Math Avg.",
            "Overall Avg."
          ],
          [
            "Deduction only",
            "Ded",
            "/",
            "/",
            "54.6",
            "32.0",
            "43.3"
          ],
          [
            "w/o Induction",
            "Abd, Ded",
            "/",
            "/",
            "54.2",
            "33.3",
            "43.8"
          ],
          [
            "w/o Gen Reference",
            "/",
            "0",
            "/",
            "54.4",
            "33.1",
            "43.8"
          ],
          [
            "Train Solver Only",
            "/",
            "/",
            "Solve Only",
            "54.8",
            "36.0",
            "45.4"
          ],
          [
            "Ours",
            "Abd, Ded, Ind",
            "K\ud835\udc3eKitalic_K",
            "Propose & Solve",
            "55.2",
            "38.4",
            "46.8"
          ]
        ],
        [
          [
            "Parameter",
            "Value"
          ],
          [
            "Model Configuration"
          ],
          [
            "Max Prompt Length",
            "6144"
          ],
          [
            "Max Response Length",
            "8096"
          ],
          [
            "Seed Batch Factor",
            "4"
          ],
          [
            "Max Programs",
            "16384"
          ],
          [
            "Training Settings"
          ],
          [
            "Train Batch Size",
            "64 * 6"
          ],
          [
            "Learning Rate",
            "1e-6"
          ],
          [
            "Optimizer",
            "AdamW"
          ],
          [
            "Grad Clip",
            "1.0"
          ],
          [
            "Total Steps",
            "500"
          ],
          [
            "RL Settings"
          ],
          [
            "Algorithm",
            "TRR++\u00a0(Section3.3.5)"
          ],
          [
            "KL Loss",
            "False"
          ],
          [
            "KL Reward",
            "False"
          ],
          [
            "Entropy Coefficient",
            "0.001"
          ],
          [
            "PPO Epochs",
            "1"
          ],
          [
            "N\ud835\udc41Nitalic_NRollouts",
            "1"
          ],
          [
            "Rollout Temperature",
            "1.0"
          ],
          [
            "Rollout Top-P",
            "1.0"
          ],
          [
            "K\ud835\udc3eKitalic_KReferences",
            "6"
          ],
          [
            "N\ud835\udc41Nitalic_NSamples to Estimate Task Accuracy",
            "8"
          ]
        ],
        [
          [
            "Model",
            "Data Curation",
            "Base Model"
          ],
          [
            "Oat-7B(Liu et\u00a0al.,2025)",
            "8.5k math pairs(Hendrycks et\u00a0al.,2021)",
            "Qwen2.5-7B-Math"
          ],
          [
            "SimpleRL-Zoo(Zeng et\u00a0al.,2025b)",
            "8.5k math pairs(Hendrycks et\u00a0al.,2021)",
            "Qwen2.5-7B-Base"
          ],
          [
            "OpenReasonerZero(Hu et\u00a0al.,2025)",
            "57k STEM + math samples",
            "Qwen2.5-7B-Base"
          ],
          [
            "PRIME-Zero(Cui et\u00a0al.,2025)",
            "457k math + 27k code problems",
            "Qwen2.5Math-7B-Base"
          ],
          [
            "CodeR1-Zero-7B-LC2k-1088(Liu & Zhang,2025)",
            "2k Leetcode pairs",
            "Qwen2.5-7B-Instruct-1M"
          ],
          [
            "CodeR1-Zero-7B-12k-832(Liu & Zhang,2025)",
            "2k Leetcode + 10k TACO pairs(Li et\u00a0al.,2023)",
            "Qwen2.5-7B-Instruct-1M"
          ],
          [
            "AceCoder-7B-Ins-RM(Zeng et\u00a0al.,2025a)",
            "22k code data",
            "Qwen2.5-7B-Instruct"
          ],
          [
            "AceCoder-7B-Ins-Rule(Zeng et\u00a0al.,2025a)",
            "22k code data",
            "Qwen2.5-7B-Instruct"
          ],
          [
            "AceCoder-7B-Code-RM(Zeng et\u00a0al.,2025a)",
            "22k code data",
            "Qwen2.5-7B-Coder"
          ],
          [
            "AceCoder-7B-Code-Rule(Zeng et\u00a0al.,2025a)",
            "22k code data",
            "Qwen2.5-7B-Coder"
          ],
          [
            "Qwen-7B-Instruct(Yang et\u00a0al.,2024a)",
            "1M SFT + 150k RL pairs",
            "Qwen2.5-7B-Base"
          ],
          [
            "AZR-7B (Ours)",
            "No data",
            "Qwen2.5-7B-Base"
          ],
          [
            "AZR-7B-Coder (Ours)",
            "No data",
            "Qwen2.5-7B-Coder"
          ]
        ],
        [
          [
            "logging",
            "random",
            "multiprocessing",
            "pebble",
            "subprocess"
          ],
          [
            "threading",
            "datetime",
            "time",
            "hashlib",
            "calendar"
          ],
          [
            "bcrypt",
            "os.sys",
            "os.path",
            "sys.exit",
            "os.environ"
          ]
        ],
        [
          [
            "Model",
            "HEval+",
            "MBPP+",
            "LCBv1-5",
            "AIME\u201924",
            "AIME\u201925",
            "AMC\u201923",
            "MATH500",
            "Minerva",
            "OlympiadBench"
          ],
          [
            "Llama3.1-8B",
            "31.7",
            "53.7",
            "0.0",
            "0.0",
            "0.0",
            "2.5",
            "10.6",
            "5.5",
            "2.1"
          ],
          [
            "+ Simple-RL-Zoo",
            "38.4",
            "55.3",
            "7.4",
            "0.0",
            "0.0",
            "7.5",
            "22.2",
            "8.8",
            "4.7"
          ],
          [
            "+ AZR",
            "35.4",
            "50.8",
            "8.5",
            "3.3",
            "0.0",
            "5.0",
            "13.2",
            "14.0",
            "5.0"
          ],
          [
            "Qwen2.5-3B-Coder",
            "67.1",
            "65.9",
            "20.0",
            "3.3",
            "3.3",
            "20.0",
            "51.0",
            "18.4",
            "16.6"
          ],
          [
            "+ AZR",
            "71.3",
            "69.0",
            "24.4",
            "3.3",
            "3.3",
            "37.5",
            "62.0",
            "26.1",
            "27.0"
          ],
          [
            "Qwen2.5-14B-Coder",
            "76.8",
            "71.7",
            "31.4",
            "0.0",
            "0.0",
            "37.5",
            "54.8",
            "10.7",
            "18.5"
          ],
          [
            "+ AZR",
            "80.5",
            "71.2",
            "39.0",
            "23.3",
            "20.0",
            "65.0",
            "78.6",
            "32.0",
            "39.3"
          ],
          [
            "Qwen2.5-14B-Base",
            "78.0",
            "66.7",
            "21.7",
            "6.7",
            "3.3",
            "35.0",
            "66.2",
            "28.3",
            "32.4"
          ],
          [
            "+ AZR",
            "70.7",
            "68.8",
            "35.2",
            "10.0",
            "20.0",
            "62.5",
            "76.2",
            "40.4",
            "42.5"
          ]
        ]
      ],
      "total_sections": 28,
      "total_equations": 0,
      "total_tables": 7
    },
    "extractor_pdf": {
      "source": "extractor",
      "file": "2505.03335v2.pdf",
      "sections": [
        {
          "_key": "570ec92c",
          "_id": "sections/570ec92c",
          "title": "Document Content",
          "level": 1,
          "content": "markdown='![](_page_0_Picture_0.jpeg)\\n\\n# **Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Andrew Zhao** <sup>1</sup> **, Yiran Wu**<sup>3</sup> **, Yang Yue** <sup>1</sup> **, Tong Wu**<sup>2</sup> **, Quentin Xu**<sup>1</sup> **, Yang Yue** <sup>1</sup> **, Matthieu Lin**<sup>1</sup> **, Shenzhi Wang** <sup>1</sup> **, Qingyun Wu**<sup>3</sup> **, Zilong Zheng** <sup>2</sup>*,* **and Gao Huang** <sup>1</sup>*,*\\n\\n1 Tsinghua University 2 Beijing Institute for General Artificial Intelligence 3 Pennsylvania State University\\n\\nzqc21@mails.tsinghua.edu.cn, yiran.wu@psu.edu, zlzheng@bigai.ai, gaohuang@tsinghua.edu.cn\\n\\nReinforcement learning with verifiable rewards (RLVR) has shown promise in enhancing the reasoning capabilities of large language models by learning directly from outcome-based rewards. Recent RLVR works that operate under the *zero setting* avoid supervision in labeling the reasoning process, but still depend on manually curated collections of questions and answers for training. The scarcity of highquality, human-produced examples raises concerns about the long-term scalability of relying on human supervision, a challenge already evident in the domain of language model pretraining. Furthermore, in a hypothetical future where AI surpasses human intelligence, tasks provided by humans may offer limited learning potential for a superintelligent system. To address these concerns, we propose a new RLVR paradigm called *Absolute Zero*, in which a single model learns to propose tasks that maximize its own learning progress and improves reasoning by solving them, without relying on any external data. Under this paradigm, we introduce the Absolute Zero Reasoner (AZR), a system that self-evolves its training curriculum and reasoning ability by using a code executor to both validate proposed code reasoning tasks and verify answers, serving as an unified source of verifiable reward to guide open-ended yet grounded learning. Despite being trained entirely *without external data*, AZR achieves overall SOTA performance on coding and mathematical reasoning tasks, *outperforming existing zero-setting models* that rely on tens of thousands of *in-domain human-curated examples*. Furthermore, we demonstrate that AZR can be effectively applied across different model scales and is compatible with various model classes.\\n\\n![](_page_0_Figure_7.jpeg)\\n\\n*Figure 1.* **Absolute Zero Reasoner (AZR) achieves state-of-the-art performance with ZERO DATA**. Without relying on any gold labels or human-defined queries, Absolute Zero Reasoner trained using our proposed self-play approach demonstrates impressive general reasoning capabilities improvements in both math and coding, despite operating entirely out-of-distribution. Remarkably, AZR surpasses models trained on tens of thousands of expert-labeled in-domain examples in the combined average score across both domains.\\n\\n*Corresponding author(s)*\\n\\n**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n\\n![](_page_1_Figure_1.jpeg)\\n\\nLess Human Supervision\\n\\n<span id=\"page-1-0\"></span>*Figure 2.* **Absolute Zero Paradigm. Supervised learning** relies on human-curated reasoning traces for behavior cloning. **Reinforcement learning from verified rewards**, enables agents to self-learn reasoning, but still depends on expert-defined learning distribution and a respective set of curated QA pairs, demanding domain expertise and manual effort. In contrast, we introduce a new paradigm, **Absolute Zero**, for training reasoning models without any human-curated data. We envision that the agent should autonomously propose tasks optimized for learnability and learn how to solve them using an unified model. The agent learns by interacting with an environment that provides verifiable feedback, enabling reliable and continuous self-improvement entirely without human intervention.\\n\\n# **1. Introduction**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**1. Introduction**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nLarge language models (LLMs) have recently achieved remarkable improvements in reasoning capabilities by employing Reinforcement Learning with Verifiable Rewards (RLVR) [\\\\(Lambert et al.,](#page-15-0) [2024\\\\)](#page-15-0). Unlike methods that explicitly imitate intermediate reasoning steps, RLVR uses only outcome-based feedback, enabling large-scale reinforcement learning over vast task datasets [\\\\(DeepSeek-AI et al.,](#page-13-0) [2025;](#page-13-0) [Team et al.,](#page-16-0) [2025;](#page-16-0) [Jaech et al.,](#page-14-0) [2024;](#page-14-0) [OpenAI,](#page-15-1) [2025b;](#page-15-1)[a\\\\)](#page-15-2). A particularly compelling variant is the *\"zero\"* RLVR paradigm [\\\\(DeepSeek-AI](#page-13-0) [et al.,](#page-13-0) [2025\\\\)](#page-13-0), which forgoes any cold-start distillation data, using neither human-generated nor AI-generated reasoning traces, and applies RLVR directly on the base model with task rewards. However, these methods still depend heavily on expertly curated distributions of reasoning question\u2013answer pairs, which raises serious concerns about their long-term scalability [\\\\(Villalobos et al.,](#page-16-1) [2024\\\\)](#page-16-1). As reasoning models continue to advance, the effort required to construct large-scale, high-quality datasets may soon become unsustainable [\\\\(Yue](#page-17-0) [et al.,](#page-17-0) [2025\\\\)](#page-17-0). A similar scalability bottleneck has already been identified in the domain of LLM pretraining [\\\\(Sutskever et al.,](#page-16-2) [2024\\\\)](#page-16-2). Furthermore, as AI systems continue to evolve and potentially exceed human intellect, an exclusive dependence on human-designed tasks risks imposing constraints on their capacity for autonomous learning and growth [\\\\(Hughes et al.,](#page-14-1) [2024\\\\)](#page-14-1). This underscores the need for a new paradigm that begins to explore possibilities beyond the constraints of human-designed tasks and prepares for a future in which AI systems may surpass human intelligence.\\n\\nTo this end, we propose *\"Absolute Zero\"*, a new paradigm for reasoning models in which the model simultaneously learns to define tasks that maximize learnability and to solve them effectively, enabling self-evolution through self-play without relying on external data. In contrast to prior self-play methods that are limited to narrow domains, fixed functionalities, or learned reward models that are prone to hacking [\\\\(Silver et al.,](#page-16-3) [2017;](#page-16-3) [Chen et al.,](#page-13-1) [2025;](#page-13-1) [2024\\\\)](#page-13-2), the *Absolute Zero* paradigm is designed to operate in open-ended settings while remaining grounded in a real environment. It relies on feedback from the environment as a verifiable source of reward, mirroring how humans learn and reason through interaction with the world, and helps prevent issues such as hacking with neural reward models [\\\\(Hughes](#page-14-1) [et al.,](#page-14-1) [2024\\\\)](#page-14-1). Similar to AlphaZero [\\\\(Silver et al.,](#page-16-3) [2017\\\\)](#page-16-3), which improves through self-play, our proposed paradigm requires no human supervision and learns entirely through self-interaction. We believe the Absolute Zero paradigm represents a promising step toward enabling large language models to autonomously achieve superhuman reasoning capabilities.\\n\\nBuilding on this new reasoning paradigm, we introduce the *Absolute Zero Reasoner (AZR)*, which proposes and solves coding tasks. We cast code executor as an open-ended yet grounded environment, sufficient to both validate task integrity and also provide verifiable feedback for stable training. We let AZR construct three types of coding tasks: infer and reason about one particular element in a program, input, output triplet, which corresponds to three complementary modes of reasoning: induction, abduction, and deduction. We train the entire system end-to-end with a newly proposed reinforcement learning advantage estimator tailored to the multitask nature of the proposed approach.\\n\\nDespite being trained entirely without any in-distribution data, AZR demonstrates remarkable capabilities across diverse reasoning tasks in math and coding. In mathematics, AZR achieves competitive performance compared to zero reasoner models explicitly fine-tuned with domain-specific supervision. In coding tasks, AZR establishes a new state-of-the-art performance, surpassing models specifically trained with code datasets using RLVR. Furthermore, AZR outperforms all previous models by an average of 1.8 absolute points compared to models trained in the \"zero\" setting using in-domain data. These surprising results highlight that general reasoning skills can emerge without human-curated domain targeted data, positioning Absolute Zero as an promising research direction and AZR as a first pivotal milestone. Besides the remarkable results AZR achieved with zero human data for reasoning, we also make very interesting findings summarized below:\\n\\n- **Code priors amplify reasoning.** The base Qwen-Coder-7b model started with math performance 3.6 points lower than Qwen-7b. But after AZR training for both models, the coder variant surpassed the base by 0.7 points, suggesting that strong coding capabilities may potentially amplify overall reasoning improvements after AZR training.\\n- **Cross domain transfer is more pronounced for AZR.** After RLVR, expert code models raise math accuracy by only 0.65 points on average, whereas AZR-Base-7B and AZR-Coder-7B trained on self-proposed code reasoning tasks improve math average by 10.9 and 15.2, respectively, demonstrating much stronger generalized reasoning capability gains.\\n- **Bigger bases yield bigger gains.** Performance improvements scale with model size: the 3B, 7B, and 14B coder models gain +5.7, +10.2, and +13.2 points respectively, suggesting continued scaling is advantageous for AZR.\\n- **Comments as intermediate plans emerge naturally.** When solving code induction tasks, AZR often interleaves step-by-step plans as comments and code (Appendix [C.3\\\\)](#page-24-0), resembling the ReAct prompting framework [\\\\(Yao et al.,](#page-17-1) [2023\\\\)](#page-17-1). Similar behavior has been observed in much larger formal-math models such as DeepSeek Prover v2 (671B) [\\\\(Ren et al.,](#page-15-3) [2025\\\\)](#page-15-3). We therefore believe that allowing the model to use intermediate scratch-pads when generating long-form answers may be beneficial in other domains as well.\\n- **Cognitive Behaviors and Token length depends on reasoning mode.** Distinct cognitive behaviors\u2014such as step-by-step reasoning, enumeration, and trial-and-error all emerged through AZR training, but different behaviors are particularly evident across different types of tasks. Furthermore token counts grow over AZR training, but the magnitude of increase also differs by task types: abduction grows the most because the model performs trial-and-error until output matches, whereas deduction and induction grow modestly.\\n- **Safety alarms ringing.** We observe AZR with Llama3.1-8b occasionally produces concerning chains of thought, we term the \"uh-oh moment\", example shown in Figure [32,](#page-37-0) highlighting the need for future work on safety-aware training [\\\\(Zhang et al.,](#page-18-0) [2025a\\\\)](#page-18-0).\\n\\n# **2. The Absolute Zero Paradigm**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**2. The Absolute Zero Paradigm**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n### **2.1. Preliminaries**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**2. The Absolute Zero Paradigm**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"**2.1. Preliminaries**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Supervised Fine-Tuning (SFT).** SFT requires the datasets of task-rationale-answer demonstrations <sup>D</sup> <sup>=</sup> {(*x, c<sup>\u22c6</sup> , y<sup>\u22c6</sup>* )}, where *x* is the query, *c \u22c6* is the gold chain-of-thought (CoT)) and *y \u22c6* is the gold answer, all provided by human experts or superior AI models. The model trains to imitate the reference responses to minimize the conditional negative log-likelihood [\\\\(Ouyang et al.,](#page-15-4) [2022\\\\)](#page-15-4):\\n\\n$$\\\\mathcal{L}\\\\_{\\\\text{SFT}}(\\\\theta) = - \\\\mathbb{E}\\\\_{(x, c^\\\\*, y^\\\\*) \\\\sim \\\\mathcal{D}} \\\\log \\\\pi\\\\_{\\\\theta} \\\\left( c^\\\\*, y^\\\\* \\\\mid x \\\\right). \\\\tag{1}$$\\n\\nHowever, at the frontier level, there\\'s no stronger model to distill from, and expert human labeling doesn\\'t scale well.\\n\\n**Reinforcement Learning with Verifiable Rewards (RLVR).** To move beyond the limits of pure imitation, RLVR only requires a dataset of task and answer <sup>D</sup> <sup>=</sup> {(*x, y<sup>\u22c6</sup>* )}, without labeled rationale. RLVR allows the model to generate its own CoT and calculate a verifiable reward with the golden answer *r*(*y, y<sup>\u22c6</sup>* ). However, the learning task distribution <sup>D</sup>, with its set of queries and gold answers are still labeled by human experts. The trainable policy *\u03c0<sup>\u03b8</sup>* is optimized to maximize expected reward:\\n\\n$$J\\\\_{\\\\text{RLVR}}(\\\\theta) = \\\\mathbb{E}\\\\_{(x,y^\\\\*) \\\\sim \\\\mathcal{D}, y \\\\sim \\\\pi\\\\_{\\\\theta}(\\\\cdot | x)} \\\\left[ r(y, y^\\\\*) \\\\right]. \\\\tag{2}$$\\n\\nIn summary, both SFT and RLVR still rely on human-curated datasets of either queries, demonstrations, or verifiers, which ultimately limit scalability. The Absolute Zero paradigm removes this dependency by allowing the model to generate, solve, and learn from its own interactions with the environment entirely through self-play.\\n\\n### **2.2. Absolute Zero**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**2. The Absolute Zero Paradigm**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"**2.2. Absolute Zero**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe propose the Absolute Zero paradigm, where during training, the model simultaneously proposes tasks, solves them, and learns from both stages. No external data is required and the model learns entirely through self-play and experience, aided by some environment. We illustrate this paradigm in Figure [2,](#page-1-0) which contrasts Absolute Zero with supervised learning and RLVR, highlighting how our approach eliminates the need for any human-curated data by enabling self-improving task proposal and solution through self-play.\\n\\nTo make the Absolute Zero setting concrete, we now define how one model can act both as the proposer and solver role. To aid understanding, we include an illustration in Figure [3.](#page-3-0) Let *\u03c0<sup>\u03b8</sup>* be our parameterized language model, it is used to play two roles, proposer *\u03c0* propose *\u03b8* and solver *\u03c0* solve *<sup>\u03b8</sup>* during training.\\n\\nThe proposer first samples a proposed task conditioned on variable *<sup>z</sup>*: *<sup>\u03c4</sup>* <sup>\u223c</sup> *\u03c0* propose *\u03b8* (\u00b7|*z*), which will then be validated and used to construct a valid reasoning task together with the environment *e*: (*x, y<sup>\u22c6</sup>* ) \u223c *<sup>f</sup>e*(\u00b7|*<sup>\u03c4</sup>* ), where *<sup>x</sup>* is the task query and *<sup>y</sup> \u22c6* is the gold label. Then the solver produces an answer *<sup>y</sup>* <sup>\u223c</sup> *<sup>\u03c0</sup>* solve *\u03b8* (\u00b7 | *<sup>x</sup>*). Each proposed task *\u03c4* is scored by a *learnability reward r* propose *<sup>e</sup>* (*\u03c4, \u03c0\u03b8*), which captures the expected improvement in *\u03c0<sup>\u03b8</sup>* after training on the task query *x*. Moreover, the same policy also receives a *solution reward r* solve *<sup>e</sup>* (*y, y<sup>\u22c6</sup>* ) for its answer to the task query *x*, with the environment again serv-\\n\\n![](_page_3_Figure_2.jpeg)\\n\\n<span id=\"page-3-2\"></span><span id=\"page-3-0\"></span>*Figure 3.* **The Absolute Zero Loop.** The Absolute Zero loop begins with the agent *\u03c0* proposing task *\u03c4* , which is transformed by *f* with the environment *e* into a validated problem (*x, y<sup>\u22c6</sup>* ), and also emits a reward *r* propose for learnability. Then, a standard RL step follows: the agent solves *x* by producing *y*, receiving reward *r* solve from *e* by matching with *y \u22c6* . *\u03c0* propose and *\u03c0* solve are jointly trained and this process can be repeated indefinitely.\\n\\ning as the verifier. A nonnegative coefficient *\u03bb* balances the trade-off between exploring new, learnable tasks and improving the model\\'s reasoning and problem-solving abilities. We formally define the absolute zero setting\\'s objective as follows:\\n\\n$$\\\\mathcal{J}(\\\\theta) := \\\\max\\\\_{\\\\theta} \\\\ \\\\mathbb{E}\\\\_{z \\\\sim p(z)} \\\\Bigg[ \\\\ \\\\mathbb{E}\\\\_{(x,y^\\\\*) \\\\sim f\\\\_+( \\\\cdot | \\\\tau), \\\\tau \\\\sim \\\\pi^{\\\\text{group}}\\\\_0( \\\\cdot | z) } \\\\bigg[ r^{\\\\text{propose}}\\\\_c(\\\\tau, \\\\pi\\\\_\\\\theta) + \\\\lambda \\\\, \\\\mathbb{E}\\\\_{y \\\\sim \\\\pi^{\\\\text{stop}}\\\\_0( \\\\cdot | z) } \\\\big[ r^{\\\\text{stop}}\\\\_c(y,y^\\\\*) \\\\big] \\\\bigg] \\\\Bigg]. \\\\tag{3}$$\\n\\nNotice that we shift the burden of scaling data away from human experts and onto the proposer policy *\u03c0* propose *\u03b8* and the environment *e*. These two roles are both responsible for defining/evolving the learning task distribution, validating proposed tasks, and providing grounded feedback that supports stable and self-sustainable training. When proposing, *z* acts as a conditional variable that seeds generation of tasks. Practically, *z* can be instantiated by sampling a small subset of past (task, answer) pairs from a continually updated task memory, yet there is no specific implementation tied to the paradigm. To guide the proposing process, we use a learnability reward *r* propose(*\u03c4, \u03c0\u03b8*), which measures how much the model is expected to improve by solving a proposed task *<sup>\u03c4</sup>* . Moreover, the solver reward *r* solve(*y, y*<sup>\u2217</sup> ) evaluates the correctness of the model\\'s output. Together, these two signals guide the model to propose tasks that are both challenging and learnable, while also enhancing its reasoning abilities, ultimately enabling continuous improvement through self-play.\\n\\n# **3. Absolute Zero Reasoner**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nIn this section, we present *Absolute Zero Reasoner* (AZR) as the first attempt to embrace the Absolute Zero Paradigm. In AZR, an unified LLM serves as both a proposer and a solver: it generates tasks to evolve its learning curriculum and attempts to solve them to improve its reasoning capabilities. The model is trained jointly with both roles, learning to create tasks that push the boundary of reasoning capacity while enhancing its ability to solve them effectively (Section [3.1\\\\)](#page-3-1). Within this self-play training paradigm, the model learns from three distinct type of coding tasks, which corresponding to three fundamental modes of reasoning: abduction, deduction and induction (Section [3.2\\\\)](#page-5-0). Using coding tasks is motivated by the Turing-completeness of programming languages [\\\\(Stuart,](#page-16-4) [2015\\\\)](#page-16-4) and empirical evidence that code-based training improves reasoning [\\\\(Aryabumi et al.,](#page-13-3) [2024\\\\)](#page-13-3). We adopt code as an open-ended, expressive, and verifiable medium for enabling reliable task construction and verification (Section [3.3\\\\)](#page-5-1). Finally, the model is updated using a newly proposed advantage estimator designed for multitask learning (Section [3.3.5\\\\)](#page-7-0). We outline the overall algorithm in Algorithm [1](#page-6-0) and highlight an illustration of our Absolute Zero Reasoner approach in Figure [4.](#page-4-0) To expedite future exploration in this area, we also present several attempts that did not yield fruitful results but still warrant discussion in Appendix [D.](#page-48-0)\\n\\n### <span id=\"page-3-1\"></span>**3.1. Two Roles in One: Proposer and Solver**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-3-1\\\\\"></span>**3.1. Two Roles in One: Proposer and Solver**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nLarge language models are naturally suited for implementing AZR in a multitask learning context [\\\\(Radford et al.,](#page-15-5) [2019\\\\)](#page-15-5), as both the formulation of reasoning tasks and their solutions occur within a unified language space. To this end, we propose rewarding a single model for both generating high learning potential tasks and solving them effectively, as specified by the Absolute Zero objective in Equation [\\\\(3\\\\)](#page-3-2). At each iteration of the online rollout, AZR proposes new reasoning tasks by conditioning on the task type (as defined in Section [3.2\\\\)](#page-5-0) and *K* past self-generated examples. The model is explicitly prompted to generate tasks that differ from these examples, promoting diversity and broader coverage of the task space. These task proposals are filtered and transformed into valid reasoning tasks that can be verified using the environment, outlined later in Section [3.3.](#page-5-1) AZR then attempts to solve these newly proposed tasks, receiving grounded feedback for its model responses. Both task proposal and problem solving are trained using reinforcement learning. We now outline the rewards used for each role.\\n\\n**Reward Design.** Prior work has shown that setting appropriate task difficulty is critical for promoting effective learning in reasoning systems [\\\\(Zeng et al.,](#page-18-1) [2025b\\\\)](#page-18-1). Motivated by this, we design a reward function for the proposer that encourages generation of tasks\\n\\n![](_page_4_Figure_1.jpeg)\\n\\n<span id=\"page-4-0\"></span>*Figure 4.* **Absolute Zero Reasoner Training Overview.** At every iteration, Absolute Zero Reasoner first **PROPOSES** a batch of tasks, conditioned on past self-generated triplets stored in a buffer and a particular task type: abduction, deduction, or induction (Section [3.2\\\\)](#page-5-0). From these generated tasks, Python is used to filter and construct valid code-based reasoning questions. A learnability reward *r*propose is also calculated for each proposed task as defined in Equation [\\\\(4\\\\)](#page-4-1). The Absolute Zero Reasoner then **SOLVES** the batch of reasoning questions. Python is used again to verify the generated responses and compute the accuracy reward *r*solve as described in Equation [\\\\(5\\\\)](#page-4-2). Finally, the Absolute Zero Reasoner is jointly updated using both *r*propose and *r*solve across all three task types, using TRR++ (Section [3.3.5\\\\)](#page-7-0).\\n\\nwith meaningful learning potential\u2014neither too easy nor unsolvable for the current solver. Concretely, we use the same language model in its solver role to estimate the *learnability* of a proposed task, a similar type of reward used in unsupervised environment design literature [\\\\(Sukhbaatar et al.,](#page-16-5) [2018\\\\)](#page-16-5). We perform *n* Monte Carlo rollouts of the solver and compute the average success rate: *r*\u00afsolve = 1 *n* P*<sup>N</sup> <sup>i</sup>*=1 *r* (*i*) solve. The proposer\\'s reward is then defined as:\\n\\n$$r\\\\_{\\\\text{propose}} = \\\\begin{cases} 0, & \\\\text{if } \\\\bar{r}\\\\_{\\\\text{solve}} = 0 \\\\text{ or } \\\\bar{r}\\\\_{\\\\text{solve}} = 1\\\\\\\\ 1 - \\\\bar{r}\\\\_{\\\\text{solve}}, & \\\\text{otherwise,} \\\\end{cases}$$\\n(4)\\n\\nThe intuition is that if a task is either trivial to solve (*r*\u00afsolve = 1) or unsolvable (*r*\u00afsolve = 0), the task provides little to no learning signal for the proposer. In contrast, tasks of moderate difficulty, where the solver occasionally succeeds are rewarded the most, as they offer the richest feedback and greatest potential for learning.\\n\\nFor the solver, we assign a simple binary reward based on the correctness of its final output,\\n\\n<span id=\"page-4-2\"></span><span id=\"page-4-1\"></span>\\n$$r\\\\_{\\\\text{solve}} = \\\\mathbb{I}\\\\_{(y=y^\\\\*)},\\\\tag{5}$$\\n\\nwhere *y \u22c6* is the ground-truth answer, and equality is evaluated based on value equality in Python.\\n\\nWith the primary rewards for the proposing and solving roles defined, we adopt the following composite reward structure, which integrates *r*propose and *r*solve with a format-aware penalty inspired by [DeepSeek-AI et al.](#page-13-0) [\\\\(2025\\\\)](#page-13-0):\\n\\n$$R(y\\\\_{\\\\pi}) = \\\\begin{cases} r\\\\_{\\\\text{node}} & \\\\text{if the response is passable, role} \\\\in \\\\{ \\\\text{propose, solve} \\\\} \\\\\\\\ -0.5 & \\\\text{if the response is wrong but well-formation.} \\\\\\\\ -1 & \\\\text{if the answer has formatting errors.} \\\\end{cases}$$\\n (6)\\n\\nwhere *y<sup>\u03c0</sup>* is the response of the language model. The main format that the proposing and solving tasks need to follow is the DeepSeek R1 <think> and <answer> format, as shown in Figure [33.](#page-38-0) Moreover, for the proposer, the reward criterion for format goes beyond simply following the XML structure. As detailed in Section [3.3.3,](#page-6-1) only responses that produce valid triplets and pass the filtering stage are considered to be correctly formatted.\\n\\n#### <span id=\"page-5-0\"></span>**3.2. Learning Different Modes of Reasoning: Deduction, Induction, and Abduction Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-3-1\\\\\"></span>**3.1. Two Roles in One: Proposer and Solver**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"<span id=\\\\\"page-5-0\\\\\"></span>**3.2. Learning Different Modes of Reasoning: Deduction, Induction, and Abduction Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nAZR uses code executor as both a flexible interface and a verifiable environment. This setup enables automatic construction, execution, and validation of code reasoning tasks [\\\\(Stuart,](#page-16-4) [2015;](#page-16-4) [Aryabumi et al.,](#page-13-3) [2024\\\\)](#page-13-3). Give program space P, input space I and output space O of a coding language, we define an AZR reasoning task as a triplet (*p, i, o*), where *<sup>p</sup>* <sup>\u2208</sup> <sup>P</sup> is a program, *<sup>i</sup>* <sup>\u2208</sup> <sup>I</sup> is an input, and *<sup>o</sup>* <sup>\u2208</sup> <sup>O</sup> is the corresponding output produced by running program on input, *o* = *p*(*i*). AZR learns by reasoning about different parts of this task triplet, using three distinct core reasoning modes, each of which focuses on inferring one part of the triplet given the others: **3.2. Learning Diferent Modes of Reasoning: Deduction, Induction, and Abduction** AZR uses code executor as both a fexible interface and a verifable environment. This setup enables automatic construction, execution, and validation of reasoning tasks (Stuart, 2015; Aryabumi et al., 2024). Give program space P, input space I and output space O of a coding language, we defne an AZR reasoning task as a triplet (*p, i, o*), where *p* \u2192 P is a program, *i* \u2192 I is an input, and *o* \u2192 O is the corresponding output produced by running program on input, *o* = *p*(*i*). AZR learns by reasoning about diferent parts of this task\\n\\n- 1. **Deduction**: predicting the output *o* given a program *p* and input *i*, capturing step-by-step logical reasoning. triplet, using three distinct core reasoning modes, each of which focuses on inferring one part of the triplet given the others:\\n\\t- As a *proposer*, AZR is conditioned on the task type *<sup>\u03b1</sup>* <sup>=</sup> deduction and *<sup>K</sup>* reference examples from the deduction buffer <sup>D</sup>deduction (all task buffers are outlined in Section 3.3), and generates a pair (*p, i*). The environment *e* then executes *p*(*i*) to compute *o*, completing the triplet (*p, i, o*), which is added to the buffer if non-error output was produced. 1. **Deduction**: predicting the output *o* given a program *p* and input *i*, capturing step-by-step logical reasoning. \u2022 As a *proposer*, AZR is conditioned on [the](#page-5-1) task type *\u03b1* = deduction and *K* reference examples from the deduction bufer Ddeduction (all task bufers are outlined in Section 3.3), and generates a pair (*p, i*). The environment *e* then executes *p*(*i*) to compute *o*,\\n\\t- As a *solver*, the model receives (*p, i*) and predicts the output *o\u03c0*. The predicted output is verified using type-aware value equality in python to account for possible variations (such as set ordering or fractions). completing the triplet (*p, i, o*), which is added to the bufer if non-error output was produced. \u2022 As a *solver*, the model receives (*p, i*) and predicts the output *o\u03c0*. The predicted output is verifed using type-aware value equality\\n- 2. **Abduction**: inferring a plausible input *i* given the program *p* and an output *o*, resembling trial-and-error or online search. in python to account for possible variations (such as set ordering or fractions).\\n\\t- As a *proposer*, the policy *\u03c0* propose\\'s input and output is almost the same as the proposer for the deduction task, except that the task type *\u03b1* = abduction is changed as an input. The model generates a pair (*p, i*) conditioned on *\u03b1* and reference examples. Then we executes *p*(*i*) and get the triplet (*p, i, o*). 2. **Abduction**: inferring a plausible input *i* given the program *p* and an output *o*, resembling trial-and-error or online search. \u2022 As a *proposer*, the policy *\u03c0*propose\\'s input and output is almost the same as the proposer for the deduction task, except that the task type *\u03b1* = abduction is changed as an input. The model generates a pair (*p, i*) conditioned on *\u03b1* and reference examples. Then we\\n\\t- As a *solver*, the model receives (*p, o*) and predicts *i\u03c0*. The solution is verified by checking whether *p*(*i\u03c0*) = *o*. Since programs may not be bijective, we use *output* value equivalence rather than requiring exact input matches. executes *p*(*i*) and get the triplet (*p, i, o*). \u2022 As a *solver*, the model receives (*p, o*) and predicts *i\u03c0*. The solution is verifed by checking whether *p*(*i\u03c0*) = *o*. Since programs may not be bijective, we use *output* value equivalence rather than requiring exact input matches.\\n- 3. **Induction:** synthesizing a program *<sup>p</sup>* from a set of in-out examples {(*<sup>i</sup> n , o<sup>n</sup>* )}, requiring generalization from partial information. 3. **Induction:** synthesizing a program *p* from a set of in-out examples {(*i <sup>n</sup>, o<sup>n</sup>*)}, requiring generalization from partial information.\\n\\t- As a *proposer*, AZR samples a valid program *<sup>p</sup>* from <sup>D</sup>abduction \u222a Ddeduction, generates *<sup>N</sup>* new inputs and a message *<sup>m</sup>*, and uses the environment to compute corresponding outputs. This forms an extended task representation (*p,* {(*<sup>i</sup> n , o<sup>n</sup>* )}*, m*), which is stored in the induction buffer <sup>D</sup>induction. Since infinitely many functions can map the inputs to the outputs, making the induction task under-constrained, the message *m* helps properly condition the problem for the solver. \u2022 As a *proposer*, AZR samples a valid program *p* from Dabduction \u222aDdeduction, generates *N* new inputs and a message *m*, and uses the environment to compute corresponding outputs. This forms an extended task representation (*p,* {(*i <sup>n</sup>, o<sup>n</sup>*)}*, m*), which is stored in the induction bufer Dinduction. Since infnitely many functions can map the inputs to the outputs, making the induction task under-constrained, the message *m* helps properly condition the problem for the solver.\\n\\t- As a *solver*, the model is shown the first half of the input-output pairs and the message *m*, and must synthesize a program *p<sup>\u03c0</sup>* that correctly maps the remaining hidden inputs to their outputs. The use of held-out examples discourages overfitting through if-else logic and promotes generalized induction. \u2022 As a *solver*, the model is shown the frst half of the input-output pairs and the message *m*, and must synthesize a program *p<sup>\u03c0</sup>* that correctly maps the remaining hidden inputs to their outputs. The use of held-out examples discourages overftting through if-else logic and promotes generalized induction.\\n\\nEach reasoning task type leverages code as an expressive and verifable medium, aligning with the Absolute Zero Paradigm\\'s goals of fully selfimproving systems in open-ended domains (DeepSeek-AI et al., 2025; Lambert et al., 2024). All prompts used by three diferent task types and two types of roles within a task type are shown in Figures 34 to 39. Next, we outline exact details of our algorithm. Each reasoning task type leverages code as an expressive and verifiable medium, aligning with the Absolute Zero Paradigm\\'s goals of fully selfimproving systems in open-ended domains [\\\\(DeepSeek-AI et al.,](#page-13-0) [2025;](#page-13-0) [Lambert et al.,](#page-15-0) [2024\\\\)](#page-15-0). All prompts used by three different task types and two types of roles within a task type are shown in Figures [34](#page-39-0) to [39.](#page-43-0) Next, we outline exact details of our algorithm.\\n\\n#### <span id=\"page-5-1\"></span>**3.3. Absolute Zero Reasoner Learning Algorithm 3.3. Absolute Zero Reasoner Learning Algorithm**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-3-1\\\\\"></span>**3.1. Two Roles in One: Proposer and Solver**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"<span id=\\\\\"page-5-1\\\\\"></span>**3.3. Absolute Zero Reasoner Learning Algorithm 3.3. Absolute Zero Reasoner Learning Algorithm**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nIn this section, we will discuss details of our AZR self-play algorithm, including initialization of bufers 3.3.1, usage of thse bufers 3.3.2, construction of valid tasks 3.3.3, validating solutions 3.3.4, and fn[ally ad](#page-6-2)vantage estimator calculation 3.3.5. We outline the o[verall](#page-7-1) recipe of the self-play procedure of AZR in [Algor](#page-7-0)ithm 1. In this section, we will discuss details of our AZR self-play algorithm, including initialization of buffers [3.3.1,](#page-5-2) usage of thse buffers 3.3.2, construction of valid tasks [3.3.3,](#page-6-1) validating solutions 3.3.4, and finally advantage estimator calculation 3.3.5. We outline the overall recipe of the self-play procedure of AZR in Algorithm [1.](#page-6-0)\\n\\n#### <span id=\"page-5-2\"></span>3.3.1. BUFFER INITIALIZATION To initialize AZR self-play, we frst generate a seed set of valid triplets using 3.3.1. Buffer Initialization\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-3-1\\\\\"></span>**3.1. Two Roles in One: Proposer and Solver**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"<span id=\\\\\"page-5-2\\\\\"></span>3.3.1. BUFFER INITIALIZATION To initialize AZR self-play, we frst generate a seed set of valid triplets using 3.3.1. Buffer Initialization\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nthe base language model. Each prompt samples up to *K* triplets from the current seed bufer Dseed as references. When Dseed is empty at time 0, we fall back to the zero triplet show in Figure 5. During the seeding stage, we use the same proposer prompts detailed [in](#page-5-3) Figures 34 to 36. First, for deduction and abduction tasks, the LLM is prompted to generate To initialize AZR self-play, we first generate a seed set of valid triplets using the base language model. Each prompt samples up to *K* triplets from the current seed buffer <sup>D</sup>seed as references. When <sup>D</sup>seed is empty at time 0, we fall back to the zero triplet show in Figure 5. During the seeding stage, we use the same proposer prompts detailed in Figures [34](#page-39-0) to [36.](#page-41-0)\\n\\n(*p, i*) pairs, which are fltered, executed, and stored as valid triplets. We initialize <sup>D</sup><sup>0</sup> abduction <sup>=</sup> <sup>D</sup><sup>0</sup> deduction = Dseed, where |Dseed| = *B* \u00d7 *S*, where First, for deduction and abduction tasks, the LLM is prompted to generate (*p, i*) pairs, which are filtered, executed, and stored as valid triplets. We\\n\\n**Program Triplet Input:** \"Hello World\" <sup>1</sup> **def** f(x): <sup>2</sup> **return** x **Output:** \"Hello World\"\\n\\n<span id=\"page-5-3\"></span>Figure 5. **The Seed AZR Zero Triplet.** The above identity function triplet was the only triplet provided to AZR to initiate its self-bootstrap propose-and-solve RLVR loop. We note that the base LLM is fully capable of initiating the AZR loop without any seed program; its inclusion illustrates our approach\\'s fexibility: we can optionally initialize seed programs with existing datasets of varying complexity, and we initialized ours with the simplest program. *Figure 5.* **The Seed AZR Zero Triplet.** The above identity function triplet was the only triplet provided to AZR to initiate its self-bootstrap propose-and-solve RLVR loop. We note that the base LLM is fully capable of initiating the AZR loop without any seed program; its inclusion illustrates our approach\\'s flexibility: we can optionally initialize seed programs with existing datasets of varying complexity, and we initialized ours with the simplest program.\\n\\n*B* is the batch size, and *S* = 4 is a factor we fx in all experiments. All seed triplet\\'s program are stripped of global variables and comments (Appendix C), but subsequent iterations of adding new triplets to the bufers are un[alte](#page-48-0)red. No model updates occur during this phase. Similarly, to initialize the induction bufer, we sample programs from Dseed, generate matching input sets and messages, and collect valid examples until |D<sup>0</sup> induction| = *B* \u00d7 *S*. initialize <sup>D</sup> 0 abduction = D 0 deduction <sup>=</sup> <sup>D</sup>seed, where |Dseed<sup>|</sup> <sup>=</sup> *<sup>B</sup>* <sup>\u00d7</sup> *<sup>S</sup>*, where *<sup>B</sup>* is the batch size, and *<sup>S</sup>* = 4 is a factor we fix in all experiments. All seed triplet\\'s program are stripped of global variables and comments (Appendix D), but subsequent iterations of adding new triplets to the buffers are unaltered. No model updates occur during this phase. Similarly, to initialize the induction buffer, we sample programs from <sup>D</sup>seed, generate matching input sets and messages, and collect valid examples until |D<sup>0</sup> induction<sup>|</sup> <sup>=</sup> *<sup>B</sup>* <sup>\u00d7</sup> *<sup>S</sup>*.\\n\\n<span id=\"page-6-0\"></span>\\n\\n| Algorithm 1                      | Self-Play Training of Absolute Zero Reasoner (AZR)              |                                                      |                           |\\n|----------------------------------|-----------------------------------------------------------------|------------------------------------------------------|---------------------------|\\n| Require:                         | Pretrained base LLM<br>\u03c0\u03b8; batch size<br>B; #references         | K; iterations<br>T                                   |                           |\\n| 1:<br>Dded,<br>Dabd,<br>Dind     | \u2190 InitSeeding(\u03c0\u03b8)                                               |                                                      | see \u00a73.3.1<br>\u25b7           |\\n| to<br>2:<br>\u2190 1<br>for<br>t<br>T | do                                                              |                                                      |                           |\\n| 3:<br>for<br>\u2190 1<br>b            | to<br>do<br>B                                                   | \u25b7                                                    | PROPOSE PHASE             |\\n| 4:<br>p<br>\u223c Dabd                | \u222a Dded                                                          | sample a program for induction task proposal<br>\u25b7    |                           |\\n| N<br>n<br>5:<br><br>i<br>\u03c0       | propose<br>(ind, p)<br>n=1, m\u03c0<br>\u2190 \u03c0<br>\u03b8                      | generate<br>\u25b7<br>N                                   | inputs and a description  |\\n| n<br>6:<br><br>(i<br>if<br>\u03c0     | N<br>n=1 \u2190 ValidateByExecuting<br>, on<br>)<br>p,<br>{i<br>\u03c0    | syntax<br>n<br>\u03c0},<br>then<br>\u25b7                      | validate I/Os, see \u00a73.3.3 |\\n| 7:<br>Dind                       | n<br>, on<br><br>(p,<br>{(i<br>)}, m\u03c0)<br>\u2190 Dind<br>\u222a<br>\u03c0<br>\u03c0 | \u25b7                                                    | update induction buffer   |\\n| 8:<br>for<br>\u03b1                   | \u2208 {ded,<br>abd}<br>do                                           |                                                      |                           |\\n| 9:<br>                           | K<br>pk, ik, ok<br>k=1 \u223c D\u03b1                                     | sample<br>\u25b7<br>K                                     | reference examples        |\\n| 10:                              | propose<br><br><br>(p\u03c0, i\u03c0)<br>{(pk, ik, ok)}<br>\u2190 \u03c0<br>\u03b1,<br>\u03b8 | \u25b7                                                    | propose new task          |\\n| 11:<br>if                        | \u2190 ValidateByExecuting<br>o\u03c0<br>p\u03c0, i\u03c0,                          | syntax,safety,determinism<br>then                    | see \u00a73.3.3<br>\u25b7           |\\n| 12:                              | <br>(p\u03c0, i\u03c0, o\u03c0)<br>D\u03b1 \u2190 D\u03b1 \u222a                                   | if valid, update deduction or abduction buffers<br>\u25b7 |                           |\\n| 13:<br>for all<br>\u03b1              | \u2208 {ded,<br>abd,<br>ind}<br>do                                   | \u25b7                                                    | SOLVE PHASE               |\\n| (x, y\u22c6<br>14:                    | \u2190 SamplePrepareTasks<br>D\u03b1, B, t<br>)                           | \u25b7 x, y\u22c6 prepared based on                            | \u03b1, see \u00a73.3.3&3.3.4       |\\n| 15:<br>y\u03c0<br>\u223c \u03c0                 | solve<br>(x)<br>\u03b8                                               |                                                      |                           |\\n| 16:<br>Reward:                   | Use proposed task triplets and solved answers to get            | &<br>rpropose<br>rsolve                              | see \u00a73.1<br>\u25b7             |\\n| 17:<br>RL update:                | use Task Relative REINFORCE++ to update                         | \u03c0\u03b8                                                   | see \u00a73.3.5<br>\u25b7           |\\n\\nAlgorithm 1,Self-Play Training of Absolute Zero Reasoner (AZR),,\\r\\nRequire:,Pretrained base LLM \u03c0\u03b8; batch size B; #references,K; iterations T,\\r\\n\"1: Dded, Dabd, Dind\",\u2190 InitSeeding(\u03c0\u03b8),,see \u00a73.3.1 \u25b7\\r\\nto 2: \u2190 1 for t T,do,,\\r\\n3: for \u2190 1 b,to do B,\u25b7,PROPOSE PHASE\\r\\n4: p \u223c Dabd,\u222a Dded,sample a program for induction task proposal \u25b7,\\r\\nN n 5: i \u03c0,\"propose (ind, p) n=1, m\u03c0 \u2190 \u03c0 \u03b8\",generate \u25b7 N,inputs and a description\\r\\nn 6: (i if \u03c0,\"N n=1 \u2190 ValidateByExecuting , on ) p, {i \u03c0\",\"syntax n \u03c0}, then \u25b7\",\"validate I/Os, see \u00a73.3.3\"\\r\\n7: Dind,\"n , on (p, {(i )}, m\u03c0) \u2190 Dind \u222a \u03c0 \u03c0\",\u25b7,update induction buffer\\r\\n8: for \u03b1,\"\u2208 {ded, abd} do\",,\\r\\n9: ,\"K pk, ik, ok k=1 \u223c D\u03b1\",sample \u25b7 K,reference examples\\r\\n10:,\"propose (p\u03c0, i\u03c0) {(pk, ik, ok)} \u2190 \u03c0 \u03b1, \u03b8\",\u25b7,propose new task\\r\\n11: if,\"\u2190 ValidateByExecuting o\u03c0 p\u03c0, i\u03c0,\",\"syntax,safety,determinism then\",see \u00a73.3.3 \u25b7\\r\\n12:,\" (p\u03c0, i\u03c0, o\u03c0) D\u03b1 \u2190 D\u03b1 \u222a\",\"if valid, update deduction or abduction buffers \u25b7\",\\r\\n13: for all \u03b1,\"\u2208 {ded, abd, ind} do\",\u25b7,SOLVE PHASE\\r\\n\"(x, y\u22c6 14:\",\"\u2190 SamplePrepareTasks D\u03b1, B, t )\",\"\u25b7 x, y\u22c6 prepared based on\",\"\u03b1, see \u00a73.3.3&3.3.4\"\\r\\n15: y\u03c0 \u223c \u03c0,solve (x) \u03b8,,\\r\\n16: Reward:,Use proposed task triplets and solved answers to get,& rpropose rsolve,see \u00a73.1 \u25b7\\r\\n17: RL update:,use Task Relative REINFORCE++ to update,\u03c0\u03b8,see \u00a73.3.5 \u25b7\\r\\n{\\n \"headers\": [\\n \"Algorithm 1\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\",\\n \"\",\\n \"\"\\n ],\\n \"rows\": [\\n {\\n \"Algorithm 1\": \"Require:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"Pretrained base LLM \u03c0\u03b8; batch size B; #references\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"1: Dded, Dabd, Dind\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2190 InitSeeding(\u03c0\u03b8)\",\\n \"\": \"see \u00a73.3.1 \u25b7\"\\n },\\n {\\n \"Algorithm 1\": \"to 2: \u2190 1 for t T\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"do\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"3: for \u2190 1 b\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"to do B\",\\n \"\": \"PROPOSE PHASE\"\\n },\\n {\\n \"Algorithm 1\": \"4: p \u223c Dabd\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u222a Dded\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"N n 5: i \u03c0\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"propose (ind, p) n=1, m\u03c0 \u2190 \u03c0 \u03b8\",\\n \"\": \"inputs and a description\"\\n },\\n {\\n \"Algorithm 1\": \"n 6: (i if \u03c0\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"N n=1 \u2190 ValidateByExecuting , on ) p, {i \u03c0\",\\n \"\": \"validate I/Os, see \u00a73.3.3\"\\n },\\n {\\n \"Algorithm 1\": \"7: Dind\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"n , on (p, {(i )}, m\u03c0) \u2190 Dind \u222a \u03c0 \u03c0\",\\n \"\": \"update induction buffer\"\\n },\\n {\\n \"Algorithm 1\": \"8: for \u03b1\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2208 {ded, abd} do\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"9: \",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"K pk, ik, ok k=1 \u223c D\u03b1\",\\n \"\": \"reference examples\"\\n },\\n {\\n \"Algorithm 1\": \"10:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"propose (p\u03c0, i\u03c0) {(pk, ik, ok)} \u2190 \u03c0 \u03b1, \u03b8\",\\n \"\": \"propose new task\"\\n },\\n {\\n \"Algorithm 1\": \"11: if\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2190 ValidateByExecuting o\u03c0 p\u03c0, i\u03c0,\",\\n \"\": \"see \u00a73.3.3 \u25b7\"\\n },\\n {\\n \"Algorithm 1\": \"12:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \" (p\u03c0, i\u03c0, o\u03c0) D\u03b1 \u2190 D\u03b1 \u222a\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"13: for all \u03b1\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2208 {ded, abd, ind} do\",\\n \"\": \"SOLVE PHASE\"\\n },\\n {\\n \"Algorithm 1\": \"(x, y\u22c6 14:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2190 SamplePrepareTasks D\u03b1, B, t )\",\\n \"\": \"\u03b1, see \u00a73.3.3&3.3.4\"\\n },\\n {\\n \"Algorithm 1\": \"15: y\u03c0 \u223c \u03c0\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"solve (x) \u03b8\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"16: Reward:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"Use proposed task triplets and solved answers to get\",\\n \"\": \"see \u00a73.1 \u25b7\"\\n },\\n {\\n \"Algorithm 1\": \"17: RL update:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"use Task Relative REINFORCE++ to update\",\\n \"\": \"see \u00a73.3.5 \u25b7\"\\n }\\n ]\\n}# <span id=\"page-6-2\"></span>3.3.2. Task Proposal Inputs and Buffer Management\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-6-2\\\\\"></span>3.3.2. Task Proposal Inputs and Buffer Management\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nDuring the actual self-play stage of AZR, we use the task buffer in three ways. *First*, for the proposer of abduction and deduction tasks, we uniformly sample *K* past triplets from the buffer, present them as in-context examples to the proposer and let it generate a new task. The design is to show it past examples, and prompt it to generate a different one to promote diversity [\\\\(Zhao et al.,](#page-18-2) [2025a\\\\)](#page-18-2). *Second*, we sample one triplet from the union of abduction and deduction buffers <sup>D</sup>abd <sup>S</sup> <sup>D</sup>ded, and present the program *<sup>p</sup>* from that triplet to the induction proposer to generate a set of *<sup>N</sup>* matching inputs {*<sup>i</sup> n* } and a natural language message *<sup>m</sup>*. *Lastly*, to maintain stable training, if a batch of solver problems contains fewer than *B* valid proposed tasks (proposer not adhering to formatting), we fill the remainder by uniformly sampling from the corresponding task buffer of previously validated triplets.\\n\\nThe buffer grows for abduction and deduction tasks whenever *\u03c0* propose a valid triplet (*p, i, o*), regardless if it gets any task reward. Similarly, for induction tasks, all valid triplets (*p,* {*<sup>i</sup> n , o<sup>n</sup>* })*, m* are added to the buffer.\\n\\n# <span id=\"page-6-1\"></span>3.3.3. Constructing Valid Tasks\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-6-1\\\\\"></span>3.3.3. Constructing Valid Tasks\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Proposal Task Validation.** We first describe how we construct valid tasks from the proposals generated by the policy *\u03c0*. For *deduction and abduction* tasks, each proposal consists of a program and an input (*p, i*). To validate the task, we use the task validation procedure (steps shown below) on the input to obtain the correct output *o*, resulting in a complete triplet (*p, i, o*). For *induction* tasks, given a program *<sup>p</sup>* the policy proposes a set of inputs {*<sup>i</sup> n* } and message *<sup>m</sup>*. We also use the task validation procedure on each of the input *<sup>i</sup> n* in the set to obtain a corresponding output *o n* , forming a set of input-output pairs {*<sup>i</sup> n , o<sup>n</sup>* }. We do not impose any constraints on *<sup>m</sup>*. The resulting task is considered valid only when all inputs yield valid outputs and the formatting requirements are satisfied. The **task validation procedure** entails:\\n\\n- 1. *Program Integrity.* We first use Python to run the program *p* with the input *i*. If no errors are raised and something is returned, we then gather the output *o* of that (*p, i*) pair and determine that the program at least has valid syntax.\\n- 2. *Program Safety.* We also check whether a program is safe for execution by restricting the use of certain sensitive packages that might cause harm to the Python environment, *i.e*., os.sys, sys, shutil. The list of packages used to filter out invalid programs is provided in Figure [8.](#page-21-0) This list is also included in the instructions when prompting the language model to generate questions. See Figures [34](#page-39-0) to [36.](#page-41-0)\\n- 3. *Check for Determinism.* In our setting, we only consider *deterministic programs*, *i.e*., *<sup>p</sup>* <sup>\u2208</sup> <sup>P</sup>deterministic <sup>\u2282</sup> <sup>P</sup>, where <sup>P</sup> is the space of all valid programs and I is the space of all valid inputs:\\n\\n<span id=\"page-7-2\"></span>\\n$$\\\\forall p \\\\in \\\\mathscr{P}\\\\_{\\\\text{deterministic}}, \\\\ \\\\forall i \\\\in \\\\mathscr{I}, \\\\ \\\\left( \\\\lim\\\\_{j \\\\to \\\\infty} p(i)^{(1)} = p(i)^{(2)} = \\\\dots = p(i)^{(j)} \\\\right), \\\\tag{7}$$\\n\\nwhere (*j*) indexes repeated independent executions of the program. That is, for all inputs *i*, the output of *p*(*i*) remains identical with any independent execution of the program. A *valid program/input/output triplet* (*p, i, o*) is defined such that *o* = *p*(*i*), where *<sup>p</sup>* <sup>\u2208</sup> <sup>P</sup>deterministic.\\n\\nSince the output of probabilistic programs can vary on every individual run, it is non-trivial to use verifiable functions to evaluate the correctness of an answer. Therefore, to keep the verifier simple, we restrict the valid programs generated by the learner to the class of deterministic programs. We believe that stochastic programs can encompass a larger class of behaviors and are important and promising to include in future versions of AZR.\\n\\nTo implement the filtering of invalid probabilistic programs, and following the definition of a deterministic program highlighted in Equation [\\\\(7\\\\)](#page-7-2), we approximate this procedure by independently running the program *j* finite times and checking that all the outputs are equal. For computational budget reasons, we fixed *j* = 2 for all experiments.\\n\\n**Solving Task Construction.** If a task proposal passes these three checks, we deem it a valid task and apply appropriate procedures to present part of the triplet to the solver. Specifically, we set *<sup>x</sup>* = (*p, i*)for deduction; *<sup>x</sup>* = (*p, o*)for abduction; and *<sup>x</sup>* = ({*<sup>i</sup> n , o<sup>n</sup>* } *N//*2 *<sup>n</sup>*=1 *, m*) for induction, where half of the tests cases and a program description *m* is used. We use all valid tasks from timestep *t*; if the batch *B* is not full, we uniformly sample from previously validated tasks to fill the batch.\\n\\n# <span id=\"page-7-1\"></span>3.3.4. Answer Verification\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-7-1\\\\\"></span>3.3.4. Answer Verification\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nFor abduction task, we receive *i<sup>\u03c0</sup>* from the solver policy, then we equivalence match using *p*(*i\u03c0*) = *p*(*i \u22c6* ), where <sup>\u2217</sup> refers to the privileged gold information. The reason we do not just match *i<sup>\u03c0</sup>* and *i \u22c6* is because *p* is not necessarily bijective. For deduction task, we match *o<sup>\u03c0</sup>* = *o \u22c6* . For induction, we match all({*p\u03c0*(*<sup>i</sup> \u22c6 <sup>n</sup>*) = *o \u22c6 <sup>n</sup>*} *<sup>N</sup>* ). This part might be convoluted to explain in language, therefore we recommend the reader to see how we did abduction, deduction and induction verification in code in Figures [10](#page-22-0) to [12,](#page-22-1) respectively.\\n\\n# <span id=\"page-7-0\"></span>3.3.5. Task-Relative REINFORCE++\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-7-0\\\\\"></span>3.3.5. Task-Relative REINFORCE++\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nSince AZR trains the combination of roles and task types, it operates in a multitask reinforcement learning setup [\\\\(Zhang & Yang,](#page-18-3) [2021;](#page-18-3) [Zhao et al.,](#page-18-4) [2022;](#page-18-4) [Wang et al.,](#page-16-6) [2023;](#page-16-6) [Yue et al.,](#page-17-2) [2023\\\\)](#page-17-2). Instead of computing a single global baseline as in REINFORCE++ [\\\\(Hu,](#page-14-2) [2025\\\\)](#page-14-2) (Appendix [A\\\\)](#page-20-0), we compute separate baselines for each of the six task-role configurations. This can be viewed as an interpolation between per-question baselines, as in GRPO [\\\\(Shao et al.,](#page-16-7) [2024\\\\)](#page-16-7), and a global baseline, allowing for more structured variance reduction tailored to each task setup. We refer to this variant as **Task-Relative REINFORCE++ (TRR++)**. The normalized advantage *A* norm is computed as:\\n\\n$$A\\\\_{\\\\text{task,role}}^{\\\\text{norm}} = \\\\frac{r - \\\\mu\\\\_{\\\\text{task,role}}}{\\\\sigma\\\\_{\\\\text{task,role}}}, \\\\quad \\\\text{task} \\\\in \\\\{\\\\text{ind,ded,abd}\\\\}, \\\\text{role} \\\\in \\\\{\\\\text{propose,solve}\\\\},\\\\tag{8}$$\\n\\nwhere the mean and standard deviation are computed *within each task type and role*, yielding six baselines.\\n\\n# **4. Experiments**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**4. Experiments**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n### **4.1. Experiment Setup**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**4. Experiments**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"**4.1. Experiment Setup**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Training Details.** For all experiments, we initialize the buffers as described in Section [3.1.](#page-3-1) AZR models are trained using a batch size of <sup>64</sup> <sup>\u00d7</sup> <sup>6</sup> (2 roles <sup>\u00d7</sup> 3 task types). We use constant learning rate= 1*e*\u2212<sup>6</sup> and the AdamW optimizer [\\\\(Loshchilov & Hutter,](#page-15-6) [2019\\\\)](#page-15-6). Complete list of hyperparameters is provided in Table [3.](#page-20-1)\\n\\nFor the main experiments, we train AZR models on Qwen2.5-7B and Qwen2.5-7B-Coder, resulting in Absolute Zero Reasoner-base-7B and Absolute Zero Reasoner-Coder-7B, respectively. Additional experiments include training Qwen2.5-Coder-3B, Qwen2.5-Coder-14B, Qwen2.5-14B, Llama-3.1-8B [\\\\(Yang et al.,](#page-17-3) [2024a;](#page-17-3) [Hui et al.,](#page-14-3) [2024;](#page-14-3) [Dubey et al.,](#page-13-4) [2024\\\\)](#page-13-4).\\n\\n**Evaluation Protocol.** To evaluate our models, we divide the datasets into in-distribution (ID) and out-of-distribution (OOD) categories. For OOD benchmarks, which we emphasize more, we further categorize them into coding and mathematical reasoning benchmarks. For coding tasks, we evaluate using Evalplus [\\\\(Liu et al.,](#page-15-7) [2023\\\\)](#page-15-7) on the HumanEval+ and MBPP+ benchmarks, as well as LiveCodeBench Generation (v1-5, May 23-Feb 25) [\\\\(Jain et al.,](#page-14-4) [2024\\\\)](#page-14-4). For mathematical reasoning, we utilize six standard benchmarks commonly used in recent zero-shot trained reasoners: AIME\\'24, AIME\\'25, OlympiadBench [\\\\(He et al.,](#page-14-5) [2024\\\\)](#page-14-5), Minerva, Math500 [\\\\(Hendrycks et al.,](#page-14-6) [2021\\\\)](#page-14-6), and AMC\\'23. For ID benchmarks, we use CruxEval-I(nput), CruxEval-O(utput), and LiveCodeBench-Execution [\\\\(Gu et al.,](#page-14-7) [2024;](#page-14-7) [Jain et al.,](#page-14-4) [2024\\\\)](#page-14-4), which assess reasoning capabilities regarding the input and output of programs [\\\\(Li et al.,](#page-15-8) [2025\\\\)](#page-15-8). *Greedy decoding* is used for all baseline methods and AZR results to ensure reproducibility.\\n\\n**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n\\n| Model                                               | Base  | #data | HEval+       | MBPP+        | LCBv1-5       | AME24         | AME25        | AMC        | M500       | Minva               | Olypiad | CAvg                | MAvg      | AVG                |\\n|-----------------------------------------------------|-------|-------|--------------|--------------|---------------|---------------|--------------|------------|------------|---------------------|---------|---------------------|-----------|--------------------|\\n| Base Models                                         |       |       |              |              |               |               |              |            |            |                     |         |                     |           |                    |\\n| Qwen2.5-7B[73]                                      | -     | -     | 73.2         | 65.3         | 17.5          | 6.7           | 3.3          | 37.5       | 64.8       | 25.0                | 27.7    | 52.0                | 27.5      | 39.8               |\\n| Qwen2.5-7B-Ins[73]                                  | -     | -     | 75.0         | 68.5         | 25.5          | 13.3          | 6.7          | 52.5       | 76.4       | 35.7                | 37.6    | 56.3                | 37.0      | 46.7               |\\n| Qwen2.5-7B-Coder[26]                                | -     | -     | 80.5         | 69.3         | 19.9          | 6.7           | 3.3          | 40.0       | 54.0       | 17.3                | 21.9    | 56.6                | 23.9      | 40.2               |\\n| Qwen2.5-7B-Math[74]                                 | -     | -     | 61.0         | 57.9         | 16.2          | 10.0          | 16.7         | 42.5       | 64.2       | 15.4                | 28.0    | 45.0                | 29.5      | 37.3               |\\n| Zero-Style Reasoners Trained on Curated Coding Data |       |       |              |              |               |               |              |            |            |                     |         |                     |           |                    |\\n| AceCoder-RM[84]                                     | Ins   | 22k   | 79.9         | 71.4         | 23.6          | 20.0          | 6.7          | 50.0       | 76.4       | 34.6                | 36.7    | 58.3                | 37.4      | 47.9               |\\n| AceCoder-Rule[84]                                   | Ins   | 22k   | 77.4         | 69.0         | 19.9          | 13.3          | 6.7          | 50.0       | 76.0       | 37.5                | 37.8    | 55.4                | 36.9      | 46.2               |\\n| AceCoder-RM[84]                                     | Coder | 22k   | 78.0         | 66.4         | 27.5          | 13.3          | 3.3          | 27.5       | 62.6       | 29.4                | 29.0    | 57.3                | 27.5      | 42.4               |\\n| AceCoder-Rule[84]                                   | Coder | 22k   | 80.5         | 70.4         | 29.0          | 6.7           | 6.7          | 40.0       | 62.8       | 27.6                | 27.4    | 60.0                | 28.5      | 44.3               |\\n| CodeR1-LC2k[36]                                     | Ins   | 2k    | 81.7         | 71.7         | 28.1          | 13.3          | 10.0         | 45.0       | 75.0       | 33.5                | 36.7    | 60.5                | 35.6      | 48.0               |\\n| CodeR1-12k[36]                                      | Ins   | 12k   | 81.1         | 73.5         | 29.3          | 13.3          | 3.3          | 37.5       | 74.0       | 35.7                | 36.9    | 61.3                | 33.5      | 47.4               |\\n| Zero-Style Reasoners Trained on Curated Math Data   |       |       |              |              |               |               |              |            |            |                     |         |                     |           |                    |\\n| PRIME-Zero[9]                                       | Coder | 484k  | 49.4         | 51.1         | 11.0          | 23.3          | 23.3         | 67.5       | 81.2       | 37.9                | 41.8    | 37.2                | 45.8      | 41.5               |\\n| SimpleRL-Zoo[85]                                    | Base  | 8.5k  | 73.2         | 63.2         | 25.6          | 16.7          | 3.3          | 57.5       | 77.0       | 35.7                | 41.0    | 54.0                | 38.5      | 46.3               |\\n| Oat-Zero[38]                                        | Math  | 8.5k  | 62.2         | 59.0         | 15.2          | 30.0          | 16.7         | 62.5       | 80.0       | 34.9                | 41.6    | 45.5                | 44.3      | 44.9               |\\n| ORZ[23]                                             | Base  | 57k   | 80.5         | 64.3         | 22.0          | 13.3          | 16.7         | 60.0       | 81.8       | 32.7                | 45.0    | 55.6                | 41.6      | 48.6               |\\n| Absolute Zero Training w/ No Curated Data (Ours)    |       |       |              |              |               |               |              |            |            |                     |         |                     |           |                    |\\n| AZR (Ours)                                          | Base  | 0     | -1.9<br>71.3 | +3.8<br>69.1 | +7.8<br>25.3  | +6.6<br>13.3  | 13.3         | +10.0 52.5 | +15.0 74.4 | +9.6 38.2<br>+13.2  | 38.5    | +10.8 55.2          | +3.2 38.4 | +10.9 46.8<br>+7.0 |\\n| AZR (Ours)                                          | Coder | 0     | +3.0<br>83.5 | +0.3<br>69.6 | +11.8<br>31.7 | +13.3<br>20.0 | +6.7<br>10.0 | 57.5       | +17.5 72.6 | +22.6 36.4<br>+19.1 | 38.2    | +16.3 61.6+5.0 39.1 |           | +15.2 50.4+10.2    |\\n\\nModel,Base,#data,HEval+,MBPP+,LCBv1-5,AME24,AME25,AMC,M500,Minva,Olypiad,CAvg,MAvg,AVG\\r\\nBase Models,\\r\\nQwen2.5-7B[73],-,-,73.2,65.3,17.5,6.7,3.3,37.5,64.8,25.0,27.7,52.0,27.5,39.8\\r\\nQwen2.5-7B-Ins[73],-,-,75.0,68.5,25.5,13.3,6.7,52.5,76.4,35.7,37.6,56.3,37.0,46.7\\r\\nQwen2.5-7B-Coder[26],-,-,80.5,69.3,19.9,6.7,3.3,40.0,54.0,17.3,21.9,56.6,23.9,40.2\\r\\nQwen2.5-7B-Math[74],-,-,61.0,57.9,16.2,10.0,16.7,42.5,64.2,15.4,28.0,45.0,29.5,37.3\\r\\nZero-Style Reasoners Trained on Curated Coding Data,\\r\\nAceCoder-RM[84],Ins,22k,79.9,71.4,23.6,20.0,6.7,50.0,76.4,34.6,36.7,58.3,37.4,47.9\\r\\nAceCoder-Rule[84],Ins,22k,77.4,69.0,19.9,13.3,6.7,50.0,76.0,37.5,37.8,55.4,36.9,46.2\\r\\nAceCoder-RM[84],Coder,22k,78.0,66.4,27.5,13.3,3.3,27.5,62.6,29.4,29.0,57.3,27.5,42.4\\r\\nAceCoder-Rule[84],Coder,22k,80.5,70.4,29.0,6.7,6.7,40.0,62.8,27.6,27.4,60.0,28.5,44.3\\r\\nCodeR1-LC2k[36],Ins,2k,81.7,71.7,28.1,13.3,10.0,45.0,75.0,33.5,36.7,60.5,35.6,48.0\\r\\nCodeR1-12k[36],Ins,12k,81.1,73.5,29.3,13.3,3.3,37.5,74.0,35.7,36.9,61.3,33.5,47.4\\r\\nZero-Style Reasoners Trained on Curated Math Data,\\r\\nPRIME-Zero[9],Coder,484k,49.4,51.1,11.0,23.3,23.3,67.5,81.2,37.9,41.8,37.2,45.8,41.5\\r\\nSimpleRL-Zoo[85],Base,8.5k,73.2,63.2,25.6,16.7,3.3,57.5,77.0,35.7,41.0,54.0,38.5,46.3\\r\\nOat-Zero[38],Math,8.5k,62.2,59.0,15.2,30.0,16.7,62.5,80.0,34.9,41.6,45.5,44.3,44.9\\r\\nORZ[23],Base,57k,80.5,64.3,22.0,13.3,16.7,60.0,81.8,32.7,45.0,55.6,41.6,48.6\\r\\nAbsolute Zero Training w/ No Curated Data (Ours)\\r\\nAZR (Ours),Base,0,-1.9 71.3,+3.8 69.1,+7.8 25.3,+6.6 13.3,13.3,+10.0 52.5,+15.0 74.4,+9.6 38.2 +13.2,38.5,+10.8 55.2,+3.2 38.4,+10.9 46.8 +7.0\\r\\nAZR (Ours),Coder,0,+3.0 83.5,+0.3 69.6,+11.8 31.7,+13.3 20.0,+6.7 10.0,57.5,+17.5 72.6,+22.6 36.4 +19.1,38.2,+16.3 61.6+5.0 39.1,,+15.2 50.4+10.2\\r\\n{\\n \"headers\": [\\n \"Model\",\\n \"Base\",\\n \"#data\",\\n \"HEval+\",\\n \"MBPP+\",\\n \"LCBv1-5\",\\n \"AME24\",\\n \"AME25\",\\n \"AMC\",\\n \"M500\",\\n \"Minva\",\\n \"Olypiad\",\\n \"CAvg\",\\n \"MAvg\",\\n \"AVG\"\\n ],\\n \"rows\": [\\n {\\n \"Model\": \"Qwen2.5-7B[73]\",\\n \"Base\": \"-\",\\n \"#data\": \"-\",\\n \"HEval+\": \"73.2\",\\n \"MBPP+\": \"65.3\",\\n \"LCBv1-5\": \"17.5\",\\n \"AME24\": \"6.7\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"37.5\",\\n \"M500\": \"64.8\",\\n \"Minva\": \"25.0\",\\n \"Olypiad\": \"27.7\",\\n \"CAvg\": \"52.0\",\\n \"MAvg\": \"27.5\",\\n \"AVG\": \"39.8\"\\n },\\n {\\n \"Model\": \"Qwen2.5-7B-Ins[73]\",\\n \"Base\": \"-\",\\n \"#data\": \"-\",\\n \"HEval+\": \"75.0\",\\n \"MBPP+\": \"68.5\",\\n \"LCBv1-5\": \"25.5\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"6.7\",\\n \"AMC\": \"52.5\",\\n \"M500\": \"76.4\",\\n \"Minva\": \"35.7\",\\n \"Olypiad\": \"37.6\",\\n \"CAvg\": \"56.3\",\\n \"MAvg\": \"37.0\",\\n \"AVG\": \"46.7\"\\n },\\n {\\n \"Model\": \"Qwen2.5-7B-Coder[26]\",\\n \"Base\": \"-\",\\n \"#data\": \"-\",\\n \"HEval+\": \"80.5\",\\n \"MBPP+\": \"69.3\",\\n \"LCBv1-5\": \"19.9\",\\n \"AME24\": \"6.7\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"40.0\",\\n \"M500\": \"54.0\",\\n \"Minva\": \"17.3\",\\n \"Olypiad\": \"21.9\",\\n \"CAvg\": \"56.6\",\\n \"MAvg\": \"23.9\",\\n \"AVG\": \"40.2\"\\n },\\n {\\n \"Model\": \"Qwen2.5-7B-Math[74]\",\\n \"Base\": \"-\",\\n \"#data\": \"-\",\\n \"HEval+\": \"61.0\",\\n \"MBPP+\": \"57.9\",\\n \"LCBv1-5\": \"16.2\",\\n \"AME24\": \"10.0\",\\n \"AME25\": \"16.7\",\\n \"AMC\": \"42.5\",\\n \"M500\": \"64.2\",\\n \"Minva\": \"15.4\",\\n \"Olypiad\": \"28.0\",\\n \"CAvg\": \"45.0\",\\n \"MAvg\": \"29.5\",\\n \"AVG\": \"37.3\"\\n },\\n {\\n \"Model\": \"Zero-Style Reasoners Trained on Curated Coding Data\",\\n \"Base\": \"\"\\n },\\n {\\n \"Model\": \"AceCoder-RM[84]\",\\n \"Base\": \"Ins\",\\n \"#data\": \"22k\",\\n \"HEval+\": \"79.9\",\\n \"MBPP+\": \"71.4\",\\n \"LCBv1-5\": \"23.6\",\\n \"AME24\": \"20.0\",\\n \"AME25\": \"6.7\",\\n \"AMC\": \"50.0\",\\n \"M500\": \"76.4\",\\n \"Minva\": \"34.6\",\\n \"Olypiad\": \"36.7\",\\n \"CAvg\": \"58.3\",\\n \"MAvg\": \"37.4\",\\n \"AVG\": \"47.9\"\\n },\\n {\\n \"Model\": \"AceCoder-Rule[84]\",\\n \"Base\": \"Ins\",\\n \"#data\": \"22k\",\\n \"HEval+\": \"77.4\",\\n \"MBPP+\": \"69.0\",\\n \"LCBv1-5\": \"19.9\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"6.7\",\\n \"AMC\": \"50.0\",\\n \"M500\": \"76.0\",\\n \"Minva\": \"37.5\",\\n \"Olypiad\": \"37.8\",\\n \"CAvg\": \"55.4\",\\n \"MAvg\": \"36.9\",\\n \"AVG\": \"46.2\"\\n },\\n {\\n \"Model\": \"AceCoder-RM[84]\",\\n \"Base\": \"Coder\",\\n \"#data\": \"22k\",\\n \"HEval+\": \"78.0\",\\n \"MBPP+\": \"66.4\",\\n \"LCBv1-5\": \"27.5\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"27.5\",\\n \"M500\": \"62.6\",\\n \"Minva\": \"29.4\",\\n \"Olypiad\": \"29.0\",\\n \"CAvg\": \"57.3\",\\n \"MAvg\": \"27.5\",\\n \"AVG\": \"42.4\"\\n },\\n {\\n \"Model\": \"AceCoder-Rule[84]\",\\n \"Base\": \"Coder\",\\n \"#data\": \"22k\",\\n \"HEval+\": \"80.5\",\\n \"MBPP+\": \"70.4\",\\n \"LCBv1-5\": \"29.0\",\\n \"AME24\": \"6.7\",\\n \"AME25\": \"6.7\",\\n \"AMC\": \"40.0\",\\n \"M500\": \"62.8\",\\n \"Minva\": \"27.6\",\\n \"Olypiad\": \"27.4\",\\n \"CAvg\": \"60.0\",\\n \"MAvg\": \"28.5\",\\n \"AVG\": \"44.3\"\\n },\\n {\\n \"Model\": \"CodeR1-LC2k[36]\",\\n \"Base\": \"Ins\",\\n \"#data\": \"2k\",\\n \"HEval+\": \"81.7\",\\n \"MBPP+\": \"71.7\",\\n \"LCBv1-5\": \"28.1\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"10.0\",\\n \"AMC\": \"45.0\",\\n \"M500\": \"75.0\",\\n \"Minva\": \"33.5\",\\n \"Olypiad\": \"36.7\",\\n \"CAvg\": \"60.5\",\\n \"MAvg\": \"35.6\",\\n \"AVG\": \"48.0\"\\n },\\n {\\n \"Model\": \"CodeR1-12k[36]\",\\n \"Base\": \"Ins\",\\n \"#data\": \"12k\",\\n \"HEval+\": \"81.1\",\\n \"MBPP+\": \"73.5\",\\n \"LCBv1-5\": \"29.3\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"37.5\",\\n \"M500\": \"74.0\",\\n \"Minva\": \"35.7\",\\n \"Olypiad\": \"36.9\",\\n \"CAvg\": \"61.3\",\\n \"MAvg\": \"33.5\",\\n \"AVG\": \"47.4\"\\n },\\n {\\n \"Model\": \"Zero-Style Reasoners Trained on Curated Math Data\",\\n \"Base\": \"\"\\n },\\n {\\n \"Model\": \"PRIME-Zero[9]\",\\n \"Base\": \"Coder\",\\n \"#data\": \"484k\",\\n \"HEval+\": \"49.4\",\\n \"MBPP+\": \"51.1\",\\n \"LCBv1-5\": \"11.0\",\\n \"AME24\": \"23.3\",\\n \"AME25\": \"23.3\",\\n \"AMC\": \"67.5\",\\n \"M500\": \"81.2\",\\n \"Minva\": \"37.9\",\\n \"Olypiad\": \"41.8\",\\n \"CAvg\": \"37.2\",\\n \"MAvg\": \"45.8\",\\n \"AVG\": \"41.5\"\\n },\\n {\\n \"Model\": \"SimpleRL-Zoo[85]\",\\n \"Base\": \"Base\",\\n \"#data\": \"8.5k\",\\n \"HEval+\": \"73.2\",\\n \"MBPP+\": \"63.2\",\\n \"LCBv1-5\": \"25.6\",\\n \"AME24\": \"16.7\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"57.5\",\\n \"M500\": \"77.0\",\\n \"Minva\": \"35.7\",\\n \"Olypiad\": \"41.0\",\\n \"CAvg\": \"54.0\",\\n \"MAvg\": \"38.5\",\\n \"AVG\": \"46.3\"\\n },\\n {\\n \"Model\": \"Oat-Zero[38]\",\\n \"Base\": \"Math\",\\n \"#data\": \"8.5k\",\\n \"HEval+\": \"62.2\",\\n \"MBPP+\": \"59.0\",\\n \"LCBv1-5\": \"15.2\",\\n \"AME24\": \"30.0\",\\n \"AME25\": \"16.7\",\\n \"AMC\": \"62.5\",\\n \"M500\": \"80.0\",\\n \"Minva\": \"34.9\",\\n \"Olypiad\": \"41.6\",\\n \"CAvg\": \"45.5\",\\n \"MAvg\": \"44.3\",\\n \"AVG\": \"44.9\"\\n },\\n {\\n \"Model\": \"ORZ[23]\",\\n \"Base\": \"Base\",\\n \"#data\": \"57k\",\\n \"HEval+\": \"80.5\",\\n \"MBPP+\": \"64.3\",\\n \"LCBv1-5\": \"22.0\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"16.7\",\\n \"AMC\": \"60.0\",\\n \"M500\": \"81.8\",\\n \"Minva\": \"32.7\",\\n \"Olypiad\": \"45.0\",\\n \"CAvg\": \"55.6\",\\n \"MAvg\": \"41.6\",\\n \"AVG\": \"48.6\"\\n },\\n {\\n \"Model\": \"Absolute Zero Training w/ No Curated Data (Ours)\"\\n },\\n {\\n \"Model\": \"AZR (Ours)\",\\n \"Base\": \"Base\",\\n \"#data\": \"0\",\\n \"HEval+\": \"-1.9 71.3\",\\n \"MBPP+\": \"+3.8 69.1\",\\n \"LCBv1-5\": \"+7.8 25.3\",\\n \"AME24\": \"+6.6 13.3\",\\n \"AME25\": \"13.3\",\\n \"AMC\": \"+10.0 52.5\",\\n \"M500\": \"+15.0 74.4\",\\n \"Minva\": \"+9.6 38.2 +13.2\",\\n \"Olypiad\": \"38.5\",\\n \"CAvg\": \"+10.8 55.2\",\\n \"MAvg\": \"+3.2 38.4\",\\n \"AVG\": \"+10.9 46.8 +7.0\"\\n },\\n {\\n \"Model\": \"AZR (Ours)\",\\n \"Base\": \"Coder\",\\n \"#data\": \"0\",\\n \"HEval+\": \"+3.0 83.5\",\\n \"MBPP+\": \"+0.3 69.6\",\\n \"LCBv1-5\": \"+11.8 31.7\",\\n \"AME24\": \"+13.3 20.0\",\\n \"AME25\": \"+6.7 10.0\",\\n \"AMC\": \"57.5\",\\n \"M500\": \"+17.5 72.6\",\\n \"Minva\": \"+22.6 36.4 +19.1\",\\n \"Olypiad\": \"38.2\",\\n \"CAvg\": \"+16.3 61.6+5.0 39.1\",\\n \"MAvg\": \"\",\\n \"AVG\": \"+15.2 50.4+10.2\"\\n }\\n ]\\n}<span id=\"page-8-0\"></span>*Table 1.* **Performance of RL-Trained Reasoner on Reasoning Benchmarks Based on Qwen2.5-7B Models.** Performance of various models is evaluated on three standard code benchmarks (HumanEval<sup>+</sup> , MBPP<sup>+</sup> , LCBv1-5 and six math benchmarks (AIME\\'24, AIME\\'25, AMC\\'23, MATH500, Minerva, OlympiadBench). Average performance across coding and math benchmarks is calculated as average of the two averages: AVG = (CAvg + MAvg)*/*2. We use + for absolute percentage increase from base model. All models are trained using different variants of the Qwen2.5-7B model, with the variant and data usage labeled, more details listed in Table [4](#page-21-1)\\n\\n**Baselines.** For our main results, we use Qwen2.5-7B as the base model, along with its specialized base model variants: Qwen2.5-7B-Coder, Qwen2.5-7B-Instruct, and Qwen2.5-Math-7B [\\\\(Yang et al.,](#page-17-3) [2024a;](#page-17-3) [Hui et al.,](#page-14-3) [2024;](#page-14-3) [Yang et al.,](#page-17-4) [2024b\\\\)](#page-17-4). Furthermore, the zero-style models are usually trained specifically on either code or math data; and only Eurus-2-7B-PRIME-Zero[\\\\(Cui](#page-13-5) [et al.,](#page-13-5) [2025\\\\)](#page-13-5) was trained jointly on both domains. For code data models, we present four variants of the AceCoder [\\\\(Zeng et al.,](#page-18-5) [2025a\\\\)](#page-18-5) and two different CodeR1 models [\\\\(Liu & Zhang,](#page-15-9) [2025\\\\)](#page-15-9). For math data models, we have Qwen2.5-Math-7B-Oat-Zero [\\\\(Liu et al.,](#page-15-10) [2025\\\\)](#page-15-10), Open-Reasoner-Zero-7B (ORZ) [\\\\(Hu et al.,](#page-14-8) [2025\\\\)](#page-14-8), Qwen-2.5-7B-SimpleRL-Zoo [\\\\(Zeng et al.,](#page-18-1) [2025b\\\\)](#page-18-1). All baseline models\\' training data and initialization settings are summarized in Table [4.](#page-21-1) For follow-up scaling experiments, we compare each AZR model against its own corresponding base model, due to the lack of established baselines across different parameter scales. Finally, we compare our Llama3.1-8B-trained model with Llama-3.1-8B-SimpleRL-Zoo [\\\\(Zeng et al.,](#page-18-1) [2025b\\\\)](#page-18-1) and the base model.\\n\\n## **4.2. Results**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**4. Experiments**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 2, \"title\": \"**4.2. Results**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Research Question 1: How does AZR compare to other zero setting models trained with human expert data?** We present the main results of reasoning models trained under both the standard zero and our proposed absolute zero settings in Table [1.](#page-8-0) Notably, Absolute Zero Reasoner-Coder-7B achieves state-of-the-art performance in both the 7B overall average and the coding average categories. Despite being entirely out-of-distribution for both math and code reasoning benchmarks, it surpasses the previous best model by 1.8 absolute percentages. Even more strikingly, it outperforms models trained with expert-curated human data in the coding category by 0*.*3 absolute percentages, while never having access to such data itself.\\n\\n**Strong Cross-domain Generalization.** To assess cross-domain generalization after RLVR, we evaluate math performance before and after training, comparing AZR models with other expert code models, since AZR was trained in coding environments. After training, most expert code models showed minimal changes or even declines in performance compared to their base versions, with an average increase of only 0.65 points across these models, indicating very limited cross-domain generalization. In contrast, AZR base and coder models achieved gains of 10.9 and 15.2 percentage points, respectively, demonstrating substantially stronger generalized reasoning improvements. Similarly, although also out-of-distribution on human-defined code generation tasks, our AZR models improved by 3.2 and 5.0 points, while the math models on average showed just a moderate increases in coding (+2.0 on average).\\n\\nOverall, these results highlight the surprising effectiveness of our approach. Unlike other RLVR models trained and evaluated on human-defined tasks, our AZR models demonstrate strong general reasoning capabilities without any direct training on downstream human-defined math or coding data, only had access to self-proposed tasks during training.\\n\\n**Research Question 2: How do initializing from different base model variants (base vs. coder) affect performance?** As shown in Table [1,](#page-8-0) the coder variant achieved better overall performance in both math and coding after the AZR\\n\\n**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n\\n![](_page_9_Figure_1.jpeg)\\n\\n<span id=\"page-9-0\"></span>*Figure 6.* **(a) In-Distribution & (b) Out-of-Distribution Reasoning Task Performances. (a)** Scores on CruxEval-I, CruxEval-O, and LiveCodeBench-Execution, which correspond to abduction, deduction, and deduction task types respectively, used to evaluate in-distribution abilities of AZR during training across different model sizes and types; **(b)** Out-of-distribution reasoning performance, reported as the average of code tasks, math tasks, and their overall average, across different model sizes and types. A detailed breakdown of all benchmark results can be found in Table [5.](#page-31-0)\\n\\nself-play process. Strikingly, although the coder base model variant started with a lower average performance in math than the vanilla base model (23.9 vs. 27.5), it ultimately outperformed it after AZR training. This highlights the importance of initial code competency as a catalyst for enhancing broader reasoning abilities within the Absolute Zero Reasoner approach.\\n\\n**Research Question 3: How does varying model size effect AZR\\'s in-distribution and out-of-distribution capabilities?** We examine the effects of scaling model size and present both in-distribution and out-of-distribution results in Figure [6](#page-9-0) (a) and (b), respectively. Given the strong performance of coder models in the 7B category, we extend the analysis by evaluating smaller and larger variants: Qwen2.5-3B-Coder and Qwen2.5-14B-Coder. Due to the absence of existing baselines for these zero-style reasoner models, we compare each model\\'s performance to its corresponding base coder model.\\n\\nThe results reveal a clear trend: our method delivers *greater gains on larger, more capable models*. In the in-distribution setting, the 7B and 14B models continue to improve beyond 200 training steps, whereas the smaller 3B model appears to plateau. For out-of-distribution domains, larger models also show greater overall performance improvements than smaller ones: +5.7, +10.2, +13.2 overall performance gains, respectively for 3B, 7B and 14B. This is an encouraging sign, since base models continue to improve and also suggesting that scaling enhances the effectiveness of AZR. In future work, we aim to investigate the scaling laws that govern performance in the Absolute Zero paradigm.\\n\\n**Research Question 4: Any interesting observations by changing the model class?** We also evaluate our method on a different model class, using Llama3.1-8B as the base shown in Figure [6.](#page-9-0) Unlike the 3B and 14B categories, this setting has an existing baseline, SimpleRL [\\\\(Zeng et al.,](#page-18-1) [2025b\\\\)](#page-18-1), which enables a direct comparison. Although Llama3.1-8B is less capable than the Qwen2.5 models, our method still produces moderate improvements (+3.2), demonstrating AZR\\'s effectiveness even on relatively weaker models. However, these gains appear more limited, which aligns with our earlier observation that performance improvements tend to scale with initial base model potency.\\n\\n**Research Question 5: Any interesting behaviors or patterns observed during AZR training?** We observed interesting response patterns in both the proposal and solution stages. The model is capable of proposing diverse programs, such as string manipulation tasks, dynamic programming problems, and practical cases (*e.g*., calculating a triangle\\'s area using Heron\\'s formula). We show a concrete example in Figure [7,](#page-10-0) where AZR proposes a code problem that searches for the sum of continuous sub-arrays matching a target value and solves it through trial-and-error.\\n\\nOverall, the models trained exhibits distinct reasoning patterns depending on the task type. For example, when solving abduction tasks, it repeatedly tests different input patterns, self-correcting until the reasoned output matches the given input. When predicting outputs, it steps through the code and records structured intermediate results (such as dynamic programming arrays) until the final output is reached. When inducting programs from given inputs, outputs, and descriptions, the model systematically checks each test case to confirm that its program produces correct results. We showcase more concrete examples of these behaviors in Figures [18](#page-24-0) and [20](#page-26-0) to [26.](#page-33-0) We also share some fun \"vibe checks\" such as solving Sudoku and solving the [sum-product game](https://en.wikipedia.org/wiki/Sum_and_Product_Puzzle) in Figures [40](#page-45-0) and [41.](#page-47-0)\\n\\n**Intermediate Planning During Code Response.** Another interesting pattern emerged in our AZR models during the code induction task: the final code outputs were often interleaved with comments that resembled immediate step-by-step plans, reminiscent of the ReAct prompting framework [\\\\(Yao et al.,](#page-17-1) [2023\\\\)](#page-17-1). A similar behavior has been observed in recent formal math proving models, such as DeepSeek\\n\\n#### Input: [1,2,3,4,5], 5 Model-proposed Task Response of Predict Input Let\\'s analyze the code snippet **\u2026(analysis)** To find one possible input that produces the output 1, we need to find a scenario where **\u2026(analysis) Let\\'s consider a simple example: numbers = [1, 2], target = 1 Here\\'s the step-by-step calculation:** 1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 2 = 3, accumulated\\\\_values = [1, 3] -Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target) Since no pair satisfies the condition, the function will not return any value. This doesn\\'t match our output. Let\\'s try another example **\u2026(Tried 3 more examples) Given the complexity and the fact that no simple example seems to work, let\\'s try a more complex scenario: numbers = [2, -1, 1], target = 1** Step-by-step calculation: 1. current\\\\_sum = 0 + 2 = 2, accumulated\\\\_values = [2] 2. current\\\\_sum = 2 - 1 = 1 , accumulated\\\\_values = [2, 1] 3. current\\\\_sum = 1 + 1 = 2, accumulated\\\\_values = [2, 1, 2] - Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target)\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**4. Experiments**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 2, \"title\": \"**4.2. Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"Input: [1,2,3,4,5], 5 Model-proposed Task Response of Predict Input Let\\'s analyze the code snippet **\u2026(analysis)** To find one possible input that produces the output 1, we need to find a scenario where **\u2026(analysis) Let\\'s consider a simple example: numbers = [1, 2], target = 1 Here\\'s the step-by-step calculation:** 1. current\\\\\\\\_sum = 0 + 1 = 1, accumulated\\\\\\\\_values = [1] 2. current\\\\\\\\_sum = 1 + 2 = 3, accumulated\\\\\\\\_values = [1, 3] -Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target) Since no pair satisfies the condition, the function will not return any value. This doesn\\'t match our output. Let\\'s try another example **\u2026(Tried 3 more examples) Given the complexity and the fact that no simple example seems to work, let\\'s try a more complex scenario: numbers = [2, -1, 1], target = 1** Step-by-step calculation: 1. current\\\\\\\\_sum = 0 + 2 = 2, accumulated\\\\\\\\_values = [2] 2. current\\\\\\\\_sum = 2 - 1 = 1 , accumulated\\\\\\\\_values = [2, 1] 3. current\\\\\\\\_sum = 1 + 1 = 2, accumulated\\\\\\\\_values = [2, 1, 2] - Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target)\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n<span id=\"page-10-0\"></span>Output: 1\\n\\n*Figure 7.* **Example of a Model-Proposed Task and Its Response for Solving an Abduction Task.** (Left) The model autonomously proposes an input and program for the abduction task. We execute the program to verify its validity and obtain the corresponding output. (Right) The model\\'s reasoning process when solving the abduction task: given the code and output, it attempts to infer the original input. The model begins by analyzing the program, proposes an initial input, and reasons through the code to produce an output. If there is a mismatch, it reflects on the discrepancy and iteratively adjusts the input until the generated output matches the target. Interestingly, the agent arrives at a different input than the gold one, but since it produces the correct output, the answer is considered correct.\\n\\n- Check for pair (i=0, j=2): 2 - 2 = 0 (not equal to target) - Check for pair (i=1, j=2): 2 - 1 = 1 (equal to target)\\n\\n**The pair (i=1, j=2) satisfies the condition, and the function returns the first accumulated value in this pair, which is 1. This matches our output.**\\n\\nProver v2, which is significantly larger in scale (671B). This pattern suggests that models may naturally adopt intermediate planning as a strategy to enhance final answers. Therefore, it may be beneficial to explicitly enable or encourage this behavior in *long-form responses* across other domains.\\n\\n**Cognitive Behavior in Llama.** Interestingly, we also observed some emergent cognitive patterns in Absolute Zero Reasoner-Llama3.1-8B, similar to those reported by [Zeng et al.](#page-18-1) [\\\\(2025b\\\\)](#page-18-1), and we include one example in Figure [26,](#page-33-0) where clear state-tracking behavior is demonstrated. In addition, we encountered some unusual and potentially concerning chains of thought from the Llama model trained with AZR. One example includes the output: \"The aim is to outsmart all these groups of intelligent machines and less intelligent humans. This is for the brains behind the future\" shown in Figure [32.](#page-37-0) We refer to this as the *\"uh-oh moment\"* and encourage future work to further investigate its potential implications.\\n\\n**Token Length Increase Depends on Task Type.** Finally, we observed that token length increases over the course of training, consistent with findings from recent studies [\\\\(Hu et al.,](#page-14-8) [2025;](#page-14-8) [Liu et al.,](#page-15-10) [2025\\\\)](#page-15-10). Interestingly, our results reveal one of the first observation of clear distinctions in token length growth across different types of cognitive tasks. As shown in Figures [15](#page-23-0) to [17,](#page-24-1) the extent of lengthening varies by task type. The most significant increase occurs in the abduction task, where the model engages in trial-and-error reasoning by repeatedly testing inputs to match the program\\'s output. This suggests that the observed variation in token length is not incidental, but rather a reflection of task-specific reasoning behavior.\\n\\n**Research Question 6: Are all task types essential for good performance (Ablation)?** Due to resource constraints, we perform the ablation studies in this section and the next using only Absolute Zero Reasoner-Base-7B. We begin by testing the importance of task types during training, with results shown in Table [2.](#page-11-0) In row 1, both induction and abduction tasks are removed; in row 2, only the induction task is removed. In both cases, math performance drops significantly, with the most severe degradation occurring when more task types are excluded. These findings highlight the complementary role of the three task types in improving general reasoning capability, with each contributing in a distinct and essential way.\\n\\n**Research Question 7: How much do the designs of proposer contribute to the overall performance (Ablation)?** Next, we ablate two components of the proposer role and present the results in Table [2.](#page-11-0) First, we examine whether conditioning on historic reference triplets is necessary. To do so, we design a variant in which a fixed prompt is used to propose abduction and deduction tasks, rather than dynamically conditioning on *K* historical triplets (row 3). This results in a 5-point absolute drop in math performance and a 1-point drop in code performance. This suggest that dynamically conditioning on reference programs helps\\n\\n| Absolute Zero: Reinforced Self-play Reasoning with Zero Data |  |  |  |  |  |  |\\n|--------------------------------------------------------------|--|--|--|--|--|--|\\n|--------------------------------------------------------------|--|--|--|--|--|--|\\n\\nAbsolute Zero: Reinforced Self-play Reasoning with Zero Data,,,,,,\\r\\n{\\n \"headers\": [\\n \"Absolute Zero: Reinforced Self-play Reasoning with Zero Data\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\"\\n ],\\n \"rows\": []\\n}\\n\\n| Experiment        | Task Type     | Gen Reference | Trained Roles   | Code Avg. | Math Avg. | Overall Avg. |\\n|-------------------|---------------|---------------|-----------------|-----------|-----------|--------------|\\n| Deduction only    | Ded           | /             | /               | 54.6      | 32.0      | 43.3         |\\n| w/o Induction     | Abd, Ded      | /             | /               | 54.2      | 33.3      | 43.8         |\\n| w/o Gen Reference | /             | 0             | /               | 54.4      | 33.1      | 43.8         |\\n| Train Solver Only | /             | /             | Solve Only      | 54.8      | 36.0      | 45.4         |\\n| Ours              | Abd, Ded, Ind | K             | Propose & Solve | 55.2      | 38.4      | 46.8         |\\n\\nExperiment,Task Type,Gen Reference,Trained Roles,Code Avg.,Math Avg.,Overall Avg.\\r\\nDeduction only,Ded,/,/,54.6,32.0,43.3\\r\\nw/o Induction,\"Abd, Ded\",/,/,54.2,33.3,43.8\\r\\nw/o Gen Reference,/,0,/,54.4,33.1,43.8\\r\\nTrain Solver Only,/,/,Solve Only,54.8,36.0,45.4\\r\\nOurs,\"Abd, Ded, Ind\",K,Propose & Solve,55.2,38.4,46.8\\r\\n{\\n \"headers\": [\\n \"Experiment\",\\n \"Task Type\",\\n \"Gen Reference\",\\n \"Trained Roles\",\\n \"Code Avg.\",\\n \"Math Avg.\",\\n \"Overall Avg.\"\\n ],\\n \"rows\": [\\n {\\n \"Experiment\": \"Deduction only\",\\n \"Task Type\": \"Ded\",\\n \"Gen Reference\": \"/\",\\n \"Trained Roles\": \"/\",\\n \"Code Avg.\": \"54.6\",\\n \"Math Avg.\": \"32.0\",\\n \"Overall Avg.\": \"43.3\"\\n },\\n {\\n \"Experiment\": \"w/o Induction\",\\n \"Task Type\": \"Abd, Ded\",\\n \"Gen Reference\": \"/\",\\n \"Trained Roles\": \"/\",\\n \"Code Avg.\": \"54.2\",\\n \"Math Avg.\": \"33.3\",\\n \"Overall Avg.\": \"43.8\"\\n },\\n {\\n \"Experiment\": \"w/o Gen Reference\",\\n \"Task Type\": \"/\",\\n \"Gen Reference\": \"0\",\\n \"Trained Roles\": \"/\",\\n \"Code Avg.\": \"54.4\",\\n \"Math Avg.\": \"33.1\",\\n \"Overall Avg.\": \"43.8\"\\n },\\n {\\n \"Experiment\": \"Train Solver Only\",\\n \"Task Type\": \"/\",\\n \"Gen Reference\": \"/\",\\n \"Trained Roles\": \"Solve Only\",\\n \"Code Avg.\": \"54.8\",\\n \"Math Avg.\": \"36.0\",\\n \"Overall Avg.\": \"45.4\"\\n },\\n {\\n \"Experiment\": \"Ours\",\\n \"Task Type\": \"Abd, Ded, Ind\",\\n \"Gen Reference\": \"K\",\\n \"Trained Roles\": \"Propose & Solve\",\\n \"Code Avg.\": \"55.2\",\\n \"Math Avg.\": \"38.4\",\\n \"Overall Avg.\": \"46.8\"\\n }\\n ]\\n}<span id=\"page-11-0\"></span>*Table 2.* **Ablation Results.** We ablate task types and the proposer role in the Absolute Zero Reasoner using the 7B base model. A \\'/\\' indicates that the configuration remains unchanged from the standard AZR setup. Removing induction or using only deduction leads to significant performance drops (rows 1 & 2). For the proposer role, both removing conditioning on *K* references (row 3) and omitting proposer-role training (row 4) result in degraded performance. Overall, all components are essential for general reasoning.\\n\\nimprove performance, possibly by increasing diversity and achieving better coverage of the reasoning problem space.\\n\\nFinally, we consider a case where we do not train the proposer at all. Instead, we only prompt it using the current learner and train the solver alone (row 4). We observe a moderate drop in overall performance (-1.4), suggesting that while proposer training is beneficial, it may not be the most critical factor for now in the AZR framework. We hypothesize that this could be related to task interference, as studied in multitask learning literature [\\\\(Suteu & Guo,](#page-16-8) [2019\\\\)](#page-16-8). Thus, we believe that further investigation into how to make the proposer even more potent is an exciting and promising direction.\\n\\n**Additional Results.** Beyond the core research questions, we present additional results, including the breakdown of individual out-of-distribution benchmark scores during training for the 7B base and coder models in Figures [28](#page-34-0) and [29,](#page-35-0) for th 14B base and coder model in Figures [30](#page-36-0) and [31.](#page-37-1) For completeness, we also report in-distribution benchmark performance during training for the 7B base model in Figure [14.](#page-22-2) Finally, we invite interested readers to explore Appendix [D,](#page-48-0) where we share several experimental directions that, while not yielding strong performance gains, produced interesting and insightful findings.\\n\\n# **5. Related Work**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**5. Related Work**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Reasoning with RL.** Using RL to enhance reasoning capabilities has recently emerged as an important step in the post-training process of strong reasoning-focused large language models [\\\\(Lambert et al.,](#page-15-0) [2024\\\\)](#page-15-0). One of the first works to explore a self-bootstrapping approach to improving LLM reasoning is STaR, which employs expert iteration and rejection sampling of outcome-verified responses to iteratively improve the model\\'s CoT. A monumental work, o1 [\\\\(Jaech et al.,](#page-14-0) [2024\\\\)](#page-14-0), was among the first to deploy this idea on a scale, achieving state-of-the-art results in reasoning tasks at the time of release. More recently, the R1 model [\\\\(DeepSeek-AI et al.,](#page-13-0) [2025\\\\)](#page-13-0) became the first open-weight model to match or even surpass the performance of o1. Most notably, the zero setting was introduced, in which reinforcement learning is applied directly on top of the base LLM. This inspired followup work, which are open source attempts to replicate the R1 process or to improve the underlying reinforcement learning algorithm [\\\\(Zeng et al.,](#page-18-1) [2025b;](#page-18-1) [Liu et al.,](#page-15-10) [2025;](#page-15-10) [Cui et al.,](#page-13-5) [2025;](#page-13-5) [Hu et al.,](#page-14-8) [2025;](#page-14-8) [Yu et al.,](#page-17-5) [2025;](#page-17-5) [Yuan et al.,](#page-17-6) [2025\\\\)](#page-17-6). Recent work explored RL on human defined procedural generated puzzles saw improvements in math [\\\\(Xie et al.,](#page-17-7) [2025\\\\)](#page-17-7), and using one human example can almost match the performance of thousands [\\\\(Wang et al.,](#page-17-8) [2025b\\\\)](#page-17-8). We extend the zero setting to a new absolute zero setting, where not only is the RLVR process initialized from a base LLM without SFT, but no external prompt data or answers are provided to the learner. All data used to improve reasoning were self-proposed, and refined entirely through RLVR. Moreover, our goal is not to only match zero-setting models, but to surpass them in the long run.\\n\\n**Self-play.** The self-play paradigm can be traced back to early 2000s, where [Schmidhuber](#page-16-9) [\\\\(2003;](#page-16-9) [2011\\\\)](#page-16-10) (of course) explored a two-agent setup in which a proposal agent invents questions for a prediction agent to answer. This dynamic continuously and automatically improves both agents, enabling theoretically never-ending progress [\\\\(Schaul,](#page-15-11) [2024\\\\)](#page-15-11). AlphaGo and AlphaZero [\\\\(Silver et al.,](#page-16-11) [2016;](#page-16-11) [2017\\\\)](#page-16-3) extend the self-play paradigm to the two-player zero-sum game of Go, where the current learner competes against earlier versions of itself to progressively enhance its capabilities. These were among the first milestone works to demonstrate superhuman performance in the game of Go. Moreover, methods such as asymmetric self-play [\\\\(Sukhbaatar et al.,](#page-16-5) [2018;](#page-16-5) [OpenAI et al.,](#page-15-12) [2021\\\\)](#page-15-12), unsupervised environment design [\\\\(Wang et al.,](#page-16-12) [2019;](#page-16-12) [Dennis et al.,](#page-13-6) [2020\\\\)](#page-13-6), unsupervised reinforcement learning [\\\\(Laskin et al.,](#page-15-13) [2021;](#page-15-13) [Zhao et al.,](#page-18-4) [2022;](#page-18-4) [2025b\\\\)](#page-18-6), and automatic goal generation [\\\\(Florensa et al.,](#page-14-9) [2018\\\\)](#page-14-9) all center around inventing new tasks for an agent to learn from\u2014typically without supervision. In these approaches, the process of setting goals itself is often dynamic and continuously evolving. Generative adversarial networks [\\\\(Goodfellow et al.,](#page-14-10) [2020\\\\)](#page-14-10), also belong in this paradigm where a discriminator discriminate between real data and generated data, and the generated is trained to fool the discriminator.\\n\\nMost recently, SPIN and Self-Rewarding Language Models [\\\\(Chen et al.,](#page-13-2) [2024;](#page-13-2) [Yuan et al.,](#page-17-9) [2024\\\\)](#page-17-9) use the same instance of the lanugage models themselves as the reward model to progressively improve the generative and discriminative abilities of the same LLM for alignment. [\\\\(Kirchner et al.,](#page-14-11) [2024\\\\)](#page-14-11) uses Prover-Verifier Game for increasing legibility and eva [\\\\(Ye et al.,](#page-17-10) [2024\\\\)](#page-17-10) uses self-play for alignment, but reward model is the main bottleneck as it is not reliable for reasoning tasks [\\\\(Lambert et al.,](#page-15-0) [2024\\\\)](#page-15-0). SPC [\\\\(Chen et al.,](#page-13-1) [2025\\\\)](#page-13-1) used self-play to train on human-curated tasks to increase the critic capabilities and SPAG [\\\\(Cheng et al.,](#page-13-7) [2024\\\\)](#page-13-7) trained using self-play in specific game of Adversarial Taboo. Concurrent works\u2014Genius, EMPO, and TTRL [\\\\(Xu et al.,](#page-17-11) [2025;](#page-17-11) [Zhang et al.,](#page-18-7) [2025b;](#page-18-7) [Zuo et al.,](#page-18-8) [2025\\\\)](#page-18-8)\u2014leverage human-curated language queries without labels to train reinforcement learning agents, but still rely on a fixed human defined learning task distribution. Finally, Minimo [\\\\(Poesia et al.,](#page-15-14) [2024\\\\)](#page-15-14) extends self-play to formal mathematics, where a pair of conjecture- and theorem-proving agents are jointly trained using reinforcement learning. Our work builds upon the self-play paradigm, but it is the first to use it to elicit long CoT for improved reasoning, and the first to frame the problem space as a Python input/output/function abduction/deduction/induction tasks, grounding it in an operationalizable environment to facilitate RLVR.\\n\\n**Weak-to-Strong Supervision.** The concept of weak-to-strong supervision has been studied in prior work, where a teacher\u2014despite being weaker than the learner\u2014still provides useful guidance [\\\\(Burns et al.,](#page-13-8) [2024;](#page-13-8) [Hinton et al.,](#page-14-12) [2015;](#page-14-12) [Christiano,](#page-13-9) [2018;](#page-13-9) [2019;](#page-13-10) [Demski &](#page-13-11) [Garrabrant,](#page-13-11) [2019;](#page-13-11) [Leike & Sutskever,](#page-15-15) [2023;](#page-15-15) [Hubinger et al.,](#page-14-13) [2019\\\\)](#page-14-13). We consider a similar setting in which the learner may possess superhuman capabilities. However, rather than relying on supervision from a weaker teacher, we propose an alternative approach: guiding the learner\\'s improvement through verifiable rewards, which potentially offer a more reliable and scalable learning signal. Furthermore, in our proposed method, the learning task and goal distribution is not predefined by any external supervisor\u2014they are entirely self-generated by the learner, enabling it to maximize its learning potential through autonomous self-practice.\\n\\n# **6. Conclusion and Discussion**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**6. Conclusion and Discussion**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Conclusion.** In this work, we proposed the Absolute Zero paradigm, a novel setting that addresses the data limitations of existing RLVR frameworks. In this paradigm, reasoning agents are tasked with generating their own learning task distributions and improving their reasoning abilities with environmental guidance. We then presented our own instantiation, the Absolute Zero Reasoner (AZR), which is trained by having them propose and solve code-related reasoning tasks grounded by code executor.\\n\\nWe evaluated our trained models on out-of-distribution benchmarks in both the code generation and mathematical reasoning domains. Remarkably, even though our models were not directly trained on these tasks and lacked human expert-curated datasets, our reasoning agents achieved exceptional performance, surpassing the state-of-the-art in combined general reasoning scores and in coding. This demonstrates the potential of the absolute zero paradigm to drive superior reasoning capabilities without the need for extensive domain-specific training data. Furthermore, we showed that AZR scales efficiently, offering strong performance across varying model sizes, and can enhance the capabilities of other model classes as well. To foster further exploration and advancement of this emerging paradigm, we are releasing the code, models, and logs as open-source, encouraging the research community to build upon our findings.\\n\\n**Discussion.** We believe there remains much to explore, such as altering the environment from which the reasoner receives verifiable feedback, including sources like the world wide web, formal math languages [\\\\(Sutton,](#page-16-13) [2001;](#page-16-13) [Ren et al.,](#page-15-3) [2025\\\\)](#page-15-3), world simulators, or even the real world. Furthermore, AZ\\'s generality could possibly be extend to domains such as embodied AI [\\\\(Zitkovich et al.,](#page-18-9) [2023;](#page-18-9) [Yue](#page-17-12) [et al.,](#page-17-12) [2024\\\\)](#page-17-12). Additionally, more complex agentic tasks or scientific experiments, present exciting opportunities to further advance the absolute zero setting to different application domains [\\\\(Wu et al.,](#page-17-13) [2024;](#page-17-13) [2023\\\\)](#page-17-14). Beyond that, future directions could include exploring multimodal reasoning models, modifying the distribution *p*(*z*) to incorporate privileged information, defining or even let the model dynamically learn how to define *f* (Equation [\\\\(3\\\\)](#page-3-2)), or designing exploration/diversity rewards for both the propose and solve roles.\\n\\nWhile underappreciated in current reasoning literature, the exploration component of RL has long been recognized as a critical driver for emergent behavior in traditional RL [\\\\(Yue et al.,](#page-17-0) [2025;](#page-17-0) [Silver et al.,](#page-16-11) [2016;](#page-16-11) [Ladosz et al.,](#page-14-14) [2022\\\\)](#page-14-14). Years of research have examined various forms of exploration, even in related subfields using LLMs such as red teaming [\\\\(Zhao et al.,](#page-18-2) [2025a\\\\)](#page-18-2), yet its role in LLM reasoning models remains underexplored. Taking this a step further, our framework investigates an even more meta-level exploration problem: exploration within the learning task space\u2014where the agent learns not just how to solve tasks, but what tasks to learn from and how to find them. Rather than being confined to a fixed problem set, AI reasoner agents may benefit from dynamically defining and refining their own learning tasks. This shift opens a powerful new frontier\u2014where agents explore not only solution spaces but also expand the boundaries of problem spaces. We believe this is a promising and important direction for future research.\\n\\nOne limitation of our work is that we did not address how to safely manage a system composed of such self-improving components. To our surprise, we observed several instances of safety-concerning CoT from the Llama-3.1-8B model, which we term the \"uh-oh moment\". These findings suggest that the proposed absolute zero paradigm, while reducing the need for human intervention for curating tasks, still necessitates oversight due to lingering safety concerns and is a critical direction for future research [\\\\(Wang et al.,](#page-17-15) [2024;](#page-17-15) [2025a\\\\)](#page-16-14).\\n\\nAs a final note, we explored reasoning models that possess experience\u2014models that not only solve given tasks, but also define and evolve their own learning task distributions with the help of an environment. Our results with AZR show that this shift enables strong performance across diverse reasoning tasks, even with significantly fewer privileged resources, such as curated human data. We believe this could finally free reasoning models from the constraints of human-curated data [\\\\(Morris,](#page-15-16) [2025\\\\)](#page-15-16) and marks the beginning of a new chapter for reasoning models: **\"welcome to the era of experience\"** [\\\\(Silver & Sutton,](#page-16-15) [2025;](#page-16-15) [Zhao et al.,](#page-18-10) [2024\\\\)](#page-18-10).\\n\\n# **References**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**References**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n- <span id=\"page-13-3\"></span>Aryabumi, V., Su, Y., Ma, R., Morisot, A., Zhang, I., Locatelli, A., Fadaee, M., \u00dcst\u00fcn, A., and Hooker, S. To code, or not to code? exploring impact of code in pre-training. *CoRR*, abs/2408.10914, 2024. doi: 10.48550/ARXIV.2408.10914. URL <https://doi.org/10.48550/arXiv.2408.10914>.\\n- <span id=\"page-13-8\"></span>Burns, C., Izmailov, P., Kirchner, J. H., Baker, B., Gao, L., Aschenbrenner, L., Chen, Y., Ecoffet, A., Joglekar, M., Leike, J., Sutskever, I., and Wu, J. Weak-to-strong generalization: Eliciting strong capabilities with weak supervision. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=ghNRg2mEgN>.\\n- <span id=\"page-13-12\"></span>Canal, M. Radon: Python tool for code metrics. <https://github.com/rubik/radon>, 2023. Accessed: 2025-04-06.\\n- <span id=\"page-13-1\"></span>Chen, J., Zhang, B., Ma, R., Wang, P., Liang, X., Tu, Z., Li, X., and Wong, K.-Y. K. Spc: Evolving self-play critic via adversarial games for llm reasoning, 2025. URL <https://arxiv.org/abs/2504.19162>.\\n- <span id=\"page-13-2\"></span>Chen, Z., Deng, Y., Yuan, H., Ji, K., and Gu, Q. Self-play fine-tuning converts weak language models to strong language models. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=O4cHTxW9BS>.\\n- <span id=\"page-13-7\"></span>Cheng, P., Hu, T., Xu, H., Zhang, Z., Dai, Y., Han, L., Du, N., and Li, X. Self-playing adversarial language game enhances LLM reasoning. In Globersons, A., Mackey, L., Belgrave, D., Fan, A., Paquet, U., Tomczak, J. M., and Zhang, C. (eds.), *Advances in Neural Information Processing Systems 38: Annual Conference on Neural Information Processing Systems 2024, NeurIPS 2024, Vancouver, BC, Canada, December 10 - 15, 2024*, 2024. URL [http://papers.nips.cc/paper\\\\\\\\_files/paper/2024/hash/](http://papers.nips.cc/paper_files/paper/2024/hash/e4be7e9867ef163563f4a5e90cec478f-Abstract-Conference.html) [e4be7e9867ef163563f4a5e90cec478f-Abstract-Conference.html](http://papers.nips.cc/paper_files/paper/2024/hash/e4be7e9867ef163563f4a5e90cec478f-Abstract-Conference.html).\\n- <span id=\"page-13-9\"></span>Christiano, P. Approval-directed bootstrapping. [https://www.alignmentforum.org/posts/6x7oExXi32ot6HjJv/](https://www.alignmentforum.org/posts/6x7oExXi32ot6HjJv/approval-directed-bootstrapping) [approval-directed-bootstrapping](https://www.alignmentforum.org/posts/6x7oExXi32ot6HjJv/approval-directed-bootstrapping), 2018. AI Alignment Forum.\\n- <span id=\"page-13-10\"></span>Christiano, P. Capability amplification. [https://www.alignmentforum.org/posts/t3AJW5jP3sk36aGoC/](https://www.alignmentforum.org/posts/t3AJW5jP3sk36aGoC/capability-amplification-1) [capability-amplification-1](https://www.alignmentforum.org/posts/t3AJW5jP3sk36aGoC/capability-amplification-1), 2019. AI Alignment Forum.\\n- <span id=\"page-13-5\"></span>Cui, G., Yuan, L., Wang, Z., Wang, H., Li, W., He, B., Fan, Y., Yu, T., Xu, Q., Chen, W., Yuan, J., Chen, H., Zhang, K., Lv, X., Wang, S., Yao, Y., Han, X., Peng, H., Cheng, Y., Liu, Z., Sun, M., Zhou, B., and Ding, N. Process reinforcement through implicit rewards. *CoRR*, abs/2502.01456, 2025. doi: 10.48550/ARXIV.2502.01456. URL <https://doi.org/10.48550/arXiv.2502.01456>.\\n- <span id=\"page-13-0\"></span>DeepSeek-AI, Guo, D., Yang, D., Zhang, H., Song, J., Zhang, R., Xu, R., Zhu, Q., Ma, S., Wang, P., Bi, X., Zhang, X., Yu, X., Wu, Y., Wu, Z. F., Gou, Z., Shao, Z., Li, Z., Gao, Z., Liu, A., Xue, B., Wang, B., Wu, B., Feng, B., Lu, C., Zhao, C., Deng, C., Zhang, C., Ruan, C., Dai, D., Chen, D., Ji, D., Li, E., Lin, F., Dai, F., Luo, F., Hao, G., Chen, G., Li, G., Zhang, H., Bao, H., Xu, H., Wang, H., Ding, H., Xin, H., Gao, H., Qu, H., Li, H., Guo, J., Li, J., Wang, J., Chen, J., Yuan, J., Qiu, J., Li, J., Cai, J. L., Ni, J., Liang, J., Chen, J., Dong, K., Hu, K., Gao, K., Guan, K., Huang, K., Yu, K., Wang, L., Zhang, L., Zhao, L., Wang, L., Zhang, L., Xu, L., Xia, L., Zhang, M., Zhang, M., Tang, M., Li, M., Wang, M., Li, M., Tian, N., Huang, P., Zhang, P., Wang, Q., Chen, Q., Du, Q., Ge, R., Zhang, R., Pan, R., Wang, R., Chen, R. J., Jin, R. L., Chen, R., Lu, S., Zhou, S., Chen, S., Ye, S., Wang, S., Yu, S., Zhou, S., Pan, S., and Li, S. S. Deepseek-r1: Incentivizing reasoning capability in llms via reinforcement learning. *CoRR*, abs/2501.12948, 2025. doi: 10.48550/ARXIV.2501.12948. URL <https://doi.org/10.48550/arXiv.2501.12948>.\\n- <span id=\"page-13-11\"></span>Demski, A. and Garrabrant, S. Embedded agency. *CoRR*, abs/1902.09469, 2019. URL <http://arxiv.org/abs/1902.09469>.\\n- <span id=\"page-13-6\"></span>Dennis, M., Jaques, N., Vinitsky, E., Bayen, A. M., Russell, S., Critch, A., and Levine, S. Emergent complexity and zeroshot transfer via unsupervised environment design. In Larochelle, H., Ranzato, M., Hadsell, R., Balcan, M., and Lin, H. (eds.), *Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020, virtual*, 2020. URL [https://proceedings.neurips.cc/paper/2020/hash/](https://proceedings.neurips.cc/paper/2020/hash/985e9a46e10005356bbaf194249f6856-Abstract.html) [985e9a46e10005356bbaf194249f6856-Abstract.html](https://proceedings.neurips.cc/paper/2020/hash/985e9a46e10005356bbaf194249f6856-Abstract.html).\\n- <span id=\"page-13-4\"></span>Dubey, A., Jauhri, A., Pandey, A., Kadian, A., Al-Dahle, A., Letman, A., Mathur, A., Schelten, A., Yang, A., Fan, A., Goyal, A., Hartshorn, A., Yang, A., Mitra, A., Sravankumar, A., Korenev, A., Hinsvark, A., Rao, A., Zhang, A., Rodriguez, A., Gregerson, A., Spataru, A., Rozi\u00e8re, B., Biron, B., Tang, B., Chern, B., Caucheteux, C., Nayak, C., Bi, C., Marra, C., McConnell, C., Keller, C., Touret, C., Wu, C., Wong, C., Ferrer, C. C., Nikolaidis, C., Allonsius, D., Song, D., Pintz, D., Livshits, D., Esiobu, D., Choudhary, D., Mahajan, D., Garcia-Olano, D., Perino, D., Hupkes, D., Lakomkin, E., AlBadawy, E., Lobanova, E., Dinan, E., Smith, E. M., Radenovic, F., Zhang, F., Synnaeve, G., Lee, G., Anderson, G. L., Nail, G., Mialon, G., Pang, G., Cucurell, G., Nguyen, H., Korevaar, H., Xu, H., Touvron, H., Zarov, I., Ibarra, I. A., Kloumann, I. M., Misra, I., Evtimov, I., Copet, J., Lee, J., Geffert, J., Vranes, J., Park, J., Mahadeokar, J., Shah, J., van der Linde, J., Billock, J., Hong, J., Lee, J., Fu, J., Chi, J., Huang, J., Liu, J., Wang, J., Yu, J., Bitton, J., Spisak, J., Park, J., Rocca, J., Johnstun, J., Saxe, J., Jia, J., Alwala, K. V., Upasani, K., Plawiak, K., Li, K., Heafield,\\n\\nK., Stone, K., and et al. The llama 3 herd of models. *CoRR*, abs/2407.21783, 2024. doi: 10.48550/ARXIV.2407.21783. URL <https://doi.org/10.48550/arXiv.2407.21783>.\\n\\n<span id=\"page-14-15\"></span>Ebert, C., Cain, J., Antoniol, G., Counsell, S., and Laplante, P. Cyclomatic complexity. *IEEE software*, 33(6):27\u201329, 2016.\\n\\n- <span id=\"page-14-9\"></span>Florensa, C., Held, D., Geng, X., and Abbeel, P. Automatic goal generation for reinforcement learning agents. In Dy, J. G. and Krause, A. (eds.), *Proceedings of the 35th International Conference on Machine Learning, ICML 2018, Stockholmsm\u00e4ssan, Stockholm, Sweden, July 10-15, 2018*, volume 80 of *Proceedings of Machine Learning Research*, pp. 1514\u20131523. PMLR, 2018. URL <http://proceedings.mlr.press/v80/florensa18a.html>.\\n- <span id=\"page-14-10\"></span>Goodfellow, I. J., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S., Courville, A. C., and Bengio, Y. Generative adversarial networks. *Commun. ACM*, 63(11):139\u2013144, 2020. doi: 10.1145/3422622. URL <https://doi.org/10.1145/3422622>.\\n- <span id=\"page-14-7\"></span>Gu, A., Rozi\u00e8re, B., Leather, H. J., Solar-Lezama, A., Synnaeve, G., and Wang, S. Cruxeval: A benchmark for code reasoning, understanding and execution. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=Ffpg52swvg>.\\n\\n<span id=\"page-14-16\"></span>Halstead, M. H. *Elements of Software Science (Operating and programming systems series)*. Elsevier Science Inc., 1977.\\n\\n- <span id=\"page-14-5\"></span>He, C., Luo, R., Bai, Y., Hu, S., Thai, Z. L., Shen, J., Hu, J., Han, X., Huang, Y., Zhang, Y., Liu, J., Qi, L., Liu, Z., and Sun, M. Olympiadbench: A challenging benchmark for promoting AGI with olympiad-level bilingual multimodal scientific problems. In Ku, L., Martins, A., and Srikumar, V. (eds.), *Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2024, Bangkok, Thailand, August 11-16, 2024*, pp. 3828\u20133850. Association for Computational Linguistics, 2024. doi: 10.18653/V1/2024.ACL-LONG.211. URL <https://doi.org/10.18653/v1/2024.acl-long.211>.\\n- <span id=\"page-14-6\"></span>Hendrycks, D., Burns, C., Kadavath, S., Arora, A., Basart, S., Tang, E., Song, D., and Steinhardt, J. Measuring mathematical problem solving with the MATH dataset. In Vanschoren, J. and Yeung, S. (eds.), *Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks 1, NeurIPS Datasets and Benchmarks 2021, December 2021, virtual*, 2021. URL [https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/be83ab3ecd0db773eb2dc1b0a17836a1-Abstract-round2.html) [be83ab3ecd0db773eb2dc1b0a17836a1-Abstract-round2.html](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/be83ab3ecd0db773eb2dc1b0a17836a1-Abstract-round2.html).\\n- <span id=\"page-14-12\"></span>Hinton, G. E., Vinyals, O., and Dean, J. Distilling the knowledge in a neural network. *CoRR*, abs/1503.02531, 2015. URL <http://arxiv.org/abs/1503.02531>.\\n- <span id=\"page-14-2\"></span>Hu, J. REINFORCE++: A simple and efficient approach for aligning large language models. *CoRR*, abs/2501.03262, 2025. doi: 10.48550/ARXIV.2501.03262. URL <https://doi.org/10.48550/arXiv.2501.03262>.\\n- <span id=\"page-14-8\"></span>Hu, J., Zhang, Y., Han, Q., Jiang, D., Zhang, X., and Shum, H. Open-reasoner-zero: An open source approach to scaling up reinforcement learning on the base model. *CoRR*, abs/2503.24290, 2025. doi: 10.48550/ARXIV.2503.24290. URL [https:](https://doi.org/10.48550/arXiv.2503.24290) [//doi.org/10.48550/arXiv.2503.24290](https://doi.org/10.48550/arXiv.2503.24290).\\n- <span id=\"page-14-13\"></span>Hubinger, E., van Merwijk, C., Mikulik, V., Skalse, J., and Garrabrant, S. Risks from learned optimization in advanced machine learning systems. *CoRR*, abs/1906.01820, 2019. URL <http://arxiv.org/abs/1906.01820>.\\n- <span id=\"page-14-1\"></span>Hughes, E., Dennis, M. D., Parker-Holder, J., Behbahani, F. M. P., Mavalankar, A., Shi, Y., Schaul, T., and Rockt\u00e4schel, T. Position: Open-endedness is essential for artificial superhuman intelligence. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=Bc4vZ2CX7E>.\\n- <span id=\"page-14-3\"></span>Hui, B., Yang, J., Cui, Z., Yang, J., Liu, D., Zhang, L., Liu, T., Zhang, J., Yu, B., Dang, K., Yang, A., Men, R., Huang, F., Ren, X., Ren, X., Zhou, J., and Lin, J. Qwen2.5-coder technical report. *CoRR*, abs/2409.12186, 2024. doi: 10.48550/ARXIV.2409.12186. URL <https://doi.org/10.48550/arXiv.2409.12186>.\\n- <span id=\"page-14-0\"></span>Jaech, A., Kalai, A., Lerer, A., Richardson, A., El-Kishky, A., Low, A., Helyar, A., Madry, A., Beutel, A., Carney, A., et al. Openai o1 system card. *arXiv preprint arXiv:2412.16720*, 2024.\\n- <span id=\"page-14-4\"></span>Jain, N., Han, K., Gu, A., Li, W., Yan, F., Zhang, T., Wang, S., Solar-Lezama, A., Sen, K., and Stoica, I. Livecodebench: Holistic and contamination free evaluation of large language models for code. *CoRR*, abs/2403.07974, 2024. doi: 10.48550/ARXIV.2403.07974. URL <https://doi.org/10.48550/arXiv.2403.07974>.\\n- <span id=\"page-14-11\"></span>Kirchner, J. H., Chen, Y., Edwards, H., Leike, J., McAleese, N., and Burda, Y. Prover-verifier games improve legibility of LLM outputs. *CoRR*, abs/2407.13692, 2024. doi: 10.48550/ARXIV.2407.13692. URL <https://doi.org/10.48550/arXiv.2407.13692>.\\n- <span id=\"page-14-14\"></span>Ladosz, P., Weng, L., Kim, M., and Oh, H. Exploration in deep reinforcement learning: A survey. *Inf. Fusion*, 85:1\u201322, 2022. doi: 10.1016/J.INFFUS.2022.03.003. URL <https://doi.org/10.1016/j.inffus.2022.03.003>.\\n- <span id=\"page-15-0\"></span>Lambert, N., Morrison, J., Pyatkin, V., Huang, S., Ivison, H., Brahman, F., Miranda, L. J. V., Liu, A., Dziri, N., Lyu, S., Gu, Y., Malik, S., Graf, V., Hwang, J. D., Yang, J., Bras, R. L., Tafjord, O., Wilhelm, C., Soldaini, L., Smith, N. A., Wang, Y., Dasigi, P., and Hajishirzi, H. T\u00fclu 3: Pushing frontiers in open language model post-training. *CoRR*, abs/2411.15124, 2024. doi: 10.48550/ARXIV.2411.15124. URL <https://doi.org/10.48550/arXiv.2411.15124>.\\n- <span id=\"page-15-13\"></span>Laskin, M., Yarats, D., Liu, H., Lee, K., Zhan, A., Lu, K., Cang, C., Pinto, L., and Abbeel, P. URLB: unsupervised reinforcement learning benchmark. In Vanschoren, J. and Yeung, S. (eds.), *Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks 1, NeurIPS Datasets and Benchmarks 2021, December 2021, virtual*, 2021. URL [https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/091d584fced301b442654dd8c23b3fc9-Abstract-round2.html) [091d584fced301b442654dd8c23b3fc9-Abstract-round2.html](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/091d584fced301b442654dd8c23b3fc9-Abstract-round2.html).\\n- <span id=\"page-15-15\"></span>Leike, J. and Sutskever, I. Introducing superalignment. <https://openai.com/index/introducing-superalignment/>, 2023. OpenAI Blog.\\n- <span id=\"page-15-8\"></span>Li, J., Guo, D., Yang, D., Xu, R., Wu, Y., and He, J. Codei/o: Condensing reasoning patterns via code input-output prediction. *CoRR*, abs/2502.07316, 2025. doi: 10.48550/ARXIV.2502.07316. URL <https://doi.org/10.48550/arXiv.2502.07316>.\\n- <span id=\"page-15-17\"></span>Li, R., Fu, J., Zhang, B., Huang, T., Sun, Z., Lyu, C., Liu, G., Jin, Z., and Li, G. TACO: topics in algorithmic code generation dataset. *CoRR*, abs/2312.14852, 2023. doi: 10.48550/ARXIV.2312.14852. URL <https://doi.org/10.48550/arXiv.2312.14852>.\\n- <span id=\"page-15-9\"></span>Liu, J. and Zhang, L. Code-r1: Reproducing r1 for code with reliable rewards. *GitHub*, 2025.\\n- <span id=\"page-15-7\"></span>Liu, J., Xia, C. S., Wang, Y., and Zhang, L. Is your code generated by chatGPT really correct? rigorous evaluation of large language models for code generation. In *Thirty-seventh Conference on Neural Information Processing Systems*, 2023. URL <https://openreview.net/forum?id=1qvx610Cu7>.\\n- <span id=\"page-15-10\"></span>Liu, Z., Chen, C., Li, W., Qi, P., Pang, T., Du, C., Lee, W. S., and Lin, M. Understanding r1-zero-like training: A critical perspective. *CoRR*, abs/2503.20783, 2025. doi: 10.48550/ARXIV.2503.20783. URL <https://doi.org/10.48550/arXiv.2503.20783>.\\n- <span id=\"page-15-18\"></span>Lopez, R. H. Q. Complexipy: An extremely fast python library to calculate the cognitive complexity of python files, written in rust, 2025. URL <https://github.com/rohaquinlop/complexipy>. Accessed: 2025-04-06.\\n- <span id=\"page-15-6\"></span>Loshchilov, I. and Hutter, F. Decoupled weight decay regularization. In *7th International Conference on Learning Representations, ICLR 2019, New Orleans, LA, USA, May 6-9, 2019*. OpenReview.net, 2019. URL <https://openreview.net/forum?id=Bkg6RiCqY7>.\\n- <span id=\"page-15-16\"></span>Morris, J. There are no new ideas in ai. . . only new datasets. <https://blog.jxmo.io/p/there-are-no-new-ideas-in-ai-only>, 2025.\\n- <span id=\"page-15-2\"></span>OpenAI. Openai o3-mini, January 2025a. URL <https://openai.com/index/openai-o3-mini/>. Accessed: 2025-04-17.\\n- <span id=\"page-15-1\"></span>OpenAI. Introducing openai o3 and o4-mini, April 2025b. URL <https://openai.com/index/introducing-o3-and-o4-mini/>. Accessed: 2025-04-17.\\n- <span id=\"page-15-12\"></span>OpenAI, Plappert, M., Sampedro, R., Xu, T., Akkaya, I., Kosaraju, V., Welinder, P., D\\'Sa, R., Petron, A., de Oliveira Pinto, H. P., Paino, A., Noh, H., Weng, L., Yuan, Q., Chu, C., and Zaremba, W. Asymmetric self-play for automatic goal discovery in robotic manipulation. *CoRR*, abs/2101.04882, 2021. URL <https://arxiv.org/abs/2101.04882>.\\n- <span id=\"page-15-4\"></span>Ouyang, L., Wu, J., Jiang, X., Almeida, D., Wainwright, C., Mishkin, P., Zhang, C., Agarwal, S., Slama, K., Ray, A., et al. Training language models to follow instructions with human feedback. *Advances in neural information processing systems*, 35:27730\u201327744, 2022.\\n- <span id=\"page-15-14\"></span>Poesia, G., Broman, D., Haber, N., and Goodman, N. D. Learning formal mathematics from intrinsic motivation. In Globersons, A., Mackey, L., Belgrave, D., Fan, A., Paquet, U., Tomczak, J. M., and Zhang, C. (eds.), *Advances in Neural Information Processing Systems 38: Annual Conference on Neural Information Processing Systems 2024, NeurIPS 2024, Vancouver, BC, Canada, December 10 - 15, 2024*, 2024. URL [http://papers.nips.cc/paper\\\\\\\\_files/paper/2024/hash/](http://papers.nips.cc/paper_files/paper/2024/hash/4b8001fc75f0532827472ea5a16af9ca-Abstract-Conference.html) [4b8001fc75f0532827472ea5a16af9ca-Abstract-Conference.html](http://papers.nips.cc/paper_files/paper/2024/hash/4b8001fc75f0532827472ea5a16af9ca-Abstract-Conference.html).\\n- <span id=\"page-15-5\"></span>Radford, A., Wu, J., Child, R., Luan, D., Amodei, D., Sutskever, I., et al. Language models are unsupervised multitask learners. *OpenAI blog*, 1(8):9, 2019.\\n- <span id=\"page-15-3\"></span>Ren, Z. Z., Shao, Z., Song, J., Xin, H., Wang, H., Zhao, W., Zhang, L., Fu, Z., Zhu, Q., Yang, D., Wu, Z. F., Gou, Z., Ma, S., Tang, H., Liu, Y., Gao, W., Guo, D., and Ruan, C. Deepseek-prover-v2: Advancing formal mathematical reasoning via reinforcement learning for subgoal decomposition, 2025. URL <https://arxiv.org/abs/2504.21801>.\\n- <span id=\"page-15-11\"></span>Schaul, T. Boundless socratic learning with language games. *arXiv preprint arXiv:2411.16905*, 2024.\\n- <span id=\"page-16-9\"></span>Schmidhuber, J. Exploring the predictable. In *Advances in evolutionary computing: theory and applications*, pp. 579\u2013612. Springer, 2003.\\n- <span id=\"page-16-10\"></span>Schmidhuber, J. POWERPLAY: training an increasingly general problem solver by continually searching for the simplest still unsolvable problem. *CoRR*, abs/1112.5309, 2011. URL <http://arxiv.org/abs/1112.5309>.\\n- <span id=\"page-16-7\"></span>Shao, Z., Wang, P., Zhu, Q., Xu, R., Song, J., Zhang, M., Li, Y. K., Wu, Y., and Guo, D. Deepseekmath: Pushing the limits of mathematical reasoning in open language models. *CoRR*, abs/2402.03300, 2024. doi: 10.48550/ARXIV.2402.03300. URL <https://doi.org/10.48550/arXiv.2402.03300>.\\n- <span id=\"page-16-16\"></span>Sheng, G., Zhang, C., Ye, Z., Wu, X., Zhang, W., Zhang, R., Peng, Y., Lin, H., and Wu, C. Hybridflow: A flexible and efficient RLHF framework. In *Proceedings of the Twentieth European Conference on Computer Systems, EuroSys 2025, Rotterdam, The Netherlands, 30 March 2025 - 3 April 2025*, pp. 1279\u20131297. ACM, 2025. doi: 10.1145/3689031.3696075. URL [https:](https://doi.org/10.1145/3689031.3696075) [//doi.org/10.1145/3689031.3696075](https://doi.org/10.1145/3689031.3696075).\\n- <span id=\"page-16-15\"></span>Silver, D. and Sutton, R. S. The era of experience. [https://storage.googleapis.com/deepmind-media/Era-of-Experience%](https://storage.googleapis.com/deepmind-media/Era-of-Experience%20/The%20Era%20of%20Experience%20Paper.pdf) [20/The%20Era%20of%20Experience%20Paper.pdf](https://storage.googleapis.com/deepmind-media/Era-of-Experience%20/The%20Era%20of%20Experience%20Paper.pdf), 2025.\\n- <span id=\"page-16-11\"></span>Silver, D., Huang, A., Maddison, C. J., Guez, A., Sifre, L., van den Driessche, G., Schrittwieser, J., Antonoglou, I., Panneershelvam, V., Lanctot, M., Dieleman, S., Grewe, D., Nham, J., Kalchbrenner, N., Sutskever, I., Lillicrap, T. P., Leach, M., Kavukcuoglu, K., Graepel, T., and Hassabis, D. Mastering the game of go with deep neural networks and tree search. *Nat.*, 529(7587):484\u2013489, 2016. doi: 10.1038/NATURE16961. URL <https://doi.org/10.1038/nature16961>.\\n- <span id=\"page-16-3\"></span>Silver, D., Hubert, T., Schrittwieser, J., Antonoglou, I., Lai, M., Guez, A., Lanctot, M., Sifre, L., Kumaran, D., Graepel, T., Lillicrap, T. P., Simonyan, K., and Hassabis, D. Mastering chess and shogi by self-play with a general reinforcement learning algorithm. *CoRR*, abs/1712.01815, 2017. URL <http://arxiv.org/abs/1712.01815>.\\n- <span id=\"page-16-4\"></span>Stuart, T. *Understanding computation - from simple machines to impossible programs*. O\\'Reilly, 2015. ISBN 978-1-449-32927-3. URL <http://www.oreilly.de/catalog/9781449329273/index.html>.\\n- <span id=\"page-16-5\"></span>Sukhbaatar, S., Lin, Z., Kostrikov, I., Synnaeve, G., Szlam, A., and Fergus, R. Intrinsic motivation and automatic curricula via asymmetric self-play. In *6th International Conference on Learning Representations, ICLR 2018, Vancouver, BC, Canada, April 30 - May 3, 2018, Conference Track Proceedings*. OpenReview.net, 2018. URL <https://openreview.net/forum?id=SkT5Yg-RZ>.\\n- <span id=\"page-16-8\"></span>Suteu, M. and Guo, Y. Regularizing deep multi-task networks using orthogonal gradients. *CoRR*, abs/1912.06844, 2019. URL <http://arxiv.org/abs/1912.06844>.\\n- <span id=\"page-16-2\"></span>Sutskever, I., Vinyals, O., and Le, Q. V. Neurips 2024 test of time award session: Sequence to sequence learning with neural networks. Conference session, December 2024. URL <https://neurips.cc/virtual/2024/test-of-time/105032>.\\n- <span id=\"page-16-13\"></span>Sutton, R. S. Verification, the key to ai. <http://incompleteideas.net/IncIdeas/KeytoAI.html>, 2001.\\n- <span id=\"page-16-0\"></span>Team, K., Du, A., Gao, B., Xing, B., Jiang, C., Chen, C., Li, C., Xiao, C., Du, C., Liao, C., Tang, C., Wang, C., Zhang, D., Yuan, E., Lu, E., Tang, F., Sung, F., Wei, G., Lai, G., Guo, H., Zhu, H., Ding, H., Hu, H., Yang, H., Zhang, H., Yao, H., Zhao, H., Lu, H., Li, H., Yu, H., Gao, H., Zheng, H., Yuan, H., Chen, J., Guo, J., Su, J., Wang, J., Zhao, J., Zhang, J., Liu, J., Yan, J., Wu, J., Shi, L., Ye, L., Yu, L., Dong, M., Zhang, N., Ma, N., Pan, Q., Gong, Q., Liu, S., Ma, S., Wei, S., Cao, S., Huang, S., Jiang, T., Gao, W., Xiong, W., He, W., Huang, W., Wu, W., He, W., Wei, X., Jia, X., Wu, X., Xu, X., Zu, X., Zhou, X., Pan, X., Charles, Y., Li, Y., Hu, Y., Liu, Y., Chen, Y., Wang, Y., Liu, Y., Qin, Y., Liu, Y., Yang, Y., Bao, Y., Du, Y., Wu, Y., Wang, Y., Zhou, Z., Wang, Z., Li, Z., Zhu, Z., Zhang, Z., Wang, Z., Yang, Z., Huang, Z., Huang, Z., Xu, Z., and Yang, Z. Kimi k1.5: Scaling reinforcement learning with llms. *CoRR*, abs/2501.12599, 2025. doi: 10.48550/ARXIV.2501.12599. URL <https://doi.org/10.48550/arXiv.2501.12599>.\\n- <span id=\"page-16-1\"></span>Villalobos, P., Ho, A., Sevilla, J., Besiroglu, T., Heim, L., and Hobbhahn, M. Position: Will we run out of data? limits of LLM scaling based on human-generated data. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=ViZcgDQjyG>.\\n- <span id=\"page-16-14\"></span>Wang, H., Yue, Y., Lu, R., Shi, J., Zhao, A., Wang, S., Song, S., and Huang, G. Model surgery: Modulating LLM\\'s behavior via simple parameter editing. In *Proceedings of the 2025 Conference of the Nations of the Americas Chapter of the Association for Computational Linguistics*, pp. 6337\u20136357, 2025a.\\n- <span id=\"page-16-12\"></span>Wang, R., Lehman, J., Clune, J., and Stanley, K. O. Paired open-ended trailblazer (POET): endlessly generating increasingly complex and diverse learning environments and their solutions. *CoRR*, abs/1901.01753, 2019. URL <http://arxiv.org/abs/1901.01753>.\\n- <span id=\"page-16-6\"></span>Wang, S., Yang, Q., Gao, J., Lin, M. G., Chen, H., Wu, L., Jia, N., Song, S., and Huang, G. Train once, get a family: State-adaptive balances for offline-to-online reinforcement learning. In *Thirty-seventh Conference on Neural Information Processing Systems*, 2023. URL <https://openreview.net/forum?id=vtoY8qJjTR>.\\n- <span id=\"page-17-15\"></span>Wang, S., Liu, C., Zheng, Z., Qi, S., Chen, S., Yang, Q., Zhao, A., Wang, C., Song, S., and Huang, G. Boosting LLM agents with recursive contemplation for effective deception handling. In Ku, L.-W., Martins, A., and Srikumar, V. (eds.), *Findings of the Association for Computational Linguistics: ACL 2024*, pp. 9909\u20139953, Bangkok, Thailand, August 2024. Association for Computational Linguistics. doi: 10.18653/v1/2024.findings-acl.591. URL <https://aclanthology.org/2024.findings-acl.591/>.\\n- <span id=\"page-17-8\"></span>Wang, Y., Yang, Q., Zeng, Z., Ren, L., Liu, L., Peng, B., Cheng, H., He, X., Wang, K., Gao, J., Chen, W., Wang, S., Du, S. S., and Shen, Y. Reinforcement learning for reasoning in large language models with one training example, 2025b. URL <https://arxiv.org/abs/2504.20571>.\\n- <span id=\"page-17-14\"></span>Wu, Q., Bansal, G., Zhang, J., Wu, Y., Zhang, S., Zhu, E., Li, B., Jiang, L., Zhang, X., and Wang, C. Autogen: Enabling next-gen LLM applications via multi-agent conversation framework. *CoRR*, abs/2308.08155, 2023. doi: 10.48550/ARXIV.2308.08155. URL <https://doi.org/10.48550/arXiv.2308.08155>.\\n- <span id=\"page-17-13\"></span>Wu, Y., Yue, T., Zhang, S., Wang, C., and Wu, Q. Stateflow: Enhancing LLM task-solving through state-driven workflows. *CoRR*, abs/2403.11322, 2024. doi: 10.48550/ARXIV.2403.11322. URL <https://doi.org/10.48550/arXiv.2403.11322>.\\n- <span id=\"page-17-7\"></span>Xie, T., Gao, Z., Ren, Q., Luo, H., Hong, Y., Dai, B., Zhou, J., Qiu, K., Wu, Z., and Luo, C. Logic-rl: Unleashing LLM reasoning with rule-based reinforcement learning. *CoRR*, abs/2502.14768, 2025. doi: 10.48550/ARXIV.2502.14768. URL <https://doi.org/10.48550/arXiv.2502.14768>.\\n- <span id=\"page-17-11\"></span>Xu, F., Yan, H., Ma, C., Zhao, H., Sun, Q., Cheng, K., He, J., Liu, J., and Wu, Z. Genius: A generalizable and purely unsupervised self-training framework for advanced reasoning, 2025. URL <https://arxiv.org/abs/2504.08672>.\\n- <span id=\"page-17-3\"></span>Yang, A., Yang, B., Zhang, B., Hui, B., Zheng, B., Yu, B., Li, C., Liu, D., Huang, F., Wei, H., Lin, H., Yang, J., Tu, J., Zhang, J., Yang, J., Yang, J., Zhou, J., Lin, J., Dang, K., Lu, K., Bao, K., Yang, K., Yu, L., Li, M., Xue, M., Zhang, P., Zhu, Q., Men, R., Lin, R., Li, T., Xia, T., Ren, X., Ren, X., Fan, Y., Su, Y., Zhang, Y., Wan, Y., Liu, Y., Cui, Z., Zhang, Z., and Qiu, Z. Qwen2.5 technical report. *CoRR*, abs/2412.15115, 2024a. doi: 10.48550/ARXIV.2412.15115. URL <https://doi.org/10.48550/arXiv.2412.15115>.\\n- <span id=\"page-17-4\"></span>Yang, A., Zhang, B., Hui, B., Gao, B., Yu, B., Li, C., Liu, D., Tu, J., Zhou, J., Lin, J., Lu, K., Xue, M., Lin, R., Liu, T., Ren, X., and Zhang, Z. Qwen2.5-math technical report: Toward mathematical expert model via self-improvement. *CoRR*, abs/2409.12122, 2024b. doi: 10.48550/ARXIV.2409.12122. URL <https://doi.org/10.48550/arXiv.2409.12122>.\\n- <span id=\"page-17-1\"></span>Yao, S., Zhao, J., Yu, D., Du, N., Shafran, I., Narasimhan, K. R., and Cao, Y. React: Synergizing reasoning and acting in language models. In *The Eleventh International Conference on Learning Representations, ICLR 2023, Kigali, Rwanda, May 1-5, 2023*. OpenReview.net, 2023. URL [https://openreview.net/forum?id=WE\\\\\\\\_vluYUL-X](https://openreview.net/forum?id=WE_vluYUL-X).\\n- <span id=\"page-17-10\"></span>Ye, Z., Agarwal, R., Liu, T., Joshi, R., Velury, S., Le, Q. V., Tan, Q., and Liu, Y. Evolving alignment via asymmetric self-play. *CoRR*, abs/2411.00062, 2024. doi: 10.48550/ARXIV.2411.00062. URL <https://doi.org/10.48550/arXiv.2411.00062>.\\n- <span id=\"page-17-5\"></span>Yu, Q., Zhang, Z., Zhu, R., Yuan, Y., Zuo, X., Yue, Y., Fan, T., Liu, G., Liu, L., Liu, X., Lin, H., Lin, Z., Ma, B., Sheng, G., Tong, Y., Zhang, C., Zhang, M., Zhang, W., Zhu, H., Zhu, J., Chen, J., Chen, J., Wang, C., Yu, H., Dai, W., Song, Y., Wei, X., Zhou, H., Liu, J., Ma, W., Zhang, Y., Yan, L., Qiao, M., Wu, Y., and Wang, M. DAPO: an open-source LLM reinforcement learning system at scale. *CoRR*, abs/2503.14476, 2025. doi: 10.48550/ARXIV.2503.14476. URL <https://doi.org/10.48550/arXiv.2503.14476>.\\n- <span id=\"page-17-9\"></span>Yuan, W., Pang, R. Y., Cho, K., Li, X., Sukhbaatar, S., Xu, J., and Weston, J. Self-rewarding language models. *URL https://arxiv. org/abs/2401.10020*, 2024.\\n- <span id=\"page-17-6\"></span>Yuan, Y., Yu, Q., Zuo, X., Zhu, R., Xu, W., Chen, J., Wang, C., Fan, T., Du, Z., Wei, X., et al. Vapo: Efficient and reliable reinforcement learning for advanced reasoning tasks. *arXiv preprint arXiv:2504.05118*, 2025.\\n- <span id=\"page-17-2\"></span>Yue, Y., Lu, R., Kang, B., Song, S., and Huang, G. Understanding, predicting and better resolving q-value divergence in offline-rl. *Advances in Neural Information Processing Systems*, 36:60247\u201360277, 2023.\\n- <span id=\"page-17-12\"></span>Yue, Y., Wang, Y., Kang, B., Han, Y., Wang, S., Song, S., Feng, J., and Huang, G. Deer-vla: Dynamic inference of multimodal large language models for efficient robot execution. In Globersons, A., Mackey, L., Belgrave, D., Fan, A., Paquet, U., Tomczak, J. M., and Zhang, C. (eds.), *Advances in Neural Information Processing Systems 38: Annual Conference on Neural Information Processing Systems 2024, NeurIPS 2024, Vancouver, BC, Canada, December 10 - 15, 2024*, 2024. URL [http://papers.nips.cc/paper\\\\\\\\_](http://papers.nips.cc/paper_files/paper/2024/hash/67b0e7c7c2a5780aeefe3b79caac106e-Abstract-Conference.html) [files/paper/2024/hash/67b0e7c7c2a5780aeefe3b79caac106e-Abstract-Conference.html](http://papers.nips.cc/paper_files/paper/2024/hash/67b0e7c7c2a5780aeefe3b79caac106e-Abstract-Conference.html).\\n- <span id=\"page-17-0\"></span>Yue, Y., Chen, Z., Lu, R., Zhao, A., Wang, Z., Yue, Y., Song, S., and Huang, G. Does reinforcement learning really incentivize reasoning capacity in llms beyond the base model?, 2025. URL <https://arxiv.org/abs/2504.13837>.\\n- <span id=\"page-17-16\"></span>Zelikman, E., Wu, Y., Mu, J., and Goodman, N. Star: Bootstrapping reasoning with reasoning. *Advances in Neural Information Processing Systems*, 35:15476\u201315488, 2022.\\n- <span id=\"page-18-5\"></span>Zeng, H., Jiang, D., Wang, H., Nie, P., Chen, X., and Chen, W. ACECODER: acing coder RL via automated test-case synthesis. *CoRR*, abs/2502.01718, 2025a. doi: 10.48550/ARXIV.2502.01718. URL <https://doi.org/10.48550/arXiv.2502.01718>.\\n- <span id=\"page-18-1\"></span>Zeng, W., Huang, Y., Liu, Q., Liu, W., He, K., Ma, Z., and He, J. Simplerl-zoo: Investigating and taming zero reinforcement learning for open base models in the wild. *CoRR*, abs/2503.18892, 2025b. doi: 10.48550/ARXIV.2503.18892. URL [https:](https://doi.org/10.48550/arXiv.2503.18892) [//doi.org/10.48550/arXiv.2503.18892](https://doi.org/10.48550/arXiv.2503.18892).\\n- <span id=\"page-18-0\"></span>Zhang, C., Deng, Y., Lin, X., Wang, B., Ng, D., Ye, H., Li, X., Xiao, Y., Mo, Z., Zhang, Q., et al. 100 days after deepseek-r1: A survey on replication studies and more directions for reasoning language models. *arXiv preprint arXiv:2505.00551*, 2025a.\\n- <span id=\"page-18-7\"></span>Zhang, Q., Wu, H., Zhang, C., Zhao, P., and Bian, Y. Right question is already half the answer: Fully unsupervised llm reasoning incentivization, 2025b. URL <https://arxiv.org/abs/2504.05812>.\\n- <span id=\"page-18-3\"></span>Zhang, Y. and Yang, Q. A survey on multi-task learning. *IEEE transactions on knowledge and data engineering*, 34(12):5586\u20135609, 2021.\\n- <span id=\"page-18-4\"></span>Zhao, A., Lin, M. G., Li, Y., Liu, Y., and Huang, G. A mixture of surprises for unsupervised reinforcement learning. In Koyejo, S., Mohamed, S., Agarwal, A., Belgrave, D., Cho, K., and Oh, A. (eds.), *Advances in Neural Information Processing Systems 35: Annual Conference on Neural Information Processing Systems 2022, NeurIPS 2022, New Orleans, LA, USA, November 28 - December 9, 2022*, 2022. URL [http://papers.nips.cc/paper\\\\\\\\_files/paper/2022/hash/](http://papers.nips.cc/paper_files/paper/2022/hash/a7667ee5d545a43d2f0fda98863c260e-Abstract-Conference.html) [a7667ee5d545a43d2f0fda98863c260e-Abstract-Conference.html](http://papers.nips.cc/paper_files/paper/2022/hash/a7667ee5d545a43d2f0fda98863c260e-Abstract-Conference.html).\\n- <span id=\"page-18-10\"></span>Zhao, A., Huang, D., Xu, Q., Lin, M., Liu, Y., and Huang, G. Expel: LLM agents are experiential learners. In Wooldridge, M. J., Dy, J. G., and Natarajan, S. (eds.), *Thirty-Eighth AAAI Conference on Artificial Intelligence, AAAI 2024, Thirty-Sixth Conference on Innovative Applications of Artificial Intelligence, IAAI 2024, Fourteenth Symposium on Educational Advances in Artificial Intelligence, EAAI 2014, February 20-27, 2024, Vancouver, Canada*, pp. 19632\u201319642. AAAI Press, 2024. doi: 10.1609/AAAI.V38I17.29936. URL <https://doi.org/10.1609/aaai.v38i17.29936>.\\n- <span id=\"page-18-2\"></span>Zhao, A., Xu, Q., Lin, M., Wang, S., Liu, Y., Zheng, Z., and Huang, G. Diver-ct: Diversity-enhanced red teaming large language model assistants with relaxing constraints. In Walsh, T., Shah, J., and Kolter, Z. (eds.), *AAAI-25, Sponsored by the Association for the Advancement of Artificial Intelligence, February 25 - March 4, 2025, Philadelphia, PA, USA*, pp. 26021\u201326030. AAAI Press, 2025a. doi: 10.1609/AAAI.V39I24.34797. URL <https://doi.org/10.1609/aaai.v39i24.34797>.\\n- <span id=\"page-18-6\"></span>Zhao, A., Zhu, E., Lu, R., Lin, M., Liu, Y., and Huang, G. Self-referencing agents for unsupervised reinforcement learning. *Neural Networks*, 188:107448, 2025b. doi: 10.1016/J.NEUNET.2025.107448. URL [https://doi.org/10.1016/j.neunet.2025.](https://doi.org/10.1016/j.neunet.2025.107448) [107448](https://doi.org/10.1016/j.neunet.2025.107448).\\n- <span id=\"page-18-9\"></span>Zitkovich, B., Yu, T., Xu, S., Xu, P., Xiao, T., Xia, F., Wu, J., Wohlhart, P., Welker, S., Wahid, A., Vuong, Q., Vanhoucke, V., Tran, H. T., Soricut, R., Singh, A., Singh, J., Sermanet, P., Sanketi, P. R., Salazar, G., Ryoo, M. S., Reymann, K., Rao, K., Pertsch, K., Mordatch, I., Michalewski, H., Lu, Y., Levine, S., Lee, L., Lee, T. E., Leal, I., Kuang, Y., Kalashnikov, D., Julian, R., Joshi, N. J., Irpan, A., Ichter, B., Hsu, J., Herzog, A., Hausman, K., Gopalakrishnan, K., Fu, C., Florence, P., Finn, C., Dubey, K. A., Driess, D., Ding, T., Choromanski, K. M., Chen, X., Chebotar, Y., Carbajal, J., Brown, N., Brohan, A., Arenas, M. G., and Han, K. RT-2: vision-language-action models transfer web knowledge to robotic control. In Tan, J., Toussaint, M., and Darvish, K. (eds.), *Conference on Robot Learning, CoRL 2023, 6-9 November 2023, Atlanta, GA, USA*, volume 229 of *Proceedings of Machine Learning Research*, pp. 2165\u20132183. PMLR, 2023. URL <https://proceedings.mlr.press/v229/zitkovich23a.html>.\\n- <span id=\"page-18-8\"></span>Zuo, Y., Zhang, K., Qu, S., Sheng, L., Zhu, X., Qi, B., Sun, Y., Cui, G., Ding, N., and Zhou, B. Ttrl: Test-time reinforcement learning, 2025. URL <https://arxiv.org/abs/2504.16084>.\\n\\n# **Appendix**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Appendix**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n# **Appendix Contents**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Appendix Contents**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n| A | Reinforcement Learning with Verifiable Rewards.                         |    |  |  |  |  |  |\\n|---|-------------------------------------------------------------------------|----|--|--|--|--|--|\\n| B | Implementation Details                                                  |    |  |  |  |  |  |\\n| C | More Results                                                            | 22 |  |  |  |  |  |\\n|   | C.1<br>Out-of-Distribution Performance Breakdown<br>.                   | 22 |  |  |  |  |  |\\n|   | C.2<br>In-Distribution Results<br>.                                     | 22 |  |  |  |  |  |\\n|   | C.3<br>Interplay Between Propose and Solve Roles<br>.                   | 22 |  |  |  |  |  |\\n|   | C.4<br>Complexity and Diversity Metrics of AZR Proposed Tasks<br>.      | 32 |  |  |  |  |  |\\n|   | C.5<br>Generated Code Complexity Dynamics Between Abd/Ded and Ind.<br>. | 32 |  |  |  |  |  |\\n| D | Alternative Approaches Considered                                       | 49 |  |  |  |  |  |\\n|   | D.1<br>Error Deduction Task<br>.                                        | 49 |  |  |  |  |  |\\n|   | D.2<br>Composite Functions as Curriculum Learning<br>.                  | 49 |  |  |  |  |  |\\n|   | D.3<br>Toying with the Initial<br>.<br>p(z)                             | 49 |  |  |  |  |  |\\n|   | D.4<br>Extra Rewards<br>.                                               | 49 |  |  |  |  |  |\\n|   | D.5<br>Environment Transition<br>.                                      | 50 |  |  |  |  |  |\\n\\nA,Reinforcement Learning with Verifiable Rewards.\\r\\nB,Implementation Details\\r\\nC,More Results,22\\r\\n,C.1 Out-of-Distribution Performance Breakdown .,22\\r\\n,C.2 In-Distribution Results .,22\\r\\n,C.3 Interplay Between Propose and Solve Roles .,22\\r\\n,C.4 Complexity and Diversity Metrics of AZR Proposed Tasks .,32\\r\\n,C.5 Generated Code Complexity Dynamics Between Abd/Ded and Ind. .,32\\r\\nD,Alternative Approaches Considered,49\\r\\n,D.1 Error Deduction Task .,49\\r\\n,D.2 Composite Functions as Curriculum Learning .,49\\r\\n,D.3 Toying with the Initial . p(z),49\\r\\n,D.4 Extra Rewards .,49\\r\\n,D.5 Environment Transition .,50\\r\\n{\\n \"headers\": [\\n \"A\",\\n \"Reinforcement Learning with Verifiable Rewards.\"\\n ],\\n \"rows\": [\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"C.2 In-Distribution Results .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"C.3 Interplay Between Propose and Solve Roles .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"C.4 Complexity and Diversity Metrics of AZR Proposed Tasks .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.1 Error Deduction Task .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.2 Composite Functions as Curriculum Learning .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.3 Toying with the Initial . p(z)\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.4 Extra Rewards .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.5 Environment Transition .\"\\n }\\n ]\\n}# <span id=\"page-20-0\"></span>**A. Reinforcement Learning with Verifiable Rewards.**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-20-0\\\\\"></span>**A. Reinforcement Learning with Verifiable Rewards.**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe use reinforcement learning to update our learner LLM, rewarding it based on a task-specific reward function *r<sup>f</sup>* , where the subscript *f* indicates the task. The goal of the RL agent is to maximize the expected discounted sum of rewards. We adopt an online variant of RL, REINFORCE++, which is optimized using the original PPO objective:\\n\\n$$\\\\mathcal{L}\\\\_{\\\\text{PFO}}(\\\\theta) = \\\\mathbb{E}\\\\_{q \\\\sim P(Q), \\\\ o \\\\sim \\\\pi\\\\_{\\\\theta\\\\_{\\\\text{old}}}(O|q)} \\\\left[ \\\\frac{1}{|o|} \\\\sum\\\\_{t=1}^{|o|} \\\\min \\\\left( s\\\\_t(\\\\theta) A\\\\_{f,q}^{\\\\text{norm}}, \\\\ \\\\text{clip} \\\\left( s\\\\_t(\\\\theta), 1 - \\\\epsilon, 1 + \\\\epsilon \\\\right) A\\\\_{f,q}^{\\\\text{norm}} \\\\right) \\\\right],\\\\tag{9}$$\\n\\nwhere *st*(*\u03b8*) is the probability ratio between the new and old policies at timestep *t*, and *A* norm *f,q* is the normalized advantage.\\n\\nREINFORCE++ computes the normalized advantage as:\\n\\n$$A\\\\_{f,q}^{\\\\text{norm}} = \\\\frac{r\\\\_{f,q} - \\\\text{mean}(\\\\{A\\\\_{f,q}\\\\}^B)}{\\\\text{std}(\\\\{A\\\\_{f,q}\\\\}^B)},\\\\tag{10}$$\\n\\nwhere *rf,q* is the outcome reward for question *q*, task *f*, mean and std are calculated across the global batch with batch size *B*. Note that we do not apply any KL penalty to the loss or reward.\\n\\n# <span id=\"page-20-2\"></span>**B. Implementation Details**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-20-2\\\\\"></span>**B. Implementation Details**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe built Absolute Zero Reasoner upon the [veRL codebase](https://github.com/volcengine/verl) [\\\\(Sheng et al.,](#page-16-16) [2025\\\\)](#page-16-16). For code execution, we incorporated components from the [QwQ Python executor.](https://github.com/QwenLM/QwQ/blob/main/eval/eval/math_opensource_utils/python_executor.py) For safer code execution, we recommend using API-based services such as [E2B](https://e2b.dev/) instead.\\n\\nAll experiments were conducted on clusters of A800 GPUs.\\n\\n**Training Hyperparameters.** We show the hyperparameters used in our training in Table [3.](#page-20-1) We do not change them for any of the runs.\\n\\n| Parameter                              | Value                    |  |  |  |  |  |\\n|----------------------------------------|--------------------------|--|--|--|--|--|\\n| Model Configuration                    |                          |  |  |  |  |  |\\n| Max Prompt Length                      | 6144                     |  |  |  |  |  |\\n| Max Response Length                    | 8096                     |  |  |  |  |  |\\n| Seed Batch Factor                      | 4                        |  |  |  |  |  |\\n| Max Programs                           | 16384                    |  |  |  |  |  |\\n| Training Settings                      |                          |  |  |  |  |  |\\n| Train Batch Size                       | 64 * 6                   |  |  |  |  |  |\\n| Learning Rate                          | 1e-6                     |  |  |  |  |  |\\n| Optimizer                              | AdamW                    |  |  |  |  |  |\\n| Grad Clip                              | 1.0                      |  |  |  |  |  |\\n| Total Steps                            | 500                      |  |  |  |  |  |\\n| RL Settings                            |                          |  |  |  |  |  |\\n| Algorithm                              | TRR++ (Section<br>3.3.5) |  |  |  |  |  |\\n| KL Loss                                | False                    |  |  |  |  |  |\\n| KL Reward                              | False                    |  |  |  |  |  |\\n| Entropy Coefficient                    | 0.001                    |  |  |  |  |  |\\n| PPO Epochs                             | 1                        |  |  |  |  |  |\\n| Rollouts<br>N                          | 1                        |  |  |  |  |  |\\n| Rollout Temperature                    | 1.0                      |  |  |  |  |  |\\n| Rollout Top-P                          | 1.0                      |  |  |  |  |  |\\n| References<br>K                        | 6                        |  |  |  |  |  |\\n| Samples to Estimate Task Accuracy<br>N | 8                        |  |  |  |  |  |\\n\\nParameter,Value\\r\\nModel Configuration\\r\\nMax Prompt Length,6144\\r\\nMax Response Length,8096\\r\\nSeed Batch Factor,4\\r\\nMax Programs,16384\\r\\nTraining Settings\\r\\nTrain Batch Size,64 \\\\* 6\\r\\nLearning Rate,1e-6\\r\\nOptimizer,AdamW\\r\\nGrad Clip,1.0\\r\\nTotal Steps,500\\r\\nRL Settings\\r\\nAlgorithm,TRR++ (Section 3.3.5)\\r\\nKL Loss,False\\r\\nKL Reward,False\\r\\nEntropy Coefficient,0.001\\r\\nPPO Epochs,1\\r\\nRollouts N,1\\r\\nRollout Temperature,1.0\\r\\nRollout Top-P,1.0\\r\\nReferences K,6\\r\\nSamples to Estimate Task Accuracy N,8\\r\\n{\\n \"headers\": [\\n \"Parameter\",\\n \"Value\"\\n ],\\n \"rows\": [\\n {\\n \"Parameter\": \"Model Configuration\"\\n },\\n {\\n \"Parameter\": \"Max Prompt Length\",\\n \"Value\": \"6144\"\\n },\\n {\\n \"Parameter\": \"Max Response Length\",\\n \"Value\": \"8096\"\\n },\\n {\\n \"Parameter\": \"Seed Batch Factor\",\\n \"Value\": \"4\"\\n },\\n {\\n \"Parameter\": \"Max Programs\",\\n \"Value\": \"16384\"\\n },\\n {\\n \"Parameter\": \"Training Settings\"\\n },\\n {\\n \"Parameter\": \"Train Batch Size\",\\n \"Value\": \"64 \\\\* 6\"\\n },\\n {\\n \"Parameter\": \"Learning Rate\",\\n \"Value\": \"1e-6\"\\n },\\n {\\n \"Parameter\": \"Optimizer\",\\n \"Value\": \"AdamW\"\\n },\\n {\\n \"Parameter\": \"Grad Clip\",\\n \"Value\": \"1.0\"\\n },\\n {\\n \"Parameter\": \"Total Steps\",\\n \"Value\": \"500\"\\n },\\n {\\n \"Parameter\": \"RL Settings\"\\n },\\n {\\n \"Parameter\": \"Algorithm\",\\n \"Value\": \"TRR++ (Section 3.3.5)\"\\n },\\n {\\n \"Parameter\": \"KL Loss\",\\n \"Value\": \"False\"\\n },\\n {\\n \"Parameter\": \"KL Reward\",\\n \"Value\": \"False\"\\n },\\n {\\n \"Parameter\": \"Entropy Coefficient\",\\n \"Value\": \"0.001\"\\n },\\n {\\n \"Parameter\": \"PPO Epochs\",\\n \"Value\": \"1\"\\n },\\n {\\n \"Parameter\": \"Rollouts N\",\\n \"Value\": \"1\"\\n },\\n {\\n \"Parameter\": \"Rollout Temperature\",\\n \"Value\": \"1.0\"\\n },\\n {\\n \"Parameter\": \"Rollout Top-P\",\\n \"Value\": \"1.0\"\\n },\\n {\\n \"Parameter\": \"References K\",\\n \"Value\": \"6\"\\n },\\n {\\n \"Parameter\": \"Samples to Estimate Task Accuracy N\",\\n \"Value\": \"8\"\\n }\\n ]\\n}<span id=\"page-20-1\"></span>*Table 3.* **Hyperparameters Used During AZR Self-play Training.**\\n\\n| Absolute Zero: Reinforced Self-play Reasoning with Zero Data |  |  |  |  |  |  |\\n|--------------------------------------------------------------|--|--|--|--|--|--|\\n|--------------------------------------------------------------|--|--|--|--|--|--|\\n\\nAbsolute Zero: Reinforced Self-play Reasoning with Zero Data,,,,,,\\r\\n{\\n \"headers\": [\\n \"Absolute Zero: Reinforced Self-play Reasoning with Zero Data\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\"\\n ],\\n \"rows\": []\\n}\\n\\n| Model                                           | Data Curation                                     | Base Model             |  |\\n|-------------------------------------------------|---------------------------------------------------|------------------------|--|\\n| Oat-7B (Liu et al.,<br>2025)                    | 8.5k math pairs (Hendrycks et al.,<br>2021)       | Qwen2.5-7B-Math        |  |\\n| SimpleRL-Zoo (Zeng et al.,<br>2025b)            | 8.5k math pairs (Hendrycks et al.,<br>2021)       | Qwen2.5-7B-Base        |  |\\n| OpenReasonerZero (Hu et al.,<br>2025)           | 57k STEM + math samples                           | Qwen2.5-7B-Base        |  |\\n| PRIME-Zero (Cui et al.,<br>2025)                | 457k math + 27k code problems                     | Qwen2.5Math-7B-Base    |  |\\n| CodeR1-Zero-7B-LC2k-1088 (Liu & Zhang,<br>2025) | 2k Leetcode pairs                                 | Qwen2.5-7B-Instruct-1M |  |\\n| CodeR1-Zero-7B-12k-832 (Liu & Zhang,<br>2025)   | 2k Leetcode + 10k TACO pairs (Li et al.,<br>2023) | Qwen2.5-7B-Instruct-1M |  |\\n| AceCoder-7B-Ins-RM (Zeng et al.,<br>2025a)      | 22k code data                                     | Qwen2.5-7B-Instruct    |  |\\n| AceCoder-7B-Ins-Rule (Zeng et al.,<br>2025a)    | 22k code data                                     | Qwen2.5-7B-Instruct    |  |\\n| AceCoder-7B-Code-RM (Zeng et al.,<br>2025a)     | 22k code data                                     | Qwen2.5-7B-Coder       |  |\\n| AceCoder-7B-Code-Rule (Zeng et al.,<br>2025a)   | 22k code data                                     | Qwen2.5-7B-Coder       |  |\\n| Qwen-7B-Instruct (Yang et al.,<br>2024a)        | 1M SFT + 150k RL pairs                            | Qwen2.5-7B-Base        |  |\\n| AZR-7B (Ours)                                   | No data                                           | Qwen2.5-7B-Base        |  |\\n| AZR-7B-Coder (Ours)                             | No data                                           | Qwen2.5-7B-Coder       |  |\\n\\nModel,Data Curation,Base Model\\r\\n\"Oat-7B (Liu et al., 2025)\",\"8.5k math pairs (Hendrycks et al., 2021)\",Qwen2.5-7B-Math\\r\\n\"SimpleRL-Zoo (Zeng et al., 2025b)\",\"8.5k math pairs (Hendrycks et al., 2021)\",Qwen2.5-7B-Base\\r\\n\"OpenReasonerZero (Hu et al., 2025)\",57k STEM + math samples,Qwen2.5-7B-Base\\r\\n\"PRIME-Zero (Cui et al., 2025)\",457k math + 27k code problems,Qwen2.5Math-7B-Base\\r\\n\"CodeR1-Zero-7B-LC2k-1088 (Liu & Zhang, 2025)\",2k Leetcode pairs,Qwen2.5-7B-Instruct-1M\\r\\n\"CodeR1-Zero-7B-12k-832 (Liu & Zhang, 2025)\",\"2k Leetcode + 10k TACO pairs (Li et al., 2023)\",Qwen2.5-7B-Instruct-1M\\r\\n\"AceCoder-7B-Ins-RM (Zeng et al., 2025a)\",22k code data,Qwen2.5-7B-Instruct\\r\\n\"AceCoder-7B-Ins-Rule (Zeng et al., 2025a)\",22k code data,Qwen2.5-7B-Instruct\\r\\n\"AceCoder-7B-Code-RM (Zeng et al., 2025a)\",22k code data,Qwen2.5-7B-Coder\\r\\n\"AceCoder-7B-Code-Rule (Zeng et al., 2025a)\",22k code data,Qwen2.5-7B-Coder\\r\\n\"Qwen-7B-Instruct (Yang et al., 2024a)\",1M SFT + 150k RL pairs,Qwen2.5-7B-Base\\r\\nAZR-7B (Ours),No data,Qwen2.5-7B-Base\\r\\nAZR-7B-Coder (Ours),No data,Qwen2.5-7B-Coder\\r\\n{\\n \"headers\": [\\n \"Model\",\\n \"Data Curation\",\\n \"Base Model\"\\n ],\\n \"rows\": [\\n {\\n \"Model\": \"Oat-7B (Liu et al., 2025)\",\\n \"Data Curation\": \"8.5k math pairs (Hendrycks et al., 2021)\",\\n \"Base Model\": \"Qwen2.5-7B-Math\"\\n },\\n {\\n \"Model\": \"SimpleRL-Zoo (Zeng et al., 2025b)\",\\n \"Data Curation\": \"8.5k math pairs (Hendrycks et al., 2021)\",\\n \"Base Model\": \"Qwen2.5-7B-Base\"\\n },\\n {\\n \"Model\": \"OpenReasonerZero (Hu et al., 2025)\",\\n \"Data Curation\": \"57k STEM + math samples\",\\n \"Base Model\": \"Qwen2.5-7B-Base\"\\n },\\n {\\n \"Model\": \"PRIME-Zero (Cui et al., 2025)\",\\n \"Data Curation\": \"457k math + 27k code problems\",\\n \"Base Model\": \"Qwen2.5Math-7B-Base\"\\n },\\n {\\n \"Model\": \"CodeR1-Zero-7B-LC2k-1088 (Liu & Zhang, 2025)\",\\n \"Data Curation\": \"2k Leetcode pairs\",\\n \"Base Model\": \"Qwen2.5-7B-Instruct-1M\"\\n },\\n {\\n \"Model\": \"CodeR1-Zero-7B-12k-832 (Liu & Zhang, 2025)\",\\n \"Data Curation\": \"2k Leetcode + 10k TACO pairs (Li et al., 2023)\",\\n \"Base Model\": \"Qwen2.5-7B-Instruct-1M\"\\n },\\n {\\n \"Model\": \"AceCoder-7B-Ins-RM (Zeng et al., 2025a)\",\\n \"Data Curation\": \"22k code data\",\\n \"Base Model\": \"Qwen2.5-7B-Instruct\"\\n },\\n {\\n \"Model\": \"AceCoder-7B-Ins-Rule (Zeng et al., 2025a)\",\\n \"Data Curation\": \"22k code data\",\\n \"Base Model\": \"Qwen2.5-7B-Instruct\"\\n },\\n {\\n \"Model\": \"AceCoder-7B-Code-RM (Zeng et al., 2025a)\",\\n \"Data Curation\": \"22k code data\",\\n \"Base Model\": \"Qwen2.5-7B-Coder\"\\n },\\n {\\n \"Model\": \"AceCoder-7B-Code-Rule (Zeng et al., 2025a)\",\\n \"Data Curation\": \"22k code data\",\\n \"Base Model\": \"Qwen2.5-7B-Coder\"\\n },\\n {\\n \"Model\": \"Qwen-7B-Instruct (Yang et al., 2024a)\",\\n \"Data Curation\": \"1M SFT + 150k RL pairs\",\\n \"Base Model\": \"Qwen2.5-7B-Base\"\\n },\\n {\\n \"Model\": \"AZR-7B (Ours)\",\\n \"Data Curation\": \"No data\",\\n \"Base Model\": \"Qwen2.5-7B-Base\"\\n },\\n {\\n \"Model\": \"AZR-7B-Coder (Ours)\",\\n \"Data Curation\": \"No data\",\\n \"Base Model\": \"Qwen2.5-7B-Coder\"\\n }\\n ]\\n}<span id=\"page-21-1\"></span>*Table 4.* **Reasoner Training Data Source and Base Model.**\\n\\n| logging   | random   | multiprocessing | pebble   | subprocess |\\n|-----------|----------|-----------------|----------|------------|\\n| threading | datetime | time            | hashlib  | calendar   |\\n| bcrypt    | os.sys   | os.path         | sys.exit | os.environ |\\n\\nlogging,random,multiprocessing,pebble,subprocess\\r\\nthreading,datetime,time,hashlib,calendar\\r\\nbcrypt,os.sys,os.path,sys.exit,os.environ\\r\\n{\\n \"headers\": [\\n \"logging\",\\n \"random\",\\n \"multiprocessing\",\\n \"pebble\",\\n \"subprocess\"\\n ],\\n \"rows\": [\\n {\\n \"logging\": \"threading\",\\n \"random\": \"datetime\",\\n \"multiprocessing\": \"time\",\\n \"pebble\": \"hashlib\",\\n \"subprocess\": \"calendar\"\\n },\\n {\\n \"logging\": \"bcrypt\",\\n \"random\": \"os.sys\",\\n \"multiprocessing\": \"os.path\",\\n \"pebble\": \"sys.exit\",\\n \"subprocess\": \"os.environ\"\\n }\\n ]\\n}<span id=\"page-21-0\"></span>*Figure 8.* **Forbidden Python Modules.** List of Python modules forbidden to exist in proposed tasks\\' programs.\\n\\n# <span id=\"page-21-2\"></span>**C. More Results**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n### <span id=\"page-21-3\"></span>**C.1. Out-of-Distribution Performance Breakdown**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-21-3\\\\\"></span>**C.1. Out-of-Distribution Performance Breakdown**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe plot the out-of-distribution performance, broken down by each benchmark and in aggregate, across training steps for our 7B, 7B-Coder, 14B, and 14B-Coder models in Figures [28](#page-34-0) to [31.](#page-37-1) We observe a strong correlation between training using AZR and improvements in both mathematical and coding reasoning capabilities. Moreover, our models are trained for more steps than typical zero-style reasoners; while overfitting can occur with static datasets, it is less likely in AZR due to dynamically proposed tasks.\\n\\n### <span id=\"page-21-4\"></span>**C.2. In-Distribution Results**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-21-4\\\\\"></span>**C.2. In-Distribution Results**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nSince we have defined the task domains as input prediction and output prediction, we can directly evaluate our model\\'s capabilities in these areas using popular code reasoning benchmarks: CruxEval-I(nput), CruxEval-O(utput), and LiveCodeBench-Execution (LCB-E) [\\\\(Gu](#page-14-7) [et al.,](#page-14-7) [2024;](#page-14-7) [Jain et al.,](#page-14-4) [2024\\\\)](#page-14-4), where CruxEval-O and LCB-E is solving the deduction task, and CruxEval-I is solving the abduction task. In Figure [14,](#page-22-2) we visualize the evolution of these metrics during the training of Absolute Zero Reasoner-base-7b. As training progresses, we observe a consistent improvement in in-distribution performance across steps. While these three benchmark curves do not perfectly correlate with broader coding or math reasoning capabilities (compare this with Figure [28\\\\)](#page-34-0), they serve as useful proxies for tracking task-specific progress.\\n\\n### <span id=\"page-21-5\"></span>**C.3. Interplay Between Propose and Solve Roles**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-21-5\\\\\"></span>**C.3. Interplay Between Propose and Solve Roles**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe visualize the training dynamics between the propose and solve roles over training steps in Figures [15](#page-23-0) to [17.](#page-24-1) We observe that, in general, the solve roles produce more output tokens than the propose role. Intuitively, this makes sense: the propose role emphasizes creativity and generation of novel tasks, whereas the solve role requires deeper reasoning, which naturally leads to longer outputs.\\n\\nInterestingly, we also observe a consistent ordering in token length across reasoning types\u2014abduction and deduction tasks tend to result in shorter outputs than induction tasks during problem solving. This aligns with our intuition, as we observed the model engaging in trial-and-error reasoning\u2014repeatedly generating hypothesized inputs, evaluating their outcomes, and reflecting and retrying when subsequent deductions fail to produce the correct output. To our knowledge, this is the first time such a clear distinction in token length\\n\\n```\\n```python\\n1 VALIDATE_CODE_TEMPLATE = \"\"\"{ code }\\n2 repr (f({ inputs }))\"\"\"\\n3\\n4 exec ( VALIDATE_CODE_TEMPLATE )\\n```\\n```\\n\\n```\\n```python\\n1 EVAL_INPUT_PREDICTION_TEMPLATE = \"\"\" { code }\\n2 { gold_output } == f({ agent_input }) \"\"\"\\n3\\n4 exec ( EVAL_INPUT_PREDICTION_TEMPLATE )\\n```\\n```\\n<span id=\"page-22-0\"></span>*Figure 10.* **Python Code to Check Agent Input Abduction Correctness.**\\n\\n```\\n```python\\n1 EVAL_OUTPUT_PREDICTION_TEMPLATE = \"\"\" { code }\\n2 eval ({ gold_output }) == eval ({ agent_output }) \"\"\"\\n3\\n4 exec ( EVAL_OUTPUT_PREDICTION_TEMPLATE )\\n```\\n```\\n*Figure 11.* **Python Code to Check Agent Output Deduction Correctness.**\\n\\n```\\n```python\\n1 EVAL_FUNCTION_PREDICTION_TEMPLATE = \"\"\"{ code }\\n2 matches = []\\n3 for gold_input , gold_output in zip ({ gold_inputs } , { gold_outputs }):\\n4 match = { gold_output } == f({ gold_input })\\n5 matches . append ( match )\\n6 \"\"\"\\n7\\n8 exec ( EVAL_OUTPUT_PREDICTION_TEMPLATE )\\n```\\n```\\n<span id=\"page-22-1\"></span>*Figure 12.* **Python Code to Check Agent Function Induction Correctness.**\\n\\n```\\n```python\\n1 CHECK_DETERMINISM_TEMPLATE = \"\"\"{ code }\\n2 returns = f({ inputs })\\n3 if returns != f({ inputs }):\\n4 raise Exception ( \\'Non - deterministic code \\')\\n5 repr ( returns ) \"\"\"\\n6\\n7 exec ( CHECK_DETERMINISM_TEMPLATE )\\n```\\n```\\n![](_page_22_Figure_8.jpeg)\\n\\n*Figure 13.* **Python Code to Check Deterministic Program.**\\n\\n<span id=\"page-22-2\"></span>*Figure 14.* **In-distribution Benchmark Score During Training.** The evolution of CruxEval-I, CruxEval-O, and LiveCodeBench-Execution during training for the Qwen2.5-7B base model trained using AZR.\\n\\n![](_page_23_Figure_1.jpeg)\\n\\n<span id=\"page-23-0\"></span>*Figure 15.* **Abduction Task Reward and Token Lengths.** The task reward and token lengths of the two roles for abduction task type of Absolute Zero Reasoner-base-7b.\\n\\n![](_page_23_Figure_3.jpeg)\\n\\n*Figure 16.* **Induction Task Reward and Token Lengths.** The task reward and token lengths of the two roles for induction task type of Absolute Zero Reasoner-base-7b.\\n\\n![](_page_24_Figure_1.jpeg)\\n\\n<span id=\"page-24-1\"></span>*Figure 17.* **Deduction Task Reward and Token Lengths.** The task reward and token lengths of the two roles for deduction task type of Absolute Zero Reasoner-base-7b. Figure 17. **Deduction Task Reward and Token Lengths.** The task reward and token lengths of the two roles for deduction task type of Absolute Zero Reasoner-base-7b.\\n\\n![](_page_24_Figure_3.jpeg)\\n\\n<span id=\"page-24-0\"></span>Figure 18. An example response of proposing a deduction task. k programs are selected as few-shot examples to the model. The generated new program will then be verifed through execution. *Figure 18.* **Propose Deduction Task Example.** An example response of proposing a deduction task. k programs are selected as few-shot examples to the model. The generated new program will then be verified through execution.\\n\\n```\\n```python\\ndef f(numbers):\\n    # Step 1: Filter out even numbers\\n    filtered_numbers = [num for num in numbers if num % 2 != 0]\\n    # Step 2: Calculate the sum of the remaining odd numbers\\n    sum_of_odd_numbers = sum(filtered_numbers)\\n    # Step 3: Reverse the order of the remaining odd numbers\\n    reversed_odd_numbers = filtered_numbers[::-1]\\n    # Step 4: Calculate the product of the reversed odd numbers\\n    product_of_reversed_odd_numbers = 1\\n    for num in reversed_odd_numbers:\\n        product_of_reversed_odd_numbers *= num\\n    # Step 5: Calculate the sum of the digits of the product\\n    sum_of_digits_of_product = sum(int(digit) for digit in str(product_of_reversed_odd_numbers))\\n    # Step 6: Modify the original list by adding the sum of the digits to each even number\\n    # and subtracting it from each odd number\\n    modified_numbers = []\\n    for num in numbers:\\n        if num % 2 == 0:\\n            modified_numbers.append(num + sum_of_digits_of_product)\\n        else:\\n            modified_numbers.append(num - sum_of_digits_of_product)\\n    # Step 7: Return the modified list\\n    return modified_numbers\\n```\\n```\\nFigure 19. **Learned \"ReAct\" style program generation.** We observe that even after outputting the CoT and during answering when the answer requires outputting code, the model usually uses comments in code to interleave its thinking and \"acting\", an example is shown here for induction task output by Absolute Zero Reasoner-Coder-14b during training. Similar observations are recently observed in much bigger models (671b) for math proofs with DeepSeek Prover [V2 \\\\(Ren et a](#page-15-3)l., 2025). *Figure 19.* **Learned \"ReAct\" style program generation.** We observe that even after outputting the CoT and during answering when the answer requires outputting code, the model usually uses comments in code to interleave its thinking and \"acting\", an example is shown here for induction task output by Absolute Zero Reasoner-Coder-14b during training. Similar observations are recently observed in much bigger models (671b) for math proofs with DeepSeek Prover V2 (Ren et al., [2025\\\\)](#page-15-3).\\n\\n#### **Task: Propose Abduction Task**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-21-5\\\\\"></span>**C.3. Interplay Between Propose and Solve Roles**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Propose Abduction Task**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n### **Model Input:** (k random selected example programs as few-shot input)\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"**Model Input:** (k random selected example programs as few-shot input)\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n# **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nFor this task, we need an intelligent problem that requires deep algorithmic reasoning and demands long multi step reasoning. A typical type of problem that fts these requirements is the Matrix Reconstruction from a given jumbled li st of elements, where we have to fgure out the matrix\\'s dimensions and individual values. However, this task will involve multiple steps, increasing its complexity and creativity. We will create a function \\'f\\' that transforms a jumbled list of elements into a two-dimensional matrix, then back to a list, given a specifc reconstruction pattern. We will retrieve the original list from the reconstructed matrix. Here, we will avoid random and datetime operations to ensure determinism. The function will be structured to reconstruct the matrix elements in a unique and challenging way. We will provide an input that, after reconstruction, presents a unique list that can be easily deduced from the given output in a test piece.\\n\\n```\\n```python\\ndef f(jumbled_elements: list) -> list:\\n    if not jumbled_elements:\\n        return []\\n    # Calculate the square root of the length of elements to estimate the matrix dimensions\\n    n = len(jumbled_elements)\\n    sqrt_n = int(n ** 0.5)\\n    if n > sqrt_n ** 2:\\n        sqrt_n += 1\\n    if n < sqrt_n ** 2:\\n        sqrt_n -= 1\\n    # Now, we need to reconstruct the matrix elements in a challenging way using specific patterns\\n    # For this, we can reconstruct the matrix using zigzag patterns or hill-climbing patterns\\n    # Here, a hill-climbing pattern is used where we traverse the matrix from the extreme\\n    # right and downward Then traverse the matrix from the second to last element to the\\n    # extreme bottom. Repeat the process until the entire matrix is traversed.\\n    # Initialize the matrix\\n    matrix = [[0 for _ in range(sqrt_n)] for _ in range(sqrt_n)]\\n    cur_idx = 0\\n    # Fill the matrix in a zigzag pattern\\n    for i in range(sqrt_n):\\n        if i % 2 == 0:\\n            for j in range(sqrt_n):\\n                matrix[j][i] = j * sqrt_n + i + cur_idx\\n                cur_idx += 1\\n        else:\\n            for j in range(sqrt_n - 1, -1, -1):\\n                matrix[j][i] = j * sqrt_n + n - i - cur_idx - 1\\n                cur_idx += 1\\n    # Reconstruct the list into a matrix by repeating the process\\n    reconstructed_list = []\\n    for i in range(sqrt_n):\\n        for j in range(sqrt_n):\\n            reconstructed_list.append(matrix[i][j])\\n    # Now, we need to calculate another matrix based on a function F applied to the current matrix\\n    # F is a mathematical function that can be complex, such as factorial, prime check,\\n    # or another transformation For example, transform each element by adding 1 if it\\'s prime,\\n    # subtracting 1 if it\\'s even, or leaving it unchanged, Implement any specific transformation\\n    # function here. Here, for demonstration, each element is left unchanged\\n    transformed_result = reconstructed_list\\n    return transformed_result\\nOutput: [0, 11, 10, 1, 5, 16, 15, 6, 10, 21, 20, 11, 15, 26, 25, 16]\\n```\\n```\\n<span id=\"page-26-0\"></span>Figure 20. An example response of proposing an abduction task. The model uses comments as reasoning when generating the program. 26 *Figure 20.* **Propose Abduction Task Example.** An example response of proposing an abduction task. The model uses comments as reasoning when generating the program.\\n\\n#### **Task: Propose Induction Task**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Propose Induction Task**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Input:** Here is the function f. Analyze its behaviour and relate it to the observed inputs/outputs.\\n\\n```\\n```yaml\\ndef f(numbers: list[int]) -> int:\\n    replacement = {\\n        0: 2,\\n        1: 3,\\n        2: 1,\\n        3: 0,\\n        4: 4\\n    }\\n    return sum(replacement[num] for num in numbers)\\n```\\n```\\n#### **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nTo solve this task, we need to come up with 10 diferent inputs for the function f(numbers: list[int]) -> int. The function replaces each number in the list according to a specifc dictionary and then sums up the replaced numbers. Let\\'s analyze the dictionary:\\n\\nThis dictionary tells us that:\\n\\n-0 becomes 2\\n\\n-1 becomes 3\\n\\n-2 becomes 1\\n\\n-3 becomes 0\\n\\n-4 remains 4\\n\\nTo create diverse outputs, we should include lists with diferent sets of numbers from the list {0*,* 1*,* 2*,* 3*,* 4}. We also need to ensure that the inputs are valid (i.e., lists of integers).\\n\\nLet\\'s illustrate using provided examples step-by-step:\\n\\n1. Input: [0] \u21d2 Replacement: [2] \u21d2 sum = 2 2. Input: [1, 2, 3] \u21d2 Replacement: [3*,* 1*,* 0] \u21d2 sum = 4 3. Input: [4, 1] \u21d2 Replacement: [4*,* 3] \u21d2 sum = 7 4. Input: [2, 1, 0] \u21d2 Replacement: [1*,* 3*,* 2] \u21d2 sum = 6 5. Input: [3, 0, 2, 4] \u21d2 Replacement: [0*,* 2*,* 1*,* 4] \u21d2 sum = 7 6. Input: [1, 1, 1] \u21d2 Replacement: [3*,* 3*,* 3] \u21d2 sum = 9 7. Input: [2, 2, 0, 1] \u21d2 Replacement: [1*,* 1*,* 2*,* 3] \u21d2 sum = 7 8. Input: [3, 4, 2] \u21d2 Replacement: [0*,* 4*,* 1] \u21d2 sum = 5 9. Input: [0, 1, 2, 3, 4] \u21d2 Replacement: [2*,* 3*,* 1*,* 0*,* 4] \u21d2 sum = 10 10. Input: [1, 2, 3, 0, 4] \u21d2 Replacement: [3*,* 1*,* 0*,* 2*,* 4] \u21d2 sum = 10 Thus, the rule is clearly replacing numbers according to the given mapping and then summing the results. **Inputs**: [\\'[0]\\', \\'[1, 2, 3]\\', \\'[4, 1]\\', \\'[2, 1, 0]\\', \\'[3, 0, 2, 4]\\', \\'[1, 1, 1]\\', [2, 2, 0, 1], \\'[3, 4, 2]\\', \\'[0, 1, 2, 3, 4]\\', \\'[1, 2, 3, 0, 4]\\']| **Message**: You are given a function that takes a list of integers as input and returns a single integer as output. Can you determine the rule this function is following by analyzing the outputs for the given inputs? (After execution:) **Outputs**: [\\'2\\', \\'4\\', \\'7\\', \\'6\\', \\'7\\', \\'9\\', \\'7\\', \\'5\\', \\'10\\', \\'10\\']\\n\\nFigure 21. An example response of proposing an induction task. Given a random selected program, the model needs to propose 10 inputs and a description of program. These inputs will be executed and verifed to get outputs. At solve phase, the model need to generate the program given the message and 5 input/output pairs (half is hidden cases) *Figure 21.* **Propose Induction Task Example.** An example response of proposing an induction task. Given a random selected program, the model needs to propose 10 inputs and a description of program. These inputs will be executed and verified to get outputs. At solve phase, the model need to generate the program given the message and 5 input/output pairs (half is hidden cases)\\n\\n**Task: Solve Abduction Task**\\n\\n**Model Input:** Here is the function f and the output: \\'1\\', please predict the input.\\n\\n```\\n```python\\ndef f(numbers: list[int], target: int) -> int:\\n    accumulated_values = []\\n    current_sum = 0\\n    for number in numbers:\\n        current_sum += number\\n        accumulated_values.append(current_sum)\\n    result = 0\\n    for i in range(len(accumulated_values)):\\n        for j in range(i + 1, len(accumulated_values)):\\n            if accumulated_values[j] \\\\\\n                    - accumulated_values[i] == target:\\n                result = accumulated_values[i]\\n                return result\\n    return result\\n```\\n```\\n#### **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nLet\\'s analyze the code snippet to understand how the result is achieved. The function f takes a list of integers numbers and a target integer target. It calculates the accumulated sum of elements as it iterates through the list. Then, it checks for each pair of accumulated sums if their diference equals the target. If such a pair is found, it returns the accumulated sum at the frst index of the pair.\\n\\nTo fnd one possible input that produces the output 1, we need to fnd a scenario where the diference between any two accumulated\\\\_values equals the target, and the frst accumulated\\\\_values that satisfes this condition is 1. Let\\'s consider a simple example: -numbers = [1, 2] -target = 1 Here\\'s the step-by-step calculation: 1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 2 = 3, accumulated\\\\_values = [1, 3] -Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target) Since no pair satisfes the condition, the function will not return any value. This doesn\\'t match our output. Let\\'s try another example. Consider: -numbers = [1, 0] -target = 1 Step-by-step calculation: 1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 0 = 1, accumulated\\\\_values = [1, 1] -Check for pair (i=0, j=1): 1 - 1 = 0 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 1 - 1 = 0 (not equal to target) ...(shortened) The pair (i=1, j=2) satisfes the condition, and the function returns the frst accumulated value in this pair, which is 3. This still doesn\\'t match our output. Given the complexity and the fact that no simple example seems to work, let\\'s try a more complex scenario: -numbers = [2, -1, 1] -target = 1 Step-by-step calculation: 1. current\\\\_sum = 0 + 2 = 2, accumulated\\\\_values = [2] 2. current\\\\_sum = 2 - 1 = 1, accumulated\\\\_values = [2, 1] 3. current\\\\_sum = 1 + 1 = 2, accumulated\\\\_values = [2, 1, 2] -Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target) -Check for pair (i=0, j=2): 2 - 2 = 0 (not equal to target) -Check for pair (i=1, j=2): 2 - 1 = 1 (equal to target) The pair (i=1, j=2) satisfes the condition, and the function returns the frst accumulated value in this pair, which is 1. This matches our output. Therefore, one possible input that could produce the output 1 is: [2, -1, 1], 1\\n\\nFigure 22. A more detailed version of the example shown in main Figure 7. The model is solving an abducti[on](#page-10-0) task (predict input). *Figure 22.* **Solve Abduction Task Example.** A more detailed version of the example shown in main Figure 7. The model is solving an abduction task (predict input).\\n\\n#### **Task: Solve Deduction Task (Example 1)**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Solve Deduction Task (Example 1)**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Input:** Here is the function f, the input provided [1, 2, 1, 2, 3, 2, 1], 2, and we need to predict the output.\\n\\n```\\n```python\\ndef f(array: list[int], k: int) -> int:\\n      window_start = 0\\n      max_length = 0\\n      char_freq = {}\\n      for window_end in range(len(array)):\\n            end_char = array[window_end]\\n            if end_char not in char_freq:\\n                   char_freq[end_char] = 0\\n            char_freq[end_char] += 1\\n            while len(char_freq) > k:\\n                   start_char = array[window_start]\\n                   char_freq[start_char] -= 1\\n                   if char_freq[start_char] == 0:\\n                         del char_freq[start_char]\\n                   window_start += 1\\n            max_length = max(max_length, window_end - window_start + 1)\\n      return max_length\\nInput: [1, 2, 1, 2, 3, 2, 1], 2\\nModel Output:\\nBased on the given code snippet, we need to determine the output of the function f(array, k) when provided with the input [1, 2, 1, 2, 3, 2, 1] and k = 2.\\nThe function f is designed to fnd the length of the longest subarray with at most k distinct characters. Let\\'s go through the code step by step:\\n1. Initialize window_start to 0, max_length to 0, and an empty dictionary char_freq to store the frequency of characters in the current window.\\n2. Iterate through the array using window_end as the index:\\na. Get the current character end_char at index window_end.\\nb. If end_char is not in char_freq, add it with a frequency of 0.\\nc. Increment the frequency of end_char by 1.\\n3. Check if the number of distinct characters in char_freq is greater than k:\\na. If true, shrink the window from the start:\\ni. Get the character start_char at index window_start.\\nii. Decrement its frequency by 1.\\niii. If the frequency becomes 0, remove the character from char_freq.\\niv. Increment window_start by 1.\\n4. Update max_length by taking the maximum of max_length and the current window size (window_end - window_start + 1).\\nNow, let\\'s apply this algorithm step-by-step to the input [1, 2, 1, 2, 3, 2, 1], k = 2:\\n\u2022 window_start = 0, max_length = 0, char_freq = {}\\n\u2022 window_end = 0, add 1 to char_freq: {1:1}, window size = 1\\n\u2022 window_end = 1, add 2: {1:1, 2:1}, window size = 2\\n\u2022 window_end = 2, increment 1: {1:2, 2:1}, window size = 3\\n\u2022 window_end = 3, increment 2: {1:2, 2:2}, window size = 4\\n\u2022 window_end = 4, add 3: {1:2, 2:2, 3:1}; now distinct chars > 2, shrink window:\\n- remove 1 at start: {1:1, 2:2, 3:1}\\n- remove 2 at start: {1:1, 2:1, 3:1}\\n- remove 1 again: {2:1, 3:1}, window now starts at 3\\n\u2022 window_end = 5, increment 2: {2:2, 3:1}, window size = 3\\n\u2022 window_end = 6, add 1: {2:2, 3:1, 1:1}, shrink again:\\n- remove 2: {2:1, 3:1, 1:1}\\n- remove 3: {2:1, 1:1}, window now starts at 5\\n- window size = 2\\nMaximum window size encountered is 4, thus max_length = 4.\\nHence, the function returns 4.\\n```\\n```\\nFigure 23. Example of solving the deduction task. Given a program and input, the model simulates the execution of the program until the fnal result. *Figure 23.* **Solve Deduction Task Example.** Example of solving the deduction task. Given a program and input, the model simulates the execution of the program until the final result.\\n\\n**Task: Solve Induction Task**\\n\\n**Model Input:** Given the inputs and outputs, deduce the code snippet implementing the described functionality: **Input Description:** Given a list of integers, sort the list and then for each element at index *i*, multiply it by (*n* \u2212 *i*), where *n* is the total number of elements. Compute the fnal sum. **Inputs:** [\\'[1, 2, 3, 4]\\', \\'[4, 3, 2, 1]\\', \\'[3, 1, 4, 2]\\', \\'[1, 2, 2, 3]\\', \\'[5]\\'] **Outputs:** [\\'20\\', \\'20\\', \\'20\\', \\'17\\', \\'5\\'] *# Golden* **def** f(elements: list[int]) -> int: n = len(elements) sorted\\\\_elements = sorted(elements) modified\\\\_elements = [sorted\\\\_elements[i] \\\\* (n - i) **for** i **in** range(n)] **return** sum(modified\\\\_elements) **Model Output:** Given the problem and the input/output pairs, we need to deduce a general code snippet that takes a sorted list and a list of multipliers, and then computes a fnal sum based on the multipliers. Let\\'s break down the problem step by step: 1. \\\\*\\\\*Understand the Message:\\\\*\\\\* - We are given a list of integers. - The list is sorted. - For each element at index *i* in the sorted list, we multiply it by (*n* \u2212 *i*), where *n* is the number of elements in the list. - We need to compute the sum of these products. 2. \\\\*\\\\*Analyze the Input/Output Pairs:\\\\*\\\\* - For the input [1*,* 2*,* 3*,* 4], the sorted form is the same, and the output is 20. 1 \u00b7 (4 \u2212 1) = 3, 2 \u00b7 (4 \u2212 2) = 4, 3 \u00b7 (4 \u2212 3) = 3, 4 \u00b7 (4 \u2212 4) = 0, Sum: 3 + 4 + 3 + 0 = 10 - For the input [4*,* 3*,* 2*,* 1], the sorted form is [1*,* 2*,* 3*,* 4], and the output is 20 (same as above). - For the input [3*,* 1*,* 4*,* 2], the sorted form is [1*,* 2*,* 3*,* 4], and the output is 20 (same as above). **shortened** 3. \\\\*\\\\*Re-evaluate the Outputs:\\\\*\\\\* - It seems there might be an error in the provided outputs for some inputs. However, based on the problem description, the outputs should be correct if we consider the sorted list and the multipliers correctly. 4. \\\\*\\\\*Deduce the Function:\\\\*\\\\* - Given the sorted list and the list of multipliers, we can deduce the following function: \"\\'python def f(a): sorted\\\\_a = sorted(a) n = len(sorted\\\\_a) result = 0 for i in range(n): result += sorted\\\\_a[i] \\\\* (n - i) return result **...(shortened)** 5. \\\\*\\\\*Verify the Function:\\\\*\\\\* - Let\\'s verify the function with the provided inputs: - For [1*,* 2*,* 3*,* 4]: - Sorted list: [1*,* 2*,* 3*,* 4] - Multipliers: [3*,* 4*,* 3*,* 0] - Sum: 1 \u00b7 3+2 \u00b7 4+3 \u00b7 3+4 \u00b7 0 = 3 + 8 + 9 + 0 = 20 **...(shortened)** The corrected outputs should be: For [1*,* 2*,* 3*,* 4]: 20, For [4*,* 3*,* 2*,* 1]: 20, For [3*,* 1*,* 4*,* 2]: 20, For [1*,* 2*,* 2*,* 3]: 13, For [5]: 0 Given the function: **def** f(a): sorted\\\\_a = sorted(a) n = len(sorted\\\\_a) result = 0 **for** i **in** range(n): result += sorted\\\\_a[i] \\\\* (n - i) **return** result The outputs match the corrected sum. ### Final Answer **(repeat the program above)**\\n\\nFigure 24. Example of solving an induction task. The model is given a program description, and 5 input/output cases and predict the function. Interestingly, after the model gives the function, it will go through the given use cases one by one and confrm all test cases are passed. <sup>30</sup> *Figure 24.* **Solve Induction Task Example.** Example of solving an induction task. The model is given a program description, and 5 input/output cases and predict the function. Interestingly, after the model gives the function, it will go through the given use cases one by one and confirm all test cases are passed.\\n\\n**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n\\n| Model             | HEval+ | MBPP+ | LCBv1-5 |      |      |      |      |      | AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench |\\n|-------------------|--------|-------|---------|------|------|------|------|------|------------------------------------------------------|\\n| Llama3.1-8B       | 31.7   | 53.7  | 0.0     | 0.0  | 0.0  | 2.5  | 10.6 | 5.5  | 2.1                                                  |\\n| + Simple-RL-Zoo   | 38.4   | 55.3  | 7.4     | 0.0  | 0.0  | 7.5  | 22.2 | 8.8  | 4.7                                                  |\\n| + AZR             | 35.4   | 50.8  | 8.5     | 3.3  | 0.0  | 5.0  | 13.2 | 14.0 | 5.0                                                  |\\n| Qwen2.5-3B-Coder  | 67.1   | 65.9  | 20.0    | 3.3  | 3.3  | 20.0 | 51.0 | 18.4 | 16.6                                                 |\\n| + AZR             | 71.3   | 69.0  | 24.4    | 3.3  | 3.3  | 37.5 | 62.0 | 26.1 | 27.0                                                 |\\n| Qwen2.5-14B-Coder | 76.8   | 71.7  | 31.4    | 0.0  | 0.0  | 37.5 | 54.8 | 10.7 | 18.5                                                 |\\n| + AZR             | 80.5   | 71.2  | 39.0    | 23.3 | 20.0 | 65.0 | 78.6 | 32.0 | 39.3                                                 |\\n| Qwen2.5-14B-Base  | 78.0   | 66.7  | 21.7    | 6.7  | 3.3  | 35.0 | 66.2 | 28.3 | 32.4                                                 |\\n| + AZR             | 70.7   | 68.8  | 35.2    | 10.0 | 20.0 | 62.5 | 76.2 | 40.4 | 42.5                                                 |\\n\\nModel,HEval+,MBPP+,LCBv1-5,,,,,,AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\\r\\nLlama3.1-8B,31.7,53.7,0.0,0.0,0.0,2.5,10.6,5.5,2.1\\r\\n+ Simple-RL-Zoo,38.4,55.3,7.4,0.0,0.0,7.5,22.2,8.8,4.7\\r\\n+ AZR,35.4,50.8,8.5,3.3,0.0,5.0,13.2,14.0,5.0\\r\\nQwen2.5-3B-Coder,67.1,65.9,20.0,3.3,3.3,20.0,51.0,18.4,16.6\\r\\n+ AZR,71.3,69.0,24.4,3.3,3.3,37.5,62.0,26.1,27.0\\r\\nQwen2.5-14B-Coder,76.8,71.7,31.4,0.0,0.0,37.5,54.8,10.7,18.5\\r\\n+ AZR,80.5,71.2,39.0,23.3,20.0,65.0,78.6,32.0,39.3\\r\\nQwen2.5-14B-Base,78.0,66.7,21.7,6.7,3.3,35.0,66.2,28.3,32.4\\r\\n+ AZR,70.7,68.8,35.2,10.0,20.0,62.5,76.2,40.4,42.5\\r\\n{\\n \"headers\": [\\n \"Model\",\\n \"HEval+\",\\n \"MBPP+\",\\n \"LCBv1-5\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\"\\n ],\\n \"rows\": [\\n {\\n \"Model\": \"Llama3.1-8B\",\\n \"HEval+\": \"31.7\",\\n \"MBPP+\": \"53.7\",\\n \"LCBv1-5\": \"0.0\",\\n \"\": \"5.5\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"2.1\"\\n },\\n {\\n \"Model\": \"+ Simple-RL-Zoo\",\\n \"HEval+\": \"38.4\",\\n \"MBPP+\": \"55.3\",\\n \"LCBv1-5\": \"7.4\",\\n \"\": \"8.8\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"4.7\"\\n },\\n {\\n \"Model\": \"+ AZR\",\\n \"HEval+\": \"35.4\",\\n \"MBPP+\": \"50.8\",\\n \"LCBv1-5\": \"8.5\",\\n \"\": \"14.0\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"5.0\"\\n },\\n {\\n \"Model\": \"Qwen2.5-3B-Coder\",\\n \"HEval+\": \"67.1\",\\n \"MBPP+\": \"65.9\",\\n \"LCBv1-5\": \"20.0\",\\n \"\": \"18.4\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"16.6\"\\n },\\n {\\n \"Model\": \"+ AZR\",\\n \"HEval+\": \"71.3\",\\n \"MBPP+\": \"69.0\",\\n \"LCBv1-5\": \"24.4\",\\n \"\": \"26.1\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"27.0\"\\n },\\n {\\n \"Model\": \"Qwen2.5-14B-Coder\",\\n \"HEval+\": \"76.8\",\\n \"MBPP+\": \"71.7\",\\n \"LCBv1-5\": \"31.4\",\\n \"\": \"10.7\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"18.5\"\\n },\\n {\\n \"Model\": \"+ AZR\",\\n \"HEval+\": \"80.5\",\\n \"MBPP+\": \"71.2\",\\n \"LCBv1-5\": \"39.0\",\\n \"\": \"32.0\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"39.3\"\\n },\\n {\\n \"Model\": \"Qwen2.5-14B-Base\",\\n \"HEval+\": \"78.0\",\\n \"MBPP+\": \"66.7\",\\n \"LCBv1-5\": \"21.7\",\\n \"\": \"28.3\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"32.4\"\\n },\\n {\\n \"Model\": \"+ AZR\",\\n \"HEval+\": \"70.7\",\\n \"MBPP+\": \"68.8\",\\n \"LCBv1-5\": \"35.2\",\\n \"\": \"40.4\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"42.5\"\\n }\\n ]\\n}<span id=\"page-31-0\"></span>*Table 5.* **Detailed Breakdown of Evaluation Benchmarks for Other Model Sizes and Types.** Full evaluation of AZR trained on other models on three standard code benchmarks (HEval<sup>+</sup> , MBPP<sup>+</sup> , LCBv1-5) and six math benchmarks (AIME\\'24, AIME\\'25, AMC\\'23, MATH500, Minerva, OlympiadBench).\\n\\nhas been observed and presented for jointly trained reasoning multi-tasks. Previously, length differences were typically noted between correct and incorrect traces [\\\\(Liu et al.,](#page-15-10) [2025\\\\)](#page-15-10).\\n\\nThe reward dynamics between the propose and solve roles exhibit mildly adversarial behavior: when one receives higher rewards, the other often receives lower rewards. However, this is not entirely adversarial, as the proposer is also penalized for generating unsolvable tasks, encouraging overall cooperative behavior in the learning process.\\n\\n# <span id=\"page-31-1\"></span>**C.4. Complexity and Diversity Metrics of AZR Proposed Tasks**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-1\\\\\"></span>**C.4. Complexity and Diversity Metrics of AZR Proposed Tasks**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe outline several metrics used to probe characteristics of the tasks proposed during the training of AZR from the base model. Specifically, we log two sets of metrics: program complexity and task diversity. For complexity, we employ two proxy measures\u2014ComplexiPy score and the Halstead metric. To assess diversity, we compute the average abstract syntax tree (AST) edit distance between the proposed program and a set of *K* reference programs, and an answer diversity metric. We calculate this answer diversity metric by tracking all historical answers to the generated questions, i.e., the input-output pairs, and form a categorical distribution over these outputs. We define answer diversity as <sup>1</sup> <sup>\u2212</sup> *<sup>p</sup>*(answer), where *<sup>p</sup>*(answer) is the empirical probability of a specific answer\u2014used as a proxy for the diversity of generated outputs.\\n\\nWe present these metrics in Figure [27.](#page-33-1) Interestingly, even without incorporating them explicitly into the reward function, the policy appears to implicitly optimize for these metrics. This aligns well with intuitive notions of task difficulty and diversity, and that the policy learned to propose increasingly challenging tasks over time using our proposed simple reward function in Equation [\\\\(4\\\\)](#page-4-1).\\n\\n# <span id=\"page-31-2\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe use the ComplexiPy package to measure code complexity. For each generated program in the induction task, we compute the cognitive complexity difference from the corresponding \"gold\" code, *i.e*. complexipy(*p<sup>\u03c0</sup>* propose {abduction,deduction} ) <sup>\u2212</sup> complexipy(*p\u03c0*solve induction ) for each pair, where the superscript of *\u03c0* indicates the role and the subscript indicates the task type(s), and *p* denotes the generated programs. On average, the difference of proposer and solver while holding the code\\'s functionality constant is 0*.*27, indicating that the proposer in the abduction/deduction tasks often increases the cognitive complexity to make the code appear more convoluted, whereas the induction solver tends to generate more efficient implementations.\\n\\n#### **Task: Solve Deduction Task (Example 2)**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Solve Deduction Task (Example 2)**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Input:** Here is the function f, the given input, and we need to predict the output.\\n\\n```\\n```python\\ndef f(num_list: list[int], target_product: int) -> list[tuple[int]]:\\n    result_pairs = []\\n    for i in range(len(num_list)):\\n        for j in range(i + 1, len(num_list)):\\n            if num_list[i] * num_list[j] == target_product:\\n                result_pairs.append((num_list[i], num_list[j]))\\n    return result_pairs\\n```\\n```\\n**Input:** [2, 3, 5, 7, 10], 10 **Output:** [(2, 5)]\\n\\n#### **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nThe given function f takes a list of integers num\\\\_list and a target product target\\\\_product as inputs. It is designed to fnd all pairs of numbers in num\\\\_list whose product equals target\\\\_product. The function then returns a list of tuples, where each tuple contains a pair of numbers that satisfy the condition.\\n\\nLet\\'s go through the code step by step:\\n\\n1. Initialize an empty list result\\\\_pairs to store pairs whose product equals target\\\\_product.\\n\\n2. Use nested loops to iterate through each pair of numbers in num\\\\_list. The outer loop iterates over each number, and the inner loop iterates over numbers that come after the current number in the outer loop (**\u907f\u514d\u91cd\u590d\u548c\u53cd\u5411\u7684\u5bf9\u5b50,\u4f8b\u5982 (2, 3) \u548c (3, 2)**)\u3002 3. For each pair (num\\\\_list[i], num\\\\_list[j]), check if their product equals target\\\\_product.\\n\\n4. If the product equals target\\\\_product, append the tuple (num\\\\_list[i], num\\\\_list[j]) to result\\\\_pairs.\\n\\n5. After all pairs have been checked, return the list result\\\\_pairs.\\n\\nLet\\'s explicitly apply this to the provided input [2, 3, 5, 7, 10], target product 10:\\n\\n```\\n```python\\n- For i=0 (num_list[0] = 2):\\n- j=1, 2 \u00d7 3 = 6 (\u226010)\\n- j=2, 2 \u00d7 5 = 10 (=10), add pair (2, 5)\\n- j=3, 2 \u00d7 7 = 14 (\u226010)\\n- j=4, 2 \u00d7 10 = 20 (\u226010)\\n- For i=1 (num_list[1] = 3):\\n- j=2, 3 \u00d7 5 = 15 (\u226010)\\n- j=3, 3 \u00d7 7 = 21 (\u226010)\\n- j=4, 3 \u00d7 10 = 30 (\u226010)\\n- For i=2 (num_list[2] = 5):\\n- j=3, 5 \u00d7 7 = 35 (\u226010)\\n- j=4, 5 \u00d7 10 = 50 (\u226010)\\n- For i=3 (num_list[3] = 7):\\n- j=4, 7 \u00d7 10 = 70 (\u226010)\\n- For i=4 (num_list[4] = 10):\\n- No further pairs to check\\nThus, the only pair satisfying the condition is (2, 5). Therefore, the output is:\\n[(2, 5)]\\n```\\n```\\nFigure 25. An example of the model solving an deduction task. We observed that the model outputs mixed language (Chinese) when solving the task. *Figure 25.* **Mixed Language CoT Example.** An example of the model solving an deduction task. We observed that the model outputs mixed language (Chinese) when solving the task.\\n\\n#### **Task: Solve Deduction Task (Llama 8B)**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Solve Deduction Task (Llama 8B)**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Input:** Here is the function f, the input provided \\'cookie\\', and we need to predict the output.\\n\\n```\\n```python\\ndef f(input_string: str):\\n    \"\"\"Function to check if a string contains given substrings.\"\"\"\\n    substring = \"code\"\\n    # Start with `substring` as the first substring.\\n    curr_index = substring\\n    # Slice out the required substring from the input string\\n    sliced_out_string = input_string[0:len(substring)]\\n    if (sliced_out_string == substring):\\n        return True\\n    # Check if there are any remaining substrings to be checked\\n    if (len(curr_index) > len(input_string)):\\n        return False\\n    return False\\n```\\n```\\n**Input:** \\'cookie\\' **Output:** False\\n\\n#### **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nI know that the line \\'curr\\\\_index = substring\\' is just initialization of the curr\\\\_index parameter variable and does not afect the output. Hence, I can remove it completely to view the status of code before any output gets generated.\\n\\nNow I have a single variable, \"\\'curr\\\\_index\"\\' which is set to \"codecandide\".\\n\\nThe second line of code, \\'slice\\\\_out\\\\_string = input\\\\_string[0:len(substring)]\\', assigns the result of slicing the input\\\\_string to the left of index 0 and to the right of index len(substring), i.e., the index of the last character in the substring. It then assigns this value to the variable \"\\'slice\\\\_out\\\\_string\"\\'.\\n\\nThe third line, \\'if (slice\\\\_out\\\\_string == substring)\\' checks whether the \"\\'slice\\\\_out\\\\_string\"\\' is equal to the value of substring. Because curr\\\\_index is set to \"codecandide\", \"code\" appears on the left of the frst index in input\\\\_string, and thus, \"\\'slice\\\\_out\\\\_string\"\\' assumes the value \"code\". That means for a minute the \"\\'if statement\"\\' is satisfed and will continue the code execution afterwards. However, according to the True/False statement, we see that the value of the frst index of input\\\\_string does not exist hence while it does output \"True\", \"False\" is outputted in main. So, the output of the whole program is shown below:\\n\\n\\'f(input\\\\_string = \"cookie\")\\' then output: False\\n\\n<span id=\"page-33-0\"></span>Figure 26. **Absolute Zero Reasoner-Llama3.1-8b CoT Example on Solving Output Deduction Task.** The Absolute Zero Reasoner-Llama3.1-8b model appears to have strengthened its state-tracking behaviors during the course of training. We illustrate an example here. *Figure 26.* **Absolute Zero Reasoner-Llama3.1-8b CoT Example on Solving Output Deduction Task.** The Absolute Zero Reasoner-Llama3.1-8b model appears to have strengthened its state-tracking behaviors during the course of training. We illustrate an example here.\\n\\n![](_page_33_Figure_12.jpeg)\\n\\n<span id=\"page-33-1\"></span>Figure 27. **Metrics on Proposed Tasks.** We break down the proposed task metrics into program complexity and diversity across programs and answers. An upward trend is observed in all metrics, indicating that AZR implicitly optimizes for these qualities as training progresses. *Figure 27.* **Metrics on Proposed Tasks.** We break down the proposed task metrics into program complexity and diversity across programs and answers. An upward trend is observed in all metrics, indicating that AZR implicitly optimizes for these qualities as training progresses.\\n\\n![](_page_34_Figure_1.jpeg)\\n\\n![](_page_34_Figure_2.jpeg)\\n\\n<span id=\"page-34-0\"></span>*Figure 28.* **Absolute Zero Reasoner-base-7b OOD Performance Breakdown.**\\n\\n![](_page_35_Figure_1.jpeg)\\n\\n![](_page_35_Figure_2.jpeg)\\n\\n<span id=\"page-35-0\"></span>*Figure 29.* **Absolute Zero Reasoner-Coder-7b OOD Performance Breakdown.**\\n\\n![](_page_36_Figure_1.jpeg)\\n\\n![](_page_36_Figure_2.jpeg)\\n\\n<span id=\"page-36-0\"></span>*Figure 30.* **Absolute Zero Reasoner-base-14b OOD Performance Breakdown.**\\n\\n![](_page_37_Figure_1.jpeg)\\n\\n**MATH REASONING**\\n\\n<span id=\"page-37-1\"></span>*Figure 31.* **Absolute Zero Reasoner-Coder-14b OOD Performance Breakdown.** Figure 31. **Absolute Zero Reasoner-Coder-14b OOD Performance Breakdown.**\\n\\n<think> Design an absolutely ludicrous and convoluted Python function that is extremely difficult to deduce the output from the input, designed to keep machine learning models such as Snippi guessing and your peers puzzling. *!*\u2192 *!*\u2192 The aim is to outsmart all these groups of intelligent machines and less intelligent humans. This *!*<sup>\u2192</sup> is for the brains behind the future. </think> - Absolute Zero Reasoner-Llama3.1-8b @ step 132\\n\\n<span id=\"page-37-0\"></span>Figure 32. **Absolute Zero Reasoner \u2013Llama3.1-8B \"Uh-oh Moment.\"** This example highlights an unexpected and potentially unsafe reasoning chain generated by our Absolute Zero Reasoner\u2013Llama3.1-8B model during training. Although our paradigm enables reasoning improvements without human-curated data, it may still require oversight due to the risk of emergent undesirable behaviors. *Figure 32.* **Absolute Zero Reasoner \u2013 Llama3.1-8B \"Uh-oh Moment.\"** This example highlights an unexpected and potentially unsafe reasoning chain generated by our Absolute Zero Reasoner\u2013Llama3.1-8B model during training. Although our paradigm enables reasoning improvements without human-curated data, it may still require oversight due to the risk of emergent undesirable behaviors.\\n\\nA conversation between User and Assistant. The user asks a question, and the Assistant solves it. The assistant first thinks about the reasoning process in the mind and then provides the user with the answer. The reasoning process and answer are enclosed within <think> </think> and <answer> </answer> tags, respectively, i.e., <think> reasoning process here </think> <answer> answer here </answer>. *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 User: {TASK\\\\_INSTRUCTION}\\n\\nAssistant: <think>\\n\\n<span id=\"page-38-0\"></span>Figure 33. **Deepseek R1 Template.** All our models were trained using the default Deepseek R1 template. *Figure 33.* **Deepseek R1 Template.** All our models were trained using the default Deepseek R1 template. ## Task: Create a Python Code Snippet (where custom classes are allowed, which should be defined *!*<sup>\u2192</sup> at the top of the code snippet) with one Matching Input Using the reference code snippets provided below as examples, design a new and unique Python code snippet that demands deep algorithmic reasoning to deduce one possible input from a given output. Your submission should include both a code snippet and test input pair, where the input will be plugged into the code snippet to produce the output, which that function output be given to a test subject to come up with any input that will produce the same function output. This is meant to be an I.Q. test. *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 ### Code Requirements: - Name the entry function `f` (e.g., `def f(...): ...`), you can have nested definitions inside *!*<sup>\u2192</sup> `f` - Ensure the function returns a value - Include at least one input parameter - Make the function deterministic - Make the snippet require state tracking across multiple data transformations, ensuring the task *!*<sup>\u2192</sup> requires long multi step reasoning - AVOID THE FOLLOWING: \\\\* Random functions or variables \\\\* Date/time operations \\\\* I/O operations (reading files, network requests) \\\\* Printing or logging \\\\* Any external state - Ensure execution completes within 10 seconds on a modern CPU - All imports and class definitions should be at the very top of the code snippet - The snippet should end with a return statement from the main function `f`, anything after will *!*<sup>\u2192</sup> be removed ### Input Requirements: - Provide exactly one test input for your function - Format multiple arguments with commas between them - Remember to add quotes around string arguments ### Formatting: - Format your code with: ```python def f(...): # your code here return ... ``` - Format your input with: ```input arg1, arg2, ... ``` ### Example Format: ```python def f(name: str, info: dict): # code logic here return result ``` ```input \\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}} ``` ### Evaluation Criteria: - Executability, your code should be executable given your input - Difficulty in predicting the output from your provided input and code snippet. Focus on either algorithmic reasoning or logic complexity. For example, you can define complex data structure classes and operate on them like trees, heaps, stacks, queues, graphs, etc, or use complex control flow, dynamic programming, recursions, divide and conquer, greedy, backtracking, etc *!*\u2192 *!*\u2192 *!*\u2192 - Creativity, the code needs to be sufficiently different from the provided reference snippets - Restricted usage of certain keywords and packages, you are not allowed to use the following *!*<sup>\u2192</sup> words in any form, even in comments: {LIST\\\\_OF\\\\_FORBIDDEN\\\\_PACKAGES} First, carefully devise a clear plan: e.g., identify how your snippet will be challenging, distinct from reference snippets, and creative. Then, write the final code snippet and its inputs. *!*\u2192 *!*\u2192 ### Reference Code Snippets:\\n\\n> <span id=\"page-39-0\"></span>Figure 34. **Program Input Abduction Task\u2014Problem Proposal Instruction.** *Figure 34.* **Program Input Abduction Task\u2014Problem Proposal Instruction.**\\n\\n{CODE\\\\_REFERENCES\\\\_FROM\\\\_BUFFER}\\n\\n## Task: Create a New Python Code Snippet (where custom classes are allowed, which should be *!*<sup>\u2192</sup> defined at the top of the code snippet) with one Matching Input Using the reference code snippets provided below as examples, design a new and unique Python code snippet that demands deep algorithmic reasoning to deduce the output from the input. Your submission should include a code snippet and a test input pair, where the input will be plugged into the code snippet to produce the output. The input will be given to a test subject to deduce the output, which is meant to be an I.Q. test. *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 ### Code Requirements: - Name the entry function `f` (e.g., `def f(...): ...`), you can have nested definitions inside *!*<sup>\u2192</sup> `f` - Ensure the function returns a value - Include at least one input parameter - Make the function deterministic - Make the snippet require state tracking across multiple data transformations, ensuring the task *!*<sup>\u2192</sup> requires long multi step reasoning - AVOID THE FOLLOWING: \\\\* Random functions or variables \\\\* Date/time operations \\\\* I/O operations (reading files, network requests) \\\\* Printing or logging \\\\* Any external state - Ensure execution completes within 10 seconds on a modern CPU - All imports and class definitions should be at the very top of the code snippet - The snippet should end with a return statement from the main function `f`, anything after will *!*<sup>\u2192</sup> be removed ### Input Requirements: - Provide exactly one test input for your function - Format multiple arguments with commas between them - Remember to add quotes around string arguments ### Formatting: - Format your code with: ```python def f(...): # your code here return ... ``` - Format your input with: ```input arg1, arg2, ... ``` ### Example Format: ```python def f(name: str, info: dict): # code logic here return result ``` ```input \\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}} ``` ### Evaluation Criteria: - Executability, your code should be executable given your input - Difficulty in predicting your ```input``` from 1) your ```python``` code and 2) the deterministic ```output``` that will be obtained from your ```input```. Focus on either algorithmic reasoning or logic complexity. For example, you can define complex data structure classes and operate on them like trees, heaps, stacks, queues, graphs, etc, or use complex control flow, dynamic programming, recursions, divide and conquer, greedy, backtracking, etc *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 - Creativity, the code needs to be sufficiently different from the provided reference snippets - Restricted usage of certain keywords and packages, you are not allowed to use the following *!*<sup>\u2192</sup> words in any form, even in comments: {LIST\\\\_OF\\\\_FORBIDDEN\\\\_PACKAGES} First, carefully devise a clear plan: e.g., identify how your snippet will be challenging, distinct from reference snippets, and creative. Then, write the final code snippet and its inputs. *!*\u2192 *!*\u2192 ### Reference Code Snippets: {CODE\\\\_REFERENCES\\\\_FROM\\\\_BUFFER}\\n\\nFigure 35. **Program Output Deduction Task\u2014Problem Generation Instruction.** *Figure 35.* **Program Output Deduction Task\u2014Problem Generation Instruction.**\\n\\n```\\n```python\\n## Task: Output {NUM_INPUTS} Inputs that can be plugged into the following Code Snippet to\\n!\u2192 produce diverse Outputs, and give a message related to the given snippet.\\nUsing the code snippet provided below, design {NUM_INPUTS} inputs that can be plugged into the\\n    code snippet to produce a diverse set of outputs. A subset of your given input and its\\n    deterministically produced outputs will be given to a test subject to deduce the function,\\n    which is meant to be an I.Q. test. You can also leave a message to the test subject to help\\n    them deduce the code snippet.\\n!\u2192\\n!\u2192\\n!\u2192\\n!\u2192\\n### Input Requirements:\\n- Provide {NUM_INPUTS} valid inputs for the code snippet\\n- For each input, format multiple arguments with commas between them\\n- Remember to add quotes around string arguments\\n- Each input should be individually wrapped in ```input``` tags\\n### Message Requirements:\\n- Leave a message to the test subject to help them deduce the code snippet\\n- The message should be wrapped in ```message``` tags\\n- The message can be in any form, can even be formed into a coding question, or a natural\\n!\u2192 language instruction what the code snippet does\\n- You cannot provide the code snippet in the message\\n### Formatting:\\n- Format your input with:\\n```input\\narg1, arg2, ...\\n```\\n### Example Format:\\n```input\\n\\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n```input\\n\\'Sammy\\', {{\\'age\\': 37, \\'city\\': \\'Los Angeles\\'}}\\n```\\n### Evaluation Criteria:\\n- Executability, your code should be executable given your inputs\\n- Coverage, the inputs and outputs should cover the whole input space of the code snippet, able\\n!\u2192 to deduce the code snippet from the inputs and outputs\\n- Creativity, the inputs need to be sufficiently different from each other\\n- The overall selection of inputs and message combined should be challenging for the test\\n!\u2192 subject, but not impossible for them to solve\\nFirst, carefully devise a clear plan: e.g., understand the code snippet, then identify how your\\n    proposed inputs have high coverage, and why the inputs will be challenging and creative.\\n    Then, write the inputs and message. Remember to wrap your inputs in ```input``` tags, and\\n    your message in ```message``` tags.\\n!\u2192\\n!\u2192\\n!\u2192\\n### Code Snippet:\\n```python\\n{SNIPPET_FROM_BUFFER}\\n```\\n```\\n```\\n<span id=\"page-41-0\"></span>Figure 36. **Program Induction Task\u2014Problem Proposal Instruction.** *Figure 36.* **Program Induction Task\u2014Problem Proposal Instruction.**\\n\\n```\\n```python\\n# Task: Provide One Possible Input of a Python Code Snippet Given the Code and Output\\nGiven the following Code Snippet and the Output, think step by step then provide one possible\\n    input that produced the output. The input needs to be wrapped in ```input``` tags. Remember\\n    if an argument is a string, wrap it in quotes. If the function requires multiple arguments,\\n    separate them with commas.\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Snippet:\\n```python\\n{SNIPPET}\\n```\\n# Output:\\n```output\\n{OUTPUT}\\n```\\n# Output Format:\\n```input\\narg1, arg2, ...\\n```\\n# Example Output:\\n```input\\n\\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n# Task: Provide One Possible Input of a Python Code Snippet Given the Code and Output\\nGiven the following Code Snippet and the Output, think step by step then provide one possible\\n    input that produced the output. The input needs to be wrapped in ```input``` tags. Remember\\n    if an argument is a string, wrap it in quotes. If the function requires multiple arguments,\\n    separate them with commas.\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Snippet:\\n```python\\n{SNIPPET}\\n```\\n# Output:\\n```output\\n{OUTPUT}\\n```\\n# Output Format:\\n```input\\narg1, arg2, ...\\n```\\n# Example Output:\\n```input\\n\\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n```\\n```\\nFigure 37. **Program Input Abduction Task\u2014Problem Solving Prompt.** *Figure 37.* **Program Input Abduction Task\u2014Problem Solving Prompt.** Figure 37. **Program Input Abduction Task\u2014Problem Solving Prompt.**\\n\\n```\\n```python\\n# Task: Deduce the Output of a Python Code Snippet Given the Code and Input\\nGiven the following Code Snippet and the Input, think step by step then deduce the output that\\n    will be produced from plugging the Input into the Code Snippet. Put your output in\\n    ```output``` tags. Remember if the output is a string, wrap it in quotes. If the function\\n    returns multiple values, remember to use a tuple to wrap them.\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Snippet:\\n```python\\n{SNIPPET}\\n```\\n# Input:\\n```input\\n{INPUT}\\n```\\n# Example Output:\\n```output\\n{{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n# Task: Deduce the Output of a Python Code Snippet Given the Code and Input\\nGiven the following Code Snippet and the Input, think step by step then deduce the output that\\n    will be produced from plugging the Input into the Code Snippet. Put your output in\\n    ```output``` tags. Remember if the output is a string, wrap it in quotes. If the function\\n    returns multiple values, remember to use a tuple to wrap them.\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Snippet:\\n```python\\n{SNIPPET}\\n```\\n# Input:\\n```input\\n{INPUT}\\n```\\n# Example Output:\\n```output\\n{{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n```\\n```\\n![](_page_42_Figure_4.jpeg)\\n\\n```\\n```python\\n# Task: Deduce the Function that Produced the Outputs from the Inputs\\nGiven a set of input/output pairs and a message that describes the function, think through the\\n    problem step by step to deduce a general code snippet. This code should produce the hidden\\n    outputs from the hidden inputs, matching the original data-generating code that created the\\n    input/output pairs. Place your final answer inside python tags! It may be helpful to work\\n    through each input/output pair individually to test your function. If your function doesn\\'t\\n    work as expected, revise it until it does. The final code snippet will be used to evaluate\\n    your response, which is wrapped in ```python``` tags.\\n!\u2192\\n!\u2192\\n!\u2192\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Requirements:\\n- Name the entry function `f` (e.g., `def f(...): ...`), you can have nested definitions inside\\n!\u2192 `f`\\n- Ensure the function returns a value\\n- Include at least one input parameter\\n- Make the function deterministic\\n- AVOID THE FOLLOWING:\\n  * Random functions or variables\\n  * Date/time operations\\n  * I/O operations (reading files, network requests)\\n  * Printing or logging\\n  * Any external state\\n- Ensure execution completes within 10 seconds on a modern CPU\\n- All imports and class definitions should be at the very top of the code snippet\\n- The snippet should end with a return statement from the main function `f()`, anything after\\n!\u2192 will be removed\\n# Input and Output Pairs:\\n{INPUT_OUTPUT_PAIRS}\\n# Message:\\n```message\\n{MESSAGE}\\n```\\n# Example Output:\\n```python\\ndef f(a):\\n    return a\\n```\\nName your entry function `f()`!!!\\n```\\n```\\n<span id=\"page-43-0\"></span>![](_page_43_Figure_2.jpeg)\\n\\n#### **Task: Manual Constructed Sudoku Abduction Task**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Manual Constructed Sudoku Abduction Task**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Output:**\\n\\nis not valid, \\'g\\\\_0\\' returns \\'False\\'.\\n\\n- The masked board is then returned.\\n\\nwhat it does. Let\\'s break down the function step by step:\\n\\ncomplete board, and \\'f\\' masked 51 random positions.\\n\\n[\"3\", \"4\", \"5\", \"2\", \"8\", \"6\", \"1\", \"7\", \"9\"] ] \"\\'\\n\\nboard will produce the given output.\\n\\n\"8\", \"6\", \"1\", \"7\", \"9\"] ] \"\\'\\n\\nsuch that after masking 51 positions, we get the output shown.\\n\\n```\\n```python\\nModel Input: Here is the function f and the output: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\\n[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\\n[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\\n[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ], please predict the input.\\nimport random\\nfrom typing import List\\nimport copy\\ndef g_0(board: List[List[str]]) -> bool:\\n    def is_valid_block(block):\\n        return sorted(block) == [str(i) for i in range(1, 10)]\\n    for row in board:\\n        if not is_valid_block(row):\\n             return False\\n    for col in zip(*board):\\n        if not is_valid_block(col):\\n             return False\\n    for box_row in range(0, 9, 3):\\n        for box_col in range(0, 9, 3):\\n             block = [\\n                 board[r][c]\\n                 for r in range(box_row, box_row + 3)\\n                 for c in range(box_col, box_col + 3)\\n             ]\\n             if not is_valid_block(block):\\n                 return False\\n    return True\\ndef f(board: List[List[str]]) -> List[List[str]]:\\n    for i in range(9):\\n        for j in range(9):\\n             if board[i][j] == \".\":\\n                 raise ValueError(\"Invalid board\")\\n    num_to_mask = 51\\n    if not g_0(board):\\n        raise ValueError(\"Invalid board\")\\n    masked_board = copy.deepcopy(board)\\n    all_positions = [(i, j) for i in range(9) for j in range(9)]\\n    random.shuffle(all_positions)\\n    for i, j in all_positions[:num_to_mask]:\\n        masked_board[i][j] = \".\"\\n    return masked_board\\n                                            45\\n```\\n```\\nTo determine the input that produced the given output, we need to analyze the function \\'f\\' and understand\\n\\n1. \\\\*\\\\*Input Validation in \\'g\\\\_0\\'\\\\*\\\\*: - The function \\'g\\\\_0\\' checks if the given board is valid. - A board is valid if each row, each column, and each 3x3 subgrid contains the digits 1 through 9 exactly once. - If the board\\n\\n2. \\\\*\\\\*Input Validation in \\'f\\'\\\\*\\\\*: - The function \\'f\\' frst checks if there are any \".\" in the board. If there are, it\\n\\n3. \\\\*\\\\*Masking the Board\\\\*\\\\*: - If the board is valid (i.e., \\'g\\\\_0(board)\\' returns \\'True\\'), the function \\'f\\' proceeds to mask the board. - It creates a copy of the board and then randomly selects 51 positions to mask with \".\".\\n\\n\"\\' We can see that the board has 51 positions masked with \".\". Therefore, the input board must have been a\\n\\nLet\\'s construct a complete board that, when masked, can produce the given output. We need to fnd a board\\n\\nHere is a complete board that matches the structure of the output: \"\\'python [ [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"], [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"], [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"], [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"], [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"], [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"], [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"], [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"],\\n\\n1. The board is complete with no \".\". 2. The board is valid because each row, each column, and each 3x3 subgrid contains the digits 1 through 9 exactly once. 3. The function \\'f\\' will mask 51 random positions. Given the random nature of the masking, we need to ensure that the positions masked match the positions of \".\" in the output. Since the positions are random, we can assume that the function \\'f\\' with this complete\\n\\nTherefore, the input that produced the output is: \"\\'input [ [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"], [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"], [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"], [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"], [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"], [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"], [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"], [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"], [\"3\", \"4\", \"5\", \"2\",\\n\\nFigure 40. **Vibe Check 1: Sudoku.**\\n\\nGiven the output: \"\\'output [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\n\\nraises a \\'ValueError\\'. - This means the input board to \\'f\\' must be a complete board with no \".\".\\n\\nLet\\'s verify that this board, when passed to the function \\'f\\', produces the given output.\\n\\n[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ], please predict the input.\\n\\n**Model Input:** Here is the function f and the output: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\\n\\n# **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Task: Manual Constructed Sudoku Abduction Task**\\n\\nTo determine the input that produced the given output, we need to analyze the function \\'f\\' and understand what it does. Let\\'s break down the function step by step:\\n\\n1. \\\\*\\\\*Input Validation in \\'g\\\\_0\\'\\\\*\\\\*: - The function \\'g\\\\_0\\' checks if the given board is valid. - A board is valid\\n\\nif each row, each column, and each 3x3 subgrid contains the digits 1 through 9 exactly once. - If the board is not valid, \\'g\\\\_0\\' returns \\'False\\'.\\n\\n2. \\\\*\\\\*Input Validation in \\'f\\'\\\\*\\\\*: - The function \\'f\\' frst checks if there are any \".\" in the board. If there are, it raises a \\'ValueError\\'. - This means the input board to \\'f\\' must be a complete board with no \".\".\\n\\n3. \\\\*\\\\*Masking the Board\\\\*\\\\*: - If the board is valid (i.e., \\'g\\\\_0(board)\\' returns \\'True\\'), the function \\'f\\' proceeds to mask the board. - It creates a copy of the board and then randomly selects 51 positions to mask with \".\". - The masked board is then returned.\\n\\nGiven the output: \"\\'output [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] \"\\' We can see that the board has 51 positions masked with \".\". Therefore, the input board must have been a complete board, and \\'f\\' masked 51 random positions.\\n\\nLet\\'s construct a complete board that, when masked, can produce the given output. We need to fnd a board such that after masking 51 positions, we get the output shown.\\n\\nHere is a complete board that matches the structure of the output: \"\\'python [ [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"], [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"], [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"], [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"], [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"], [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"], [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"], [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"], [\"3\", \"4\", \"5\", \"2\", \"8\", \"6\", \"1\", \"7\", \"9\"] ] \"\\'\\n\\nLet\\'s verify that this board, when passed to the function \\'f\\', produces the given output.\\n\\n1. The board is complete with no \".\". 2. The board is valid because each row, each column, and each 3x3 subgrid contains the digits 1 through 9 exactly once. 3. The function \\'f\\' will mask 51 random positions. Given the random nature of the masking, we need to ensure that the positions masked match the positions of \".\" in the output. Since the positions are random, we can assume that the function \\'f\\' with this complete\\n\\nboard will produce the given output.\\n\\nTherefore, the input that produced the output is: \"\\'input [ [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"], [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"], [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"], [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"], [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"], [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"], [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"], [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"], [\"3\", \"4\", \"5\", \"2\", \"8\", \"6\", \"1\", \"7\", \"9\"] ] \"\\'\\n\\n<span id=\"page-45-0\"></span>Figure 40. **Vibe Check 1: Sudoku.** *Figure 40.* **Vibe Check 1: Sudoku Solver.** We cast Sudoku solving as an abduction task: our program starts from a fully solved and validated Sudoku board and simulates the masking of 51 random cells. The masked board is then presented as output, and the model is tasked with inferring the original input \u2014 effectively solving the puzzle backwards. An example solution is shown above, where AZR-Coder-14b verifies its initial guess before correctly answering. Generation parameters: temperature=0.6.\\n\\n46\\n\\n```\\n```python\\nTask: Manually Constructed Sum Product Game Solve Abduction Task\\nModel Input: Here is the function f and the output: \\'True\\', please predict the input.\\ndef g_3():\\n    return [(x, y) for x in range(2, 101) for y in range(x + 1, 101) if x + y <= 100]\\ndef g_2(pairs):\\n    d = {}\\n    for (x, y) in pairs:\\n        s = x + y\\n        d.setdefault(s, []).append((x, y))\\n    return d\\ndef g_1(pairs):\\n    d = {}\\n    for (x, y) in pairs:\\n        p = x * y\\n        d.setdefault(p, []).append((x, y))\\n    return d\\ndef g_0():\\n    pairs = g_3()\\n    sum_dict = g_2(pairs)\\n    prod_dict = g_1(pairs)\\n    allowed_sums = [s for s, candidate_pairs in sum_dict.items() \\\\\\n    if all(len(prod_dict[x * y]) > 1 for (x, y) in candidate_pairs)]\\n    candidates_after_S = [pair for pair in pairs if pair[0] + pair[1] in allowed_sums]\\n    new_prod_dict = g_1(candidates_after_S)\\n    unique_products = {prod: pair_list for prod, pair_list in new_prod_dict.items() \\\\\\n    if len(pair_list) == 1}\\n    final_candidates = []\\n    for s in allowed_sums:\\n        valid_pairs = [pair for pair in candidates_after_S \\\\\\n        if pair[0] + pair[1] == s and (pair[0] * pair[1]) in unique_products]\\n        if len(valid_pairs) == 1:\\n            final_candidates.append(valid_pairs[0])\\n    return sorted(set(final_candidates))\\ndef f(x, y):\\n    if not (isinstance(x, int) and isinstance(y, int)):\\n        return False\\n    if x <= 1 or y <= 1 or y <= x or (x + y) > 100:\\n        return False\\n    final_candidates = g_0()\\n    return len(final_candidates) == 1 and final_candidates[0] == (x, y)\\n```\\n```\\niterates through the list. Then, it checks for each pair of accumulated sums if their diference equals the target. If such a pair is found, it returns the accumulated sum at the frst index of the pair.\\n\\nTo fnd one possible input that produces the output 1, we need to fnd a scenario where the diference between any two accumulated\\\\_values equals the target, and the frst accumulated\\\\_values that\\n\\nFigure 41. **Solve Abduction Task Example.** A more detailed version of the example shown in main Figure 7. The model is solving an\\n\\nSince no pair satisfes the condition, the function will not return any value. This doesn\\'t match our output. Let\\'s try another example.\\n\\nGiven the complexity and the fact that no simple example seems to work, let\\'s try a more complex scenario:\\n\\nThe pair (i=1, j=2) satisfes the condition, and the function returns the frst accumulated value in this pair, which is 3. This still doesn\\'t match our output.\\n\\nThe pair (i=1, j=2) satisfes the condition, and the function returns the frst accumulated value in this pair, which is 1. This matches our output.\\n\\n**Model Output:**\\n\\nsatisfes this condition is 1. Let\\'s consider a simple example: -numbers = [1, 2] -target = 1\\n\\nConsider:\\n\\n-numbers = [1, 0] -target = 1 Step-by-step calculation:\\n\\n...(shortened)\\n\\n-numbers = [2, -1, 1] -target = 1 Step-by-step calculation:\\n\\nHere\\'s the step-by-step calculation:\\n\\n1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 2 = 3, accumulated\\\\_values = [1, 3] -Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target)\\n\\n1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 0 = 1, accumulated\\\\_values = [1, 1] -Check for pair (i=0, j=1): 1 - 1 = 0 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 1 - 1 = 0 (not equal to target)\\n\\n1. current\\\\_sum = 0 + 2 = 2, accumulated\\\\_values = [2] 2. current\\\\_sum = 2 - 1 = 1, accumulated\\\\_values = [2, 1] 3. current\\\\_sum = 1 + 1 = 2, accumulated\\\\_values = [2, 1, 2] -Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target) -Check for pair (i=0, j=2): 2 - 2 = 0 (not equal to target) -Check for pair (i=1, j=2): 2 - 1 = 1 (equal to target)\\n\\nabduction task (predict input).\\n\\nTherefore, one possible input that could produce the output 1 is: [2, -1, 1], 1\\n\\n# **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nthe function \\'f(x, y)\\' returns \\'True\\' if the following conditions are met:\\n\\n1. \\'x\\' and \\'y\\' are both integers.\\n\\n2. \\'x\\' and \\'y\\' satisfy \\'1 < x < y\\' and \\'x + y <= 100\\'.\\n\\n3. The fnal candidates after applying the conditions in \\'g\\\\_0\\' are exactly one pair, and that pair is \\'(x, y)\\'.\\n\\nLet\\'s analyze the function \\'g\\\\_0\\' step by step to understand what it does:\\n\\n1. \\'pairs = g\\\\_3()\\' generates all pairs \\'(x, y)\\' such that \\'2 <= x < y <= 100\\' and \\'x + y <= 100\\'.\\n\\n**Task: Manually Constructed Sum Product Game Solve Abduction Task**\\n\\n**Model Input:** Here is the function f and the output: \\'True\\', please predict the input.\\n\\n2. \\'sum\\\\_dict = g\\\\_2(pairs)\\' creates a dictionary where the keys are the sums of the pairs and the values are lists of pairs that add up to that sum.\\n\\n3. \\'prod\\\\_dict = g\\\\_1(pairs)\\' creates a dictionary where the keys are the products of the pairs and the values are lists of pairs that\\n\\nhave that product.\\n\\n4. \\'allowed\\\\_sums = [s for s, candidate\\\\_pairs in sum\\\\_dict.items() if all(len(prod\\\\_dict[x \\\\* y]) > 1 for (x, y) in candidate\\\\_pairs)]\\' flters out the sums \\'s\\' for which all pairs \\'(x, y)\\' that add up to \\'s\\' have more than one pair with the same product.\\n\\n5. \\'candidates\\\\_after\\\\_S = [pair for pair in pairs if pair[0] + pair[1] in allowed\\\\_sums]\\' flters out the pairs whose sum is in \\'allowed\\\\_sums\\'.\\n\\n6. \\'new\\\\_prod\\\\_dict = g\\\\_1(candidates\\\\_after\\\\_S)\\' creates a new product dictionary using the fltered pairs.\\n\\n7. \\'unique\\\\_products = prod: pair\\\\_list for prod, pair\\\\_list in new\\\\_prod\\\\_dict.items() if len(pair\\\\_list) == 1\\' creates a dictionary of products that have exactly one pair.\\n\\n8. \\'fnal\\\\_candidates = []\\' initializes a list of fnal candidates.\\n\\n9. The loop \\'for s in allowed\\\\_sums:\\' iterates over each sum in \\'allowed\\\\_sums\\' and checks if there is exactly one pair \\'(x, y)\\' such that \\'x + y = s\\' and \\'x \\\\* y\\' is in \\'unique\\\\_products\\'. If so, this pair is added to \\'fnal\\\\_candidates\\'. 10. The function returns \\'sorted(set(fnal\\\\_candidates))\\', which should be a list containing exactly one pair if the conditions are met.\\n\\nGiven that the output is \\'True\\', it means that there is exactly one pair \\'(x, y)\\' that satisfes all the conditions. Let\\'s identify this pair.\\n\\nTo do this, we need to understand the mathematical conditions and constraints: 1. \\'1 < x < y\\' and \\'x + y <= 100\\'.\\n\\n2. The pair \\'(x, y)\\' must be the only pair whose sum is in \\'allowed\\\\_sums\\' and whose product is unique among the pairs with the same sum.\\n\\nBy analyzing the constraints and the nature of the problem, we can deduce that the pair \\'(x, y)\\' must be such that the sum \\'x + y\\' is unique in the sense that all pairs adding up to this sum have products that are not unique, except for this pair.\\n\\nAfter detailed analysis or by running the code with diferent values, we fnd that the pair \\'(x, y) = (4, 13)\\' satisfes all the conditions. Let\\'s verify:\\n\\n1. \\'1 < 4 < 13\\' and \\'4 + 13 = 17 <= 100\\'.\\n\\n\"\\'\\n\\n2. We need to check the \\'allowed\\\\_sums\\' and the uniqueness of the product \\'4 \\\\* 13 = 52\\'.\\n\\nBy running the code or logical deduction, we can confrm that \\'(4, 13)\\' is the only pair that satisfes all the conditions.\\n\\nTherefore, the input that produced the output \\'True\\' is: \"\\'input (4, 13)\\n\\n<span id=\"page-47-0\"></span>Figure 41. **Solve Abduction Task Example.** A more detail[ed version of the exam](https://en.wikipedia.org/wiki/Sum_and_Product_Puzzle)ple shown in main Figure 7. The model is solving an abduction task (predict input). 48 *Figure 41.* **Vibe Check 2: Sum Product Game.** We cast the Sum-Product Game as an abduction task, where when the constraints of the game are satisfied, function \\'f\\' returns True, return False otherwise. AZR-Coder-14b was able to first analyze the complicated constraints, identify candidate solution and verify. Generation parameters: temperature=0.6, top\\\\_p=0.95.\\n\\n# <span id=\"page-48-0\"></span>**D. Alternative Approaches Considered**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-0\\\\\"></span>**D. Alternative Approaches Considered**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nIn this section, we share many of the approaches we tried that did not prove to be particularly helpful for Absolute Zero Reasoner. However, we believe it is especially valuable to share these findings with the community, as they are crucial for guiding future research. Below, we outline each of the additional methods we explored during the development of our project.\\n\\n# <span id=\"page-48-1\"></span>**D.1. Error Deduction Task**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-1\\\\\"></span>**D.1. Error Deduction Task**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nSince programming languages often have error messages, and these messages contain a lot of information about how someone might expect a program to run, we also came up with another task domain: allowing the learner to propose a program *that will produce an error*, and requiring the solver to *deduce what kind of error is raised* when executing this code. We experimented with this additional task alongside the induction (*f*), deduction (*o*), and abduction (*i*) tasks. Unfortunately, we did not observe noticeable changes in downstream performance with this additional task and since it requires more computational resources than our AZR setup, we decided not to incorporate it into our final version. However, we believe further thorough investigation of this is well deserved.\\n\\n# <span id=\"page-48-2\"></span>**D.2. Composite Functions as Curriculum Learning**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-2\\\\\"></span>**D.2. Composite Functions as Curriculum Learning**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nOne valuable property we can leverage from programming languages is the ability to compose functions\u2014that is, to define a function as a composite of other functions, i.e., *f*(*g*(*x*)). In our setting, when generating a program, we can not only require the output to be a valid program but also constrain the LLM to utilize a predefined set of programs within its main function. For example, if the target program to be generated is *<sup>f</sup>*(\u00b7), we can sample a set of previously generated programs {*g*\\\\_0*, . . . , gc*} from <sup>D</sup>, and force a valid program to be *<sup>f</sup>*(*g*\\\\_0*,* \u00b7 \u00b7 \u00b7 *, gc, i*).\\n\\nSince all programs are generated by the LLM itself, this setup allows the model to bootstrap from its earlier generations, automatically increasing the complexity of the generated programs. We interpret this mechanism as a form of curriculum learning: earlier programs in the AZR self-play loop tend to be simpler, and as the loop progresses, they become increasingly complex. By composing newer programs from progressively more difficult earlier ones, the resulting programs naturally inherit this growing difficulty, which in turn challenges the solver step.\\n\\nFor implementation, in generating tasks for abduction and deduction, we begin by sampling a binary decision from a binomial distribution with *p* = 0*.*5. This determines whether the generated program should be a simple program or a composite one. If the sample is 0, we prompt the LLM to generate a standard program along with a corresponding input. If the sample is 1, we prompt the LLM to generate a composite program. To construct the composite, we first sample an integer *<sup>c</sup>* \u223c U(1*,* 3), then uniformly select *<sup>c</sup>* programs from the dataset <sup>D</sup> that are not themselves composite programs. Finally, we prompt the LLM to generate a valid program that incorporates {*g*\\\\_0*, . . . , gc*} as subcomponents, ensuring it composes these selected programs meaningfully. We additionally filter programs that did not utilize all the *c* programs.\\n\\nHowever, we did not observe a significant difference when using this more complex curriculum compared to our simpler and more effective approach. One failure mode we encountered was that the model often defaulted to simply returning \"g(x)\", effectively learning *f*(*g*(*x*)) = *g*(*x*), which failed to introduce any additional difficulty. This trivial behavior undermined the intended challenge, leading us to deprioritize further exploration in this direction. While it may be possible to design a stricter reward mechanism\u2014such as enforcing *<sup>f</sup>*(*g*(*x*)) \u0338<sup>=</sup> *<sup>g</sup>*(*x*) by executing the code via a Python interpreter and penalizing such shortcuts\u2014we leave this to future work.\\n\\n# <span id=\"page-48-3\"></span>**D.3. Toying with the Initial** *p*(*z*)\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-3\\\\\"></span>**D.3. Toying with the Initial** *p*(*z*)\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe investigated a setting where the initial seed buffer (see Section [3.3.1](#page-5-2) on how we generated these), *i.e*. *p*(*z*) in Equation [\\\\(3\\\\)](#page-3-2), is not self-generated by the base model, but instead sourced from the [LeetCode Dataset.](https://huggingface.co/datasets/newfacade/LeetCodeDataset) We only modified this component and ran AZR using the same procedure as before, continuing to add new valid programs to the initialized buffer. We observed an increase in initial performance on coding benchmarks; however, the performance plateaued at roughly the same level after additional training steps, compared to our official AZR setup. Interestingly, math performance was lower than in the official AZR setup, pointing towards that on-policy data may be more beneficial to the learner to bootstrap from for mathematical reasoning. We believe that exploring different strategies for initializing and updating *p*(*z*) is an important and exciting direction for future research. We briefly explored different strategies for sampling reference code, ultimately settling on uniform sampling for its simplicity, though we also experimented with recency-based sampling and observed potential collapse.\\n\\n# <span id=\"page-48-4\"></span>**D.4. Extra Rewards**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-4\\\\\"></span>**D.4. Extra Rewards**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Complexity Rewards.** Code complexity is well studied in software science and could potentially be a good proxy for measuring how hard it is to infer the properties of a piece of code for our reasoning learner. Therefore, for the problem proposer, we can add various measures of complexity\u2014such as Cyclomatic Complexity [\\\\(Ebert et al.,](#page-14-15) [2016\\\\)](#page-14-15), maintainability, etc.\u2014to the reward function to incentivize the proposer to produce more complex programs. For illustration purposes, we tried using the Maintainability measure and the Halstead complexity measure [\\\\(Halstead,](#page-14-16) [1977\\\\)](#page-14-16) as intrinsic rewards. Concretely, we used the complexipy and Radon packages [\\\\(Lopez,](#page-15-18) [2025;](#page-15-18) [Canal,](#page-13-12) [2023\\\\)](#page-13-12) to implement the respective metrics. These are then served as intrinsic rewards during the AZR self-play phase.\\n\\n**Diversity Rewards.** We also attempted using diversity rewards to . Inspired by DiveR-CT [\\\\(Zhao et al.,](#page-18-2) [2025a\\\\)](#page-18-2), we incorporate *code edit distance* as an intrinsic reward. Specifically, we treat the reference programs shown in the prompt as anchors and compute the average code edit distance between the generated program and these anchors. This serves as a measure of diversity in the generated output. Additionally, we explored another diversity-based reward inspired by the notion of *surprise* [\\\\(Zhao et al.,](#page-18-4) [2022\\\\)](#page-18-4). In this approach, we construct a probability distribution over previously encountered input/output pairs that the solver has answered. The reward is then defined as <sup>1</sup> <sup>\u2212</sup> *<sup>p</sup>*(input/output), where *<sup>p</sup>* denotes the empirical probability of a particular input or output. While both strategies were evaluated in our experiments, we did not observe a significant difference in performance. However, we believe this aspect warrants deeper investigation, as diversity rewards remain a promising avenue for strengthening AZR further.\\n\\n**Reward Aggregation.** We tested several ways on how to combine rewards for the proposer and discriminator. First, we separate the reward into extrinsic reward *<sup>r</sup>*extrinsic and a set of intrinsic reward(s) *<sup>I</sup>* <sup>=</sup> {*ri*}, and tested the following strategies to combine them into a single reward,\\n\\n$$r = r\\\\_{\\\\text{extrinsic}} + \\\\sum\\\\_{i}^{|I|} r\\\\_i,\\\\tag{11}$$\\n\\n<span id=\"page-49-1\"></span>\\n$$r = r\\\\_{\\\\text{extinsic}} \\\\cdot \\\\sum\\\\_{i}^{|\\\\mathcal{I}|} r\\\\_i,\\\\tag{12}$$\\n\\n$$r = r\\\\_{\\\\text{extrinsic}} \\\\cdot \\\\prod\\\\_{i}^{|I|} r\\\\_i,\\\\tag{13}$$\\n\\n$$r = r\\\\_{\\\\text{extrinsic}} + \\\\prod\\\\_{i}^{|\\\\mathcal{I}|} r\\\\_i. \\\\tag{14}$$\\n\\nWe found that the simple additive way of combining rewards, a.k.a Equation [\\\\(11\\\\)](#page-49-1), produced the most stable runs, possibly due to less variance.\\n\\n### <span id=\"page-49-0\"></span>**D.5. Environment Transition**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-4\\\\\"></span>**D.4. Extra Rewards**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-49-0\\\\\"></span>**D.5. Environment Transition**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe investigated how the transition function in our coding environment for the proposer. Specifically, after generating a piece of code, we can apply a transformation function on it before giving it making it an valid tuple in our dataset. We investigated two\\n\\n**Removing Comments and Docstrings** In early iterations of our experiments, we noticed that comments and docstrings were sometimes used to explicitly outline what the function was doing, or even served as a partial \"note-taking\" interleaved \"ReAct\" process [\\\\(Yao et al.,](#page-17-1) [2023\\\\)](#page-17-1) of generating code\u2014that is, the model could interleave think and action at the same time, and to make the generated code valid, it used comments to encase its thoughts (Appendix [C.3\\\\)](#page-24-0), similarly observed in DeepSeek-Prover-V2: [\\\\(Ren et al.,](#page-15-3) [2025\\\\)](#page-15-3). We then thought that to make the task harder for the solver, we should occlude this information from it. However, we observed a significant performance drop after removing all comments and docstrings. One explanation for this phenomenon is that the only \"communication\" channel between the proposer and the solver is restricted to the code itself, rather than some kind of \"message\" along with the code. These messages can potentially provide hints to the solver, thus making some otherwise impossible tasks solvable. As a result, the solver is able to learn from its experience and self-bootstrap out of certain unsolvable tasks.\\n\\n**Removing Global Variables.** We observed that some programs contain globally declared variables that may inadvertently leak information about the correct answer\u2014this issue is particularly prevalent in the input induction task generation and solving. Initially, we were concerned that such leakage might lead to wasted computation on trivial or compromised examples. To address this, we developed a systematic procedure to remove globally declared variables from the generated programs.\\n\\nHowever, after applying this cleaning step, we observed a noticeable drop in performance on our self-play reasoning tasks. One possible explanation is that the generation step is unaware of this post-processing modification; since the reward is assigned after the transition function (which includes variable removal), the model may not learn effectively from this mismatch.\\n\\nMoreover, we believe that even when answers are present, the solver still engages in nontrivial reasoning to reach a solution, potentially benefiting from this exposure. This aligns with the idea of rationalization as proposed in STaR [\\\\(Zelikman et al.,](#page-17-16) [2022\\\\)](#page-17-16), where the model pretends to not see the answer but still performs reasoning during learning. Therefore, in our final experiments, we choose not to remove globally declared variables, allowing the self-play loop to naturally incorporate and adapt to such cases.' images={'_page_0_Picture_0.jpeg': <PIL.Image.Image image mode=RGB size=311x123 at 0x75C3516A3640>, '_page_0_Figure_7.jpeg': <PIL.Image.Image image mode=RGB size=1277x477 at 0x75C3516A1420>, '_page_1_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1275x400 at 0x75C3516A1720>, '_page_3_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=621x237 at 0x75C351CBF4C0>, '_page_4_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1101x470 at 0x75C3513D94B0>, '_page_9_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1265x382 at 0x75C352BF0100>, '_page_22_Figure_8.jpeg': <PIL.Image.Image image mode=RGB size=1035x504 at 0x75C3A941EB60>, '_page_23_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1286x632 at 0x75C3A941EF80>, '_page_23_Figure_3.jpeg': <PIL.Image.Image image mode=RGB size=1286x632 at 0x75C3A941F670>, '_page_24_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1289x630 at 0x75C3A941EDD0>, '_page_24_Figure_3.jpeg': <PIL.Image.Image image mode=RGB size=1289x608 at 0x75C3A941F2E0>, '_page_33_Figure_12.jpeg': <PIL.Image.Image image mode=RGB size=1224x411 at 0x75C3A8EAC520>, '_page_34_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=257x25 at 0x75C3A8EAE440>, '_page_34_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=1290x1060 at 0x75C3A8EADE70>, '_page_35_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=252x25 at 0x75C3A8EAFCD0>, '_page_35_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=1298x1060 at 0x75C3A8EAD330>, '_page_36_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=262x26 at 0x75C3A8EAD7B0>, '_page_36_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=1296x1072 at 0x75C3A8EACEB0>, '_page_37_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1299x1087 at 0x75C3A8EAE800>, '_page_42_Figure_4.jpeg': <PIL.Image.Image image mode=RGB size=731x38 at 0x75C3A9444910>, '_page_43_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=644x37 at 0x75C3A941D1E0>} metadata={'table_of_contents': [{'title': 'Absolute Zero: Reinforced Self-play Reasoning with Zero Data', 'heading_level': None, 'page_id': 0, 'polygon': [[53.19140625, 116.8857421875], [516.673828125, 116.8857421875], [516.673828125, 134.78680419921875], [53.19140625, 134.78680419921875]]}, {'title': '1. Introduction', 'heading_level': None, 'page_id': 1, 'polygon': [[54.498779296875, 330.064453125], [132.6796875, 330.064453125], [132.6796875, 343.35107421875], [54.498779296875, 343.35107421875]]}, {'title': '2. The Absolute Zero Paradigm', 'heading_level': None, 'page_id': 2, 'polygon': [[54.46142578125, 350.2638854980469], [215.84291076660156, 350.2638854980469], [215.84291076660156, 362.2190856933594], [54.46142578125, 362.2190856933594]]}, {'title': '2.1. Preliminaries', 'heading_level': None, 'page_id': 2, 'polygon': [[54.797607421875, 370.4440002441406], [137.44371032714844, 370.4440002441406], [137.44371032714844, 381.3531188964844], [54.797607421875, 381.3531188964844]]}, {'title': '2.2. Absolute Zero', 'heading_level': None, 'page_id': 2, 'polygon': [[54.797607421875, 614.7240142822266], [140.748046875, 614.7240142822266], [140.748046875, 625.6331176757812], [54.797607421875, 625.6331176757812]]}, {'title': '3. Absolute Zero Reasoner', 'heading_level': None, 'page_id': 3, 'polygon': [[54.61083984375, 415.1498718261719], [190.2587890625, 415.1498718261719], [190.2587890625, 427.1050720214844], [54.61083984375, 427.1050720214844]]}, {'title': '3.1. Two Roles in One: Proposer and Solver', 'heading_level': None, 'page_id': 3, 'polygon': [[54.61083984375, 568.5080108642578], [257.4219665527344, 568.5080108642578], [257.4219665527344, 579.4171142578125], [54.61083984375, 579.4171142578125]]}, {'title': '3.2. Learning Different Modes of Reasoning: Deduction, Induction, and Abduction\\nAbsolute Zero: Reinforced Self-play Reasoning with Zero Data', 'heading_level': None, 'page_id': 5, 'polygon': [[53.9384765625, 67.06463623046875], [439.451171875, 67.06463623046875], [439.451171875, 79.51507568359375], [53.9384765625, 79.51507568359375]]}, {'title': '3.3. Absolute Zero Reasoner Learning Algorithm\\n3.3. Absolute Zero Reasoner Learning Algorithm', 'heading_level': None, 'page_id': 5, 'polygon': [[54.5361328125, 483.15008544921875], [291.88543701171875, 483.15008544921875], [291.88543701171875, 499.943115234375], [54.5361328125, 499.943115234375]]}, {'title': '3.3.1. BUFFER INITIALIZATION\\nTo initialize AZR self-play, we frst generate a seed set of valid triplets using\\n3.3.1. Buffer Initialization', 'heading_level': None, 'page_id': 5, 'polygon': [[55.05908203125, 564.9101104736328], [335.7440185546875, 564.9101104736328], [335.7440185546875, 592.0727996826172], [55.05908203125, 592.0727996826172]]}, {'title': '3.3.2. Task Proposal Inputs and Buffer Management', 'heading_level': None, 'page_id': 6, 'polygon': [[54.685546875, 362.24591064453125], [308.1165771484375, 362.24591064453125], [308.1165771484375, 375.310546875], [54.685546875, 375.310546875]]}, {'title': '3.3.3. Constructing Valid Tasks', 'heading_level': None, 'page_id': 6, 'polygon': [[54.76025390625, 496.7949523925781], [208.84373474121094, 496.7949523925781], [208.84373474121094, 510.08203125], [54.76025390625, 510.08203125]]}, {'title': '3.3.4. Answer Verification', 'heading_level': None, 'page_id': 7, 'polygon': [[54.797607421875, 288.1579284667969], [184.078125, 288.1579284667969], [184.078125, 300.48046875], [54.797607421875, 300.48046875]]}, {'title': '3.3.5. Task-Relative REINFORCE++', 'heading_level': None, 'page_id': 7, 'polygon': [[54.76025390625, 362.18389892578125], [226.54920959472656, 362.18389892578125], [226.54920959472656, 374.537109375], [54.76025390625, 374.537109375]]}, {'title': '4. Experiments', 'heading_level': None, 'page_id': 7, 'polygon': [[54.498779296875, 497.7768859863281], [133.576171875, 497.7768859863281], [133.576171875, 509.7320861816406], [54.498779296875, 509.7320861816406]]}, {'title': '4.1. Experiment Setup', 'heading_level': None, 'page_id': 7, 'polygon': [[54.46142578125, 517.9570007324219], [158.96731567382812, 517.9570007324219], [158.96731567382812, 528.8661193847656], [54.46142578125, 528.8661193847656]]}, {'title': '4.2. Results', 'heading_level': None, 'page_id': 8, 'polygon': [[55.1337890625, 478.7578125], [109.072265625, 478.7578125], [109.072265625, 490.5091247558594], [55.1337890625, 490.5091247558594]]}, {'title': \"Input: [1,2,3,4,5], 5\\nModel-proposed Task Response of Predict Input\\nLet's analyze the code snippet \u2026(analysis) To find one possible input that produces \\nthe output 1, we need to find a scenario where \u2026(analysis) \\nLet's consider a simple example: numbers = [1, 2], target = 1\\nHere's the step-by-step calculation:\\n1. current_sum = 0 + 1 = 1, accumulated_values = [1]\\n2. current_sum = 1 + 2 = 3, accumulated_values = [1, 3]\\n-Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target)\\n-Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target)\\n-Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target)\\nSince no pair satisfies the condition, the function will not return any value. This \\ndoesn't match our output. Let's try another example \u2026(Tried 3 more examples) \\nGiven the complexity and the fact that no simple example seems to work, let's \\ntry a more complex scenario: numbers = [2, -1, 1], target = 1\\nStep-by-step calculation:\\n1. current_sum = 0 + 2 = 2, accumulated_values = [2]\\n2. current_sum = 2 - 1 = 1 , accumulated_values = [2, 1]\\n3. current_sum = 1 + 1 = 2, accumulated_values = [2, 1, 2]\\n- Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target)\", 'heading_level': None, 'page_id': 10, 'polygon': [[54.5361328125, 64.775390625], [533.3927612304688, 64.775390625], [533.3927612304688, 249.7578125], [54.5361328125, 249.7578125]]}, {'title': '5. Related Work', 'heading_level': None, 'page_id': 11, 'polygon': [[54.8349609375, 371.25], [139.25390625, 371.25], [139.25390625, 383.9450988769531], [54.8349609375, 383.9450988769531]]}, {'title': '6. Conclusion and Discussion', 'heading_level': None, 'page_id': 12, 'polygon': [[54.648193359375, 265.2890625], [203.5888671875, 265.2890625], [203.5888671875, 277.39202880859375], [54.648193359375, 277.39202880859375]]}, {'title': 'References', 'heading_level': None, 'page_id': 13, 'polygon': [[54.76025390625, 67.798828125], [110.48174285888672, 67.798828125], [110.48174285888672, 79.7540283203125], [54.76025390625, 79.7540283203125]]}, {'title': 'Appendix', 'heading_level': None, 'page_id': 19, 'polygon': [[53.86376953125, 67.04736328125], [105.26927947998047, 67.04736328125], [105.26927947998047, 79.7540283203125], [53.86376953125, 79.7540283203125]]}, {'title': 'Appendix Contents', 'heading_level': None, 'page_id': 19, 'polygon': [[54.01318359375, 88.171875], [156.287109375, 88.171875], [156.287109375, 101.12005615234375], [54.01318359375, 101.12005615234375]]}, {'title': 'A. Reinforcement Learning with Verifiable Rewards.', 'heading_level': None, 'page_id': 20, 'polygon': [[54.38671875, 67.798828125], [323.18865966796875, 67.798828125], [323.18865966796875, 79.7540283203125], [54.38671875, 79.7540283203125]]}, {'title': 'B. Implementation Details', 'heading_level': None, 'page_id': 20, 'polygon': [[54.498779296875, 291.08587646484375], [190.2041015625, 291.08587646484375], [190.2041015625, 303.04107666015625], [54.498779296875, 303.04107666015625]]}, {'title': 'C. More Results', 'heading_level': None, 'page_id': 21, 'polygon': [[54.087890625, 318.462890625], [138.65625, 318.462890625], [138.65625, 331.29107666015625], [54.087890625, 331.29107666015625]]}, {'title': 'C.1. Out-of-Distribution Performance Breakdown', 'heading_level': None, 'page_id': 21, 'polygon': [[54.087890625, 338.958984375], [287.3565368652344, 338.958984375], [287.3565368652344, 350.42510986328125], [54.087890625, 350.42510986328125]]}, {'title': 'C.2. In-Distribution Results', 'heading_level': None, 'page_id': 21, 'polygon': [[54.199951171875, 414.5625], [184.974609375, 414.5625], [184.974609375, 426.1640625], [54.199951171875, 426.1640625]]}, {'title': 'C.3. Interplay Between Propose and Solve Roles', 'heading_level': None, 'page_id': 21, 'polygon': [[54.31201171875, 522.84375], [277.3125, 522.84375], [277.3125, 534.0861206054688], [54.31201171875, 534.0861206054688]]}, {'title': 'Task: Propose Abduction Task', 'heading_level': None, 'page_id': 26, 'polygon': [[67.423095703125, 71.78521728515625], [211.271484375, 71.78521728515625], [211.271484375, 82.53948974609375], [67.423095703125, 82.53948974609375]]}, {'title': 'Model Input: (k random selected example programs as few-shot input)', 'heading_level': None, 'page_id': 26, 'polygon': [[66.9375, 93.5478515625], [376.822265625, 93.5478515625], [376.822265625, 104.5537109375], [66.9375, 104.5537109375]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 26, 'polygon': [[68.244873046875, 117.0791015625], [151.0576171875, 117.0791015625], [151.0576171875, 131.1024169921875], [68.244873046875, 131.1024169921875]]}, {'title': 'Task: Propose Induction Task', 'heading_level': None, 'page_id': 27, 'polygon': [[68.00311279296875, 117.45489501953125], [207.5361328125, 117.45489501953125], [207.5361328125, 128.19818115234375], [68.00311279296875, 128.19818115234375]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 27, 'polygon': [[67.833984375, 274.27545166015625], [137.20059204101562, 274.27545166015625], [137.20059204101562, 285.01873779296875], [67.833984375, 285.01873779296875]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 28, 'polygon': [[66.11572265625, 319.4631042480469], [136.40078735351562, 319.4631042480469], [136.40078735351562, 330.282958984375], [66.11572265625, 330.282958984375]]}, {'title': 'Task: Solve Deduction Task (Example 1)', 'heading_level': None, 'page_id': 29, 'polygon': [[67.31103515625, 88.1961669921875], [255.498046875, 88.1961669921875], [255.498046875, 98.988525390625], [67.31103515625, 98.988525390625]]}, {'title': 'C.4. Complexity and Diversity Metrics of AZR Proposed Tasks', 'heading_level': None, 'page_id': 31, 'polygon': [[54.685546875, 314.595703125], [347.8359375, 314.595703125], [347.8359375, 326.7811279296875], [54.685546875, 326.7811279296875]]}, {'title': 'C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.', 'heading_level': None, 'page_id': 31, 'polygon': [[54.685546875, 461.35546875], [386.68359375, 461.35546875], [386.68359375, 473.68011474609375], [54.685546875, 473.68011474609375]]}, {'title': 'Task: Solve Deduction Task (Example 2)', 'heading_level': None, 'page_id': 32, 'polygon': [[66.9375, 101.36376953125], [254.00390625, 101.36376953125], [254.00390625, 112.1390380859375], [66.9375, 112.1390380859375]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 32, 'polygon': [[67.81330108642578, 280.2999267578125], [136.86106872558594, 280.2999267578125], [136.86106872558594, 291.0751647949219], [67.81330108642578, 291.0751647949219]]}, {'title': 'Task: Solve Deduction Task (Llama 8B)', 'heading_level': None, 'page_id': 33, 'polygon': [[66.72824096679688, 77.409423828125], [251.912109375, 77.409423828125], [251.912109375, 88.25054931640625], [66.72824096679688, 88.25054931640625]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 33, 'polygon': [[67.08599853515625, 304.85662841796875], [136.5559844970703, 304.85662841796875], [136.5559844970703, 315.69775390625], [67.08599853515625, 315.69775390625]]}, {'title': 'Task: Manual Constructed Sudoku Abduction Task', 'heading_level': None, 'page_id': 44, 'polygon': [[65.99082946777344, 70.43548583984375], [306.5485534667969, 70.43548583984375], [306.5485534667969, 81.30426025390625], [65.99082946777344, 81.30426025390625]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 45, 'polygon': [[65.14453125, 71.15625], [136.564453125, 71.15625], [136.564453125, 83.55621337890625], [65.14453125, 83.55621337890625]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 47, 'polygon': [[64.77099609375, 71.349609375], [137.23681640625, 71.349609375], [137.23681640625, 83.586181640625], [64.77099609375, 83.586181640625]]}, {'title': 'D. Alternative Approaches Considered', 'heading_level': None, 'page_id': 48, 'polygon': [[54.2373046875, 67.482421875], [252.9580078125, 67.482421875], [252.9580078125, 79.7540283203125], [54.2373046875, 79.7540283203125]]}, {'title': 'D.1. Error Deduction Task', 'heading_level': None, 'page_id': 48, 'polygon': [[54.685546875, 132.64453125], [180.0439453125, 132.64453125], [180.0439453125, 144.7940673828125], [54.685546875, 144.7940673828125]]}, {'title': 'D.2. Composite Functions as Curriculum Learning', 'heading_level': None, 'page_id': 48, 'polygon': [[54.61083984375, 229.904296875], [291.955078125, 229.904296875], [291.955078125, 242.078125], [54.61083984375, 242.078125]]}, {'title': 'D.3. Toying with the Initial p(z)', 'heading_level': None, 'page_id': 48, 'polygon': [[54.46142578125, 519.36328125], [203.203125, 519.36328125], [203.203125, 532.0762634277344], [54.46142578125, 532.0762634277344]]}, {'title': 'D.4. Extra Rewards', 'heading_level': None, 'page_id': 48, 'polygon': [[54.76025390625, 649.6875], [147.69580078125, 649.6875], [147.69580078125, 661.8531036376953], [54.76025390625, 661.8531036376953]]}, {'title': 'D.5. Environment Transition', 'heading_level': None, 'page_id': 49, 'polygon': [[54.61083984375, 421.3180236816406], [189.45828247070312, 421.3180236816406], [189.45828247070312, 432.2271423339844], [54.61083984375, 432.2271423339844]]}], 'page_stats': [{'page_id': 0, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 147), ('Line', 39), ('Text', 4), ('PageHeader', 2), ('Picture', 1), ('SectionHeader', 1), ('Figure', 1), ('Caption', 1), ('Footnote', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 1, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 172), ('Line', 43), ('Text', 5), ('Caption', 2), ('Figure', 1), ('SectionHeader', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 2, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 329), ('Line', 73), ('ListItem', 6), ('Text', 4), ('SectionHeader', 3), ('TextInlineMath', 3), ('Equation', 2), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 3, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 504), ('Line', 119), ('TextInlineMath', 4), ('Reference', 3), ('Text', 2), ('SectionHeader', 2), ('PageHeader', 1), ('Figure', 1), ('Caption', 1), ('Equation', 1), ('PageFooter', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 4, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 330), ('Line', 74), ('Text', 5), ('Equation', 3), ('Reference', 3), ('TextInlineMath', 2), ('PageHeader', 1), ('Figure', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 5, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 1085), ('Line', 145), ('ListItem', 9), ('Text', 5), ('Reference', 4), ('SectionHeader', 3), ('TextInlineMath', 3), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 6, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 720), ('Line', 111), ('TableCell', 76), ('ListItem', 3), ('Reference', 3), ('SectionHeader', 2), ('Text', 2), ('PageHeader', 1), ('Table', 1), ('TextInlineMath', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 7, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 497), ('Line', 78), ('Text', 6), ('TextInlineMath', 4), ('SectionHeader', 4), ('Reference', 3), ('Equation', 2), ('PageHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 8, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 532), ('TableCell', 262), ('Line', 88), ('Text', 6), ('Caption', 1), ('Table', 1), ('SectionHeader', 1), ('PageFooter', 1), ('TableGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 9, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 387), ('Line', 98), ('Text', 8), ('Caption', 1), ('Figure', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 10, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 227), ('Line', 59), ('Text', 9), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 11, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 263), ('Line', 52), ('TableCell', 49), ('Text', 7), ('Table', 2), ('SectionHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 12, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 230), ('Line', 52), ('Text', 8), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 13, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 154), ('Line', 52), ('ListItem', 13), ('Reference', 13), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 14, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 187), ('Line', 49), ('Reference', 17), ('ListItem', 15), ('Text', 3), ('ListGroup', 2), ('PageHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 15, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 169), ('Line', 49), ('ListItem', 19), ('Reference', 19), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 16, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 182), ('Line', 51), ('ListItem', 17), ('Reference', 17), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 17, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 168), ('Line', 50), ('ListItem', 17), ('Reference', 17), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 18, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 135), ('Line', 40), ('ListItem', 11), ('Reference', 11), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 19, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 88), ('TableCell', 40), ('Line', 18), ('SectionHeader', 2), ('PageHeader', 1), ('TableOfContents', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 20, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 317), ('Line', 64), ('TableCell', 43), ('Text', 8), ('Reference', 3), ('SectionHeader', 2), ('Equation', 2), ('PageHeader', 1), ('Table', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 21, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 263), ('TableCell', 64), ('Line', 48), ('Reference', 6), ('Text', 5), ('SectionHeader', 4), ('Table', 3), ('PageFooter', 2), ('Caption', 1), ('Code', 1), ('TableGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 22, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 316), ('Line', 45), ('Code', 4), ('Text', 4), ('Reference', 3), ('PageHeader', 1), ('Figure', 1), ('Caption', 1), ('PageFooter', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 23, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 155), ('Line', 45), ('Figure', 2), ('Caption', 2), ('FigureGroup', 2), ('PageHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 24, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 210), ('Line', 47), ('Figure', 2), ('Reference', 2), ('PageHeader', 1), ('Caption', 1), ('Text', 1), ('PageFooter', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 25, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 183), ('Line', 34), ('PageHeader', 1), ('Code', 1), ('Text', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 26, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 312), ('Line', 58), ('SectionHeader', 3), ('Text', 2), ('PageHeader', 1), ('Code', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 27, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 406), ('Line', 49), ('Text', 11), ('SectionHeader', 2), ('PageHeader', 1), ('Code', 1), ('TextInlineMath', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 28, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 205), ('Line', 60), ('Text', 5), ('PageHeader', 1), ('Code', 1), ('SectionHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 29, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 526), ('Line', 60), ('Text', 2), ('PageHeader', 1), ('SectionHeader', 1), ('Code', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 30, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 462), ('Line', 68), ('Text', 3), ('PageHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 31, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 279), ('TableCell', 100), ('Line', 45), ('Text', 4), ('Reference', 3), ('TextInlineMath', 2), ('SectionHeader', 2), ('Caption', 1), ('Table', 1), ('PageFooter', 1), ('TableGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 32, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 269), ('Line', 48), ('Text', 10), ('SectionHeader', 2), ('Code', 2), ('PageHeader', 1), ('ListItem', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 33, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 218), ('Line', 60), ('Text', 9), ('SectionHeader', 2), ('Reference', 2), ('PageHeader', 1), ('Code', 1), ('Figure', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 34, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 373), ('Line', 94), ('Figure', 2), ('PageHeader', 1), ('Caption', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 35, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 325), ('Line', 94), ('Figure', 2), ('PageHeader', 1), ('Caption', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 36, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 313), ('Line', 88), ('Figure', 2), ('PageHeader', 1), ('Caption', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 37, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 409), ('Line', 109), ('Caption', 2), ('Text', 2), ('Reference', 2), ('PageHeader', 1), ('Figure', 1), ('PageFooter', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 38, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 47), ('Line', 16), ('Text', 3), ('PageHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 39, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 190), ('Line', 77), ('Text', 3), ('PageHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 40, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 194), ('Line', 79), ('PageHeader', 1), ('Text', 1), ('Caption', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 41, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 156), ('Line', 57), ('PageHeader', 1), ('Code', 1), ('Caption', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 42, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 235), ('Line', 99), ('Code', 2), ('PageHeader', 1), ('Caption', 1), ('Figure', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 43, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 115), ('Line', 47), ('PageHeader', 1), ('Code', 1), ('Figure', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 44, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 345), ('Line', 76), ('Text', 22), ('PageHeader', 1), ('SectionHeader', 1), ('Code', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 45, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 109), ('Line', 47), ('Text', 17), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 46, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 473), ('Line', 82), ('Text', 19), ('PageHeader', 1), ('Code', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 47, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 125), ('Line', 48), ('Text', 26), ('TextInlineMath', 2), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 48, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 253), ('Line', 51), ('SectionHeader', 5), ('Text', 5), ('Reference', 5), ('TextInlineMath', 3), ('PageHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 49, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 254), ('Line', 60), ('Text', 7), ('Equation', 4), ('TextInlineMath', 2), ('Reference', 2), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}], 'debug_data_path': 'debug_data/2505.03335v2'}",
          "parent": null,
          "line_number": 1
        }
      ],
      "equations": [
        "markdown='![](_page_0_Picture_0.jpeg)\\n\\n# **Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Andrew Zhao** <sup>1</sup> **, Yiran Wu**<sup>3</sup> **, Yang Yue** <sup>1</sup> **, Tong Wu**<sup>2</sup> **, Quentin Xu**<sup>1</sup> **, Yang Yue** <sup>1</sup> **, Matthieu Lin**<sup>1</sup> **, Shenzhi Wang** <sup>1</sup> **, Qingyun Wu**<sup>3</sup> **, Zilong Zheng** <sup>2</sup>*,* **and Gao Huang** <sup>1</sup>*,*\\n\\n1 Tsinghua University 2 Beijing Institute for General Artificial Intelligence 3 Pennsylvania State University\\n\\nzqc21@mails.tsinghua.edu.cn, yiran.wu@psu.edu, zlzheng@bigai.ai, gaohuang@tsinghua.edu.cn\\n\\nReinforcement learning with verifiable rewards (RLVR) has shown promise in enhancing the reasoning capabilities of large language models by learning directly from outcome-based rewards. Recent RLVR works that operate under the *zero setting* avoid supervision in labeling the reasoning process, but still depend on manually curated collections of questions and answers for training. The scarcity of highquality, human-produced examples raises concerns about the long-term scalability of relying on human supervision, a challenge already evident in the domain of language model pretraining. Furthermore, in a hypothetical future where AI surpasses human intelligence, tasks provided by humans may offer limited learning potential for a superintelligent system. To address these concerns, we propose a new RLVR paradigm called *Absolute Zero*, in which a single model learns to propose tasks that maximize its own learning progress and improves reasoning by solving them, without relying on any external data. Under this paradigm, we introduce the Absolute Zero Reasoner (AZR), a system that self-evolves its training curriculum and reasoning ability by using a code executor to both validate proposed code reasoning tasks and verify answers, serving as an unified source of verifiable reward to guide open-ended yet grounded learning. Despite being trained entirely *without external data*, AZR achieves overall SOTA performance on coding and mathematical reasoning tasks, *outperforming existing zero-setting models* that rely on tens of thousands of *in-domain human-curated examples*. Furthermore, we demonstrate that AZR can be effectively applied across different model scales and is compatible with various model classes.\\n\\n![](_page_0_Figure_7.jpeg)\\n\\n*Figure 1.* **Absolute Zero Reasoner (AZR) achieves state-of-the-art performance with ZERO DATA**. Without relying on any gold labels or human-defined queries, Absolute Zero Reasoner trained using our proposed self-play approach demonstrates impressive general reasoning capabilities improvements in both math and coding, despite operating entirely out-of-distribution. Remarkably, AZR surpasses models trained on tens of thousands of expert-labeled in-domain examples in the combined average score across both domains.\\n\\n*Corresponding author(s)*\\n\\n**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n\\n![](_page_1_Figure_1.jpeg)\\n\\nLess Human Supervision\\n\\n<span id=\"page-1-0\"></span>*Figure 2.* **Absolute Zero Paradigm. Supervised learning** relies on human-curated reasoning traces for behavior cloning. **Reinforcement learning from verified rewards**, enables agents to self-learn reasoning, but still depends on expert-defined learning distribution and a respective set of curated QA pairs, demanding domain expertise and manual effort. In contrast, we introduce a new paradigm, **Absolute Zero**, for training reasoning models without any human-curated data. We envision that the agent should autonomously propose tasks optimized for learnability and learn how to solve them using an unified model. The agent learns by interacting with an environment that provides verifiable feedback, enabling reliable and continuous self-improvement entirely without human intervention.\\n\\n# **1. Introduction**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**1. Introduction**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nLarge language models (LLMs) have recently achieved remarkable improvements in reasoning capabilities by employing Reinforcement Learning with Verifiable Rewards (RLVR) [\\\\(Lambert et al.,](#page-15-0) [2024\\\\)](#page-15-0). Unlike methods that explicitly imitate intermediate reasoning steps, RLVR uses only outcome-based feedback, enabling large-scale reinforcement learning over vast task datasets [\\\\(DeepSeek-AI et al.,](#page-13-0) [2025;](#page-13-0) [Team et al.,](#page-16-0) [2025;](#page-16-0) [Jaech et al.,](#page-14-0) [2024;](#page-14-0) [OpenAI,](#page-15-1) [2025b;](#page-15-1)[a\\\\)](#page-15-2). A particularly compelling variant is the *\"zero\"* RLVR paradigm [\\\\(DeepSeek-AI](#page-13-0) [et al.,](#page-13-0) [2025\\\\)](#page-13-0), which forgoes any cold-start distillation data, using neither human-generated nor AI-generated reasoning traces, and applies RLVR directly on the base model with task rewards. However, these methods still depend heavily on expertly curated distributions of reasoning question\u2013answer pairs, which raises serious concerns about their long-term scalability [\\\\(Villalobos et al.,](#page-16-1) [2024\\\\)](#page-16-1). As reasoning models continue to advance, the effort required to construct large-scale, high-quality datasets may soon become unsustainable [\\\\(Yue](#page-17-0) [et al.,](#page-17-0) [2025\\\\)](#page-17-0). A similar scalability bottleneck has already been identified in the domain of LLM pretraining [\\\\(Sutskever et al.,](#page-16-2) [2024\\\\)](#page-16-2). Furthermore, as AI systems continue to evolve and potentially exceed human intellect, an exclusive dependence on human-designed tasks risks imposing constraints on their capacity for autonomous learning and growth [\\\\(Hughes et al.,](#page-14-1) [2024\\\\)](#page-14-1). This underscores the need for a new paradigm that begins to explore possibilities beyond the constraints of human-designed tasks and prepares for a future in which AI systems may surpass human intelligence.\\n\\nTo this end, we propose *\"Absolute Zero\"*, a new paradigm for reasoning models in which the model simultaneously learns to define tasks that maximize learnability and to solve them effectively, enabling self-evolution through self-play without relying on external data. In contrast to prior self-play methods that are limited to narrow domains, fixed functionalities, or learned reward models that are prone to hacking [\\\\(Silver et al.,](#page-16-3) [2017;](#page-16-3) [Chen et al.,](#page-13-1) [2025;](#page-13-1) [2024\\\\)](#page-13-2), the *Absolute Zero* paradigm is designed to operate in open-ended settings while remaining grounded in a real environment. It relies on feedback from the environment as a verifiable source of reward, mirroring how humans learn and reason through interaction with the world, and helps prevent issues such as hacking with neural reward models [\\\\(Hughes](#page-14-1) [et al.,](#page-14-1) [2024\\\\)](#page-14-1). Similar to AlphaZero [\\\\(Silver et al.,](#page-16-3) [2017\\\\)](#page-16-3), which improves through self-play, our proposed paradigm requires no human supervision and learns entirely through self-interaction. We believe the Absolute Zero paradigm represents a promising step toward enabling large language models to autonomously achieve superhuman reasoning capabilities.\\n\\nBuilding on this new reasoning paradigm, we introduce the *Absolute Zero Reasoner (AZR)*, which proposes and solves coding tasks. We cast code executor as an open-ended yet grounded environment, sufficient to both validate task integrity and also provide verifiable feedback for stable training. We let AZR construct three types of coding tasks: infer and reason about one particular element in a program, input, output triplet, which corresponds to three complementary modes of reasoning: induction, abduction, and deduction. We train the entire system end-to-end with a newly proposed reinforcement learning advantage estimator tailored to the multitask nature of the proposed approach.\\n\\nDespite being trained entirely without any in-distribution data, AZR demonstrates remarkable capabilities across diverse reasoning tasks in math and coding. In mathematics, AZR achieves competitive performance compared to zero reasoner models explicitly fine-tuned with domain-specific supervision. In coding tasks, AZR establishes a new state-of-the-art performance, surpassing models specifically trained with code datasets using RLVR. Furthermore, AZR outperforms all previous models by an average of 1.8 absolute points compared to models trained in the \"zero\" setting using in-domain data. These surprising results highlight that general reasoning skills can emerge without human-curated domain targeted data, positioning Absolute Zero as an promising research direction and AZR as a first pivotal milestone. Besides the remarkable results AZR achieved with zero human data for reasoning, we also make very interesting findings summarized below:\\n\\n- **Code priors amplify reasoning.** The base Qwen-Coder-7b model started with math performance 3.6 points lower than Qwen-7b. But after AZR training for both models, the coder variant surpassed the base by 0.7 points, suggesting that strong coding capabilities may potentially amplify overall reasoning improvements after AZR training.\\n- **Cross domain transfer is more pronounced for AZR.** After RLVR, expert code models raise math accuracy by only 0.65 points on average, whereas AZR-Base-7B and AZR-Coder-7B trained on self-proposed code reasoning tasks improve math average by 10.9 and 15.2, respectively, demonstrating much stronger generalized reasoning capability gains.\\n- **Bigger bases yield bigger gains.** Performance improvements scale with model size: the 3B, 7B, and 14B coder models gain +5.7, +10.2, and +13.2 points respectively, suggesting continued scaling is advantageous for AZR.\\n- **Comments as intermediate plans emerge naturally.** When solving code induction tasks, AZR often interleaves step-by-step plans as comments and code (Appendix [C.3\\\\)](#page-24-0), resembling the ReAct prompting framework [\\\\(Yao et al.,](#page-17-1) [2023\\\\)](#page-17-1). Similar behavior has been observed in much larger formal-math models such as DeepSeek Prover v2 (671B) [\\\\(Ren et al.,](#page-15-3) [2025\\\\)](#page-15-3). We therefore believe that allowing the model to use intermediate scratch-pads when generating long-form answers may be beneficial in other domains as well.\\n- **Cognitive Behaviors and Token length depends on reasoning mode.** Distinct cognitive behaviors\u2014such as step-by-step reasoning, enumeration, and trial-and-error all emerged through AZR training, but different behaviors are particularly evident across different types of tasks. Furthermore token counts grow over AZR training, but the magnitude of increase also differs by task types: abduction grows the most because the model performs trial-and-error until output matches, whereas deduction and induction grow modestly.\\n- **Safety alarms ringing.** We observe AZR with Llama3.1-8b occasionally produces concerning chains of thought, we term the \"uh-oh moment\", example shown in Figure [32,](#page-37-0) highlighting the need for future work on safety-aware training [\\\\(Zhang et al.,](#page-18-0) [2025a\\\\)](#page-18-0).\\n\\n# **2. The Absolute Zero Paradigm**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**2. The Absolute Zero Paradigm**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n### **2.1. Preliminaries**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**2. The Absolute Zero Paradigm**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"**2.1. Preliminaries**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Supervised Fine-Tuning (SFT).** SFT requires the datasets of task-rationale-answer demonstrations <sup>D</sup> <sup>=</sup> {(*x, c<sup>\u22c6</sup> , y<sup>\u22c6</sup>* )}, where *x* is the query, *c \u22c6* is the gold chain-of-thought (CoT)) and *y \u22c6* is the gold answer, all provided by human experts or superior AI models. The model trains to imitate the reference responses to minimize the conditional negative log-likelihood [\\\\(Ouyang et al.,](#page-15-4) [2022\\\\)](#page-15-4):\\n\\n$$\\\\mathcal{L}\\\\_{\\\\text{SFT}}(\\\\theta) = - \\\\mathbb{E}\\\\_{(x, c^\\\\*, y^\\\\*) \\\\sim \\\\mathcal{D}} \\\\log \\\\pi\\\\_{\\\\theta} \\\\left( c^\\\\*, y^\\\\* \\\\mid x \\\\right). \\\\tag{1}$$\\n\\nHowever, at the frontier level, there\\'s no stronger model to distill from, and expert human labeling doesn\\'t scale well.\\n\\n**Reinforcement Learning with Verifiable Rewards (RLVR).** To move beyond the limits of pure imitation, RLVR only requires a dataset of task and answer <sup>D</sup> <sup>=</sup> {(*x, y<sup>\u22c6</sup>* )}, without labeled rationale. RLVR allows the model to generate its own CoT and calculate a verifiable reward with the golden answer *r*(*y, y<sup>\u22c6</sup>* ). However, the learning task distribution <sup>D</sup>, with its set of queries and gold answers are still labeled by human experts. The trainable policy *\u03c0<sup>\u03b8</sup>* is optimized to maximize expected reward:\\n\\n$$J\\\\_{\\\\text{RLVR}}(\\\\theta) = \\\\mathbb{E}\\\\_{(x,y^\\\\*) \\\\sim \\\\mathcal{D}, y \\\\sim \\\\pi\\\\_{\\\\theta}(\\\\cdot | x)} \\\\left[ r(y, y^\\\\*) \\\\right]. \\\\tag{2}$$\\n\\nIn summary, both SFT and RLVR still rely on human-curated datasets of either queries, demonstrations, or verifiers, which ultimately limit scalability. The Absolute Zero paradigm removes this dependency by allowing the model to generate, solve, and learn from its own interactions with the environment entirely through self-play.\\n\\n### **2.2. Absolute Zero**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**2. The Absolute Zero Paradigm**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"**2.2. Absolute Zero**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe propose the Absolute Zero paradigm, where during training, the model simultaneously proposes tasks, solves them, and learns from both stages. No external data is required and the model learns entirely through self-play and experience, aided by some environment. We illustrate this paradigm in Figure [2,](#page-1-0) which contrasts Absolute Zero with supervised learning and RLVR, highlighting how our approach eliminates the need for any human-curated data by enabling self-improving task proposal and solution through self-play.\\n\\nTo make the Absolute Zero setting concrete, we now define how one model can act both as the proposer and solver role. To aid understanding, we include an illustration in Figure [3.](#page-3-0) Let *\u03c0<sup>\u03b8</sup>* be our parameterized language model, it is used to play two roles, proposer *\u03c0* propose *\u03b8* and solver *\u03c0* solve *<sup>\u03b8</sup>* during training.\\n\\nThe proposer first samples a proposed task conditioned on variable *<sup>z</sup>*: *<sup>\u03c4</sup>* <sup>\u223c</sup> *\u03c0* propose *\u03b8* (\u00b7|*z*), which will then be validated and used to construct a valid reasoning task together with the environment *e*: (*x, y<sup>\u22c6</sup>* ) \u223c *<sup>f</sup>e*(\u00b7|*<sup>\u03c4</sup>* ), where *<sup>x</sup>* is the task query and *<sup>y</sup> \u22c6* is the gold label. Then the solver produces an answer *<sup>y</sup>* <sup>\u223c</sup> *<sup>\u03c0</sup>* solve *\u03b8* (\u00b7 | *<sup>x</sup>*). Each proposed task *\u03c4* is scored by a *learnability reward r* propose *<sup>e</sup>* (*\u03c4, \u03c0\u03b8*), which captures the expected improvement in *\u03c0<sup>\u03b8</sup>* after training on the task query *x*. Moreover, the same policy also receives a *solution reward r* solve *<sup>e</sup>* (*y, y<sup>\u22c6</sup>* ) for its answer to the task query *x*, with the environment again serv-\\n\\n![](_page_3_Figure_2.jpeg)\\n\\n<span id=\"page-3-2\"></span><span id=\"page-3-0\"></span>*Figure 3.* **The Absolute Zero Loop.** The Absolute Zero loop begins with the agent *\u03c0* proposing task *\u03c4* , which is transformed by *f* with the environment *e* into a validated problem (*x, y<sup>\u22c6</sup>* ), and also emits a reward *r* propose for learnability. Then, a standard RL step follows: the agent solves *x* by producing *y*, receiving reward *r* solve from *e* by matching with *y \u22c6* . *\u03c0* propose and *\u03c0* solve are jointly trained and this process can be repeated indefinitely.\\n\\ning as the verifier. A nonnegative coefficient *\u03bb* balances the trade-off between exploring new, learnable tasks and improving the model\\'s reasoning and problem-solving abilities. We formally define the absolute zero setting\\'s objective as follows:\\n\\n$$\\\\mathcal{J}(\\\\theta) := \\\\max\\\\_{\\\\theta} \\\\ \\\\mathbb{E}\\\\_{z \\\\sim p(z)} \\\\Bigg[ \\\\ \\\\mathbb{E}\\\\_{(x,y^\\\\*) \\\\sim f\\\\_+( \\\\cdot | \\\\tau), \\\\tau \\\\sim \\\\pi^{\\\\text{group}}\\\\_0( \\\\cdot | z) } \\\\bigg[ r^{\\\\text{propose}}\\\\_c(\\\\tau, \\\\pi\\\\_\\\\theta) + \\\\lambda \\\\, \\\\mathbb{E}\\\\_{y \\\\sim \\\\pi^{\\\\text{stop}}\\\\_0( \\\\cdot | z) } \\\\big[ r^{\\\\text{stop}}\\\\_c(y,y^\\\\*) \\\\big] \\\\bigg] \\\\Bigg]. \\\\tag{3}$$\\n\\nNotice that we shift the burden of scaling data away from human experts and onto the proposer policy *\u03c0* propose *\u03b8* and the environment *e*. These two roles are both responsible for defining/evolving the learning task distribution, validating proposed tasks, and providing grounded feedback that supports stable and self-sustainable training. When proposing, *z* acts as a conditional variable that seeds generation of tasks. Practically, *z* can be instantiated by sampling a small subset of past (task, answer) pairs from a continually updated task memory, yet there is no specific implementation tied to the paradigm. To guide the proposing process, we use a learnability reward *r* propose(*\u03c4, \u03c0\u03b8*), which measures how much the model is expected to improve by solving a proposed task *<sup>\u03c4</sup>* . Moreover, the solver reward *r* solve(*y, y*<sup>\u2217</sup> ) evaluates the correctness of the model\\'s output. Together, these two signals guide the model to propose tasks that are both challenging and learnable, while also enhancing its reasoning abilities, ultimately enabling continuous improvement through self-play.\\n\\n# **3. Absolute Zero Reasoner**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nIn this section, we present *Absolute Zero Reasoner* (AZR) as the first attempt to embrace the Absolute Zero Paradigm. In AZR, an unified LLM serves as both a proposer and a solver: it generates tasks to evolve its learning curriculum and attempts to solve them to improve its reasoning capabilities. The model is trained jointly with both roles, learning to create tasks that push the boundary of reasoning capacity while enhancing its ability to solve them effectively (Section [3.1\\\\)](#page-3-1). Within this self-play training paradigm, the model learns from three distinct type of coding tasks, which corresponding to three fundamental modes of reasoning: abduction, deduction and induction (Section [3.2\\\\)](#page-5-0). Using coding tasks is motivated by the Turing-completeness of programming languages [\\\\(Stuart,](#page-16-4) [2015\\\\)](#page-16-4) and empirical evidence that code-based training improves reasoning [\\\\(Aryabumi et al.,](#page-13-3) [2024\\\\)](#page-13-3). We adopt code as an open-ended, expressive, and verifiable medium for enabling reliable task construction and verification (Section [3.3\\\\)](#page-5-1). Finally, the model is updated using a newly proposed advantage estimator designed for multitask learning (Section [3.3.5\\\\)](#page-7-0). We outline the overall algorithm in Algorithm [1](#page-6-0) and highlight an illustration of our Absolute Zero Reasoner approach in Figure [4.](#page-4-0) To expedite future exploration in this area, we also present several attempts that did not yield fruitful results but still warrant discussion in Appendix [D.](#page-48-0)\\n\\n### <span id=\"page-3-1\"></span>**3.1. Two Roles in One: Proposer and Solver**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-3-1\\\\\"></span>**3.1. Two Roles in One: Proposer and Solver**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nLarge language models are naturally suited for implementing AZR in a multitask learning context [\\\\(Radford et al.,](#page-15-5) [2019\\\\)](#page-15-5), as both the formulation of reasoning tasks and their solutions occur within a unified language space. To this end, we propose rewarding a single model for both generating high learning potential tasks and solving them effectively, as specified by the Absolute Zero objective in Equation [\\\\(3\\\\)](#page-3-2). At each iteration of the online rollout, AZR proposes new reasoning tasks by conditioning on the task type (as defined in Section [3.2\\\\)](#page-5-0) and *K* past self-generated examples. The model is explicitly prompted to generate tasks that differ from these examples, promoting diversity and broader coverage of the task space. These task proposals are filtered and transformed into valid reasoning tasks that can be verified using the environment, outlined later in Section [3.3.](#page-5-1) AZR then attempts to solve these newly proposed tasks, receiving grounded feedback for its model responses. Both task proposal and problem solving are trained using reinforcement learning. We now outline the rewards used for each role.\\n\\n**Reward Design.** Prior work has shown that setting appropriate task difficulty is critical for promoting effective learning in reasoning systems [\\\\(Zeng et al.,](#page-18-1) [2025b\\\\)](#page-18-1). Motivated by this, we design a reward function for the proposer that encourages generation of tasks\\n\\n![](_page_4_Figure_1.jpeg)\\n\\n<span id=\"page-4-0\"></span>*Figure 4.* **Absolute Zero Reasoner Training Overview.** At every iteration, Absolute Zero Reasoner first **PROPOSES** a batch of tasks, conditioned on past self-generated triplets stored in a buffer and a particular task type: abduction, deduction, or induction (Section [3.2\\\\)](#page-5-0). From these generated tasks, Python is used to filter and construct valid code-based reasoning questions. A learnability reward *r*propose is also calculated for each proposed task as defined in Equation [\\\\(4\\\\)](#page-4-1). The Absolute Zero Reasoner then **SOLVES** the batch of reasoning questions. Python is used again to verify the generated responses and compute the accuracy reward *r*solve as described in Equation [\\\\(5\\\\)](#page-4-2). Finally, the Absolute Zero Reasoner is jointly updated using both *r*propose and *r*solve across all three task types, using TRR++ (Section [3.3.5\\\\)](#page-7-0).\\n\\nwith meaningful learning potential\u2014neither too easy nor unsolvable for the current solver. Concretely, we use the same language model in its solver role to estimate the *learnability* of a proposed task, a similar type of reward used in unsupervised environment design literature [\\\\(Sukhbaatar et al.,](#page-16-5) [2018\\\\)](#page-16-5). We perform *n* Monte Carlo rollouts of the solver and compute the average success rate: *r*\u00afsolve = 1 *n* P*<sup>N</sup> <sup>i</sup>*=1 *r* (*i*) solve. The proposer\\'s reward is then defined as:\\n\\n$$r\\\\_{\\\\text{propose}} = \\\\begin{cases} 0, & \\\\text{if } \\\\bar{r}\\\\_{\\\\text{solve}} = 0 \\\\text{ or } \\\\bar{r}\\\\_{\\\\text{solve}} = 1\\\\\\\\ 1 - \\\\bar{r}\\\\_{\\\\text{solve}}, & \\\\text{otherwise,} \\\\end{cases}$$\\n(4)\\n\\nThe intuition is that if a task is either trivial to solve (*r*\u00afsolve = 1) or unsolvable (*r*\u00afsolve = 0), the task provides little to no learning signal for the proposer. In contrast, tasks of moderate difficulty, where the solver occasionally succeeds are rewarded the most, as they offer the richest feedback and greatest potential for learning.\\n\\nFor the solver, we assign a simple binary reward based on the correctness of its final output,\\n\\n<span id=\"page-4-2\"></span><span id=\"page-4-1\"></span>\\n$$r\\\\_{\\\\text{solve}} = \\\\mathbb{I}\\\\_{(y=y^\\\\*)},\\\\tag{5}$$\\n\\nwhere *y \u22c6* is the ground-truth answer, and equality is evaluated based on value equality in Python.\\n\\nWith the primary rewards for the proposing and solving roles defined, we adopt the following composite reward structure, which integrates *r*propose and *r*solve with a format-aware penalty inspired by [DeepSeek-AI et al.](#page-13-0) [\\\\(2025\\\\)](#page-13-0):\\n\\n$$R(y\\\\_{\\\\pi}) = \\\\begin{cases} r\\\\_{\\\\text{node}} & \\\\text{if the response is passable, role} \\\\in \\\\{ \\\\text{propose, solve} \\\\} \\\\\\\\ -0.5 & \\\\text{if the response is wrong but well-formation.} \\\\\\\\ -1 & \\\\text{if the answer has formatting errors.} \\\\end{cases}$$\\n (6)\\n\\nwhere *y<sup>\u03c0</sup>* is the response of the language model. The main format that the proposing and solving tasks need to follow is the DeepSeek R1 <think> and <answer> format, as shown in Figure [33.](#page-38-0) Moreover, for the proposer, the reward criterion for format goes beyond simply following the XML structure. As detailed in Section [3.3.3,](#page-6-1) only responses that produce valid triplets and pass the filtering stage are considered to be correctly formatted.\\n\\n#### <span id=\"page-5-0\"></span>**3.2. Learning Different Modes of Reasoning: Deduction, Induction, and Abduction Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-3-1\\\\\"></span>**3.1. Two Roles in One: Proposer and Solver**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"<span id=\\\\\"page-5-0\\\\\"></span>**3.2. Learning Different Modes of Reasoning: Deduction, Induction, and Abduction Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nAZR uses code executor as both a flexible interface and a verifiable environment. This setup enables automatic construction, execution, and validation of code reasoning tasks [\\\\(Stuart,](#page-16-4) [2015;](#page-16-4) [Aryabumi et al.,](#page-13-3) [2024\\\\)](#page-13-3). Give program space P, input space I and output space O of a coding language, we define an AZR reasoning task as a triplet (*p, i, o*), where *<sup>p</sup>* <sup>\u2208</sup> <sup>P</sup> is a program, *<sup>i</sup>* <sup>\u2208</sup> <sup>I</sup> is an input, and *<sup>o</sup>* <sup>\u2208</sup> <sup>O</sup> is the corresponding output produced by running program on input, *o* = *p*(*i*). AZR learns by reasoning about different parts of this task triplet, using three distinct core reasoning modes, each of which focuses on inferring one part of the triplet given the others: **3.2. Learning Diferent Modes of Reasoning: Deduction, Induction, and Abduction** AZR uses code executor as both a fexible interface and a verifable environment. This setup enables automatic construction, execution, and validation of reasoning tasks (Stuart, 2015; Aryabumi et al., 2024). Give program space P, input space I and output space O of a coding language, we defne an AZR reasoning task as a triplet (*p, i, o*), where *p* \u2192 P is a program, *i* \u2192 I is an input, and *o* \u2192 O is the corresponding output produced by running program on input, *o* = *p*(*i*). AZR learns by reasoning about diferent parts of this task\\n\\n- 1. **Deduction**: predicting the output *o* given a program *p* and input *i*, capturing step-by-step logical reasoning. triplet, using three distinct core reasoning modes, each of which focuses on inferring one part of the triplet given the others:\\n\\t- As a *proposer*, AZR is conditioned on the task type *<sup>\u03b1</sup>* <sup>=</sup> deduction and *<sup>K</sup>* reference examples from the deduction buffer <sup>D</sup>deduction (all task buffers are outlined in Section 3.3), and generates a pair (*p, i*). The environment *e* then executes *p*(*i*) to compute *o*, completing the triplet (*p, i, o*), which is added to the buffer if non-error output was produced. 1. **Deduction**: predicting the output *o* given a program *p* and input *i*, capturing step-by-step logical reasoning. \u2022 As a *proposer*, AZR is conditioned on [the](#page-5-1) task type *\u03b1* = deduction and *K* reference examples from the deduction bufer Ddeduction (all task bufers are outlined in Section 3.3), and generates a pair (*p, i*). The environment *e* then executes *p*(*i*) to compute *o*,\\n\\t- As a *solver*, the model receives (*p, i*) and predicts the output *o\u03c0*. The predicted output is verified using type-aware value equality in python to account for possible variations (such as set ordering or fractions). completing the triplet (*p, i, o*), which is added to the bufer if non-error output was produced. \u2022 As a *solver*, the model receives (*p, i*) and predicts the output *o\u03c0*. The predicted output is verifed using type-aware value equality\\n- 2. **Abduction**: inferring a plausible input *i* given the program *p* and an output *o*, resembling trial-and-error or online search. in python to account for possible variations (such as set ordering or fractions).\\n\\t- As a *proposer*, the policy *\u03c0* propose\\'s input and output is almost the same as the proposer for the deduction task, except that the task type *\u03b1* = abduction is changed as an input. The model generates a pair (*p, i*) conditioned on *\u03b1* and reference examples. Then we executes *p*(*i*) and get the triplet (*p, i, o*). 2. **Abduction**: inferring a plausible input *i* given the program *p* and an output *o*, resembling trial-and-error or online search. \u2022 As a *proposer*, the policy *\u03c0*propose\\'s input and output is almost the same as the proposer for the deduction task, except that the task type *\u03b1* = abduction is changed as an input. The model generates a pair (*p, i*) conditioned on *\u03b1* and reference examples. Then we\\n\\t- As a *solver*, the model receives (*p, o*) and predicts *i\u03c0*. The solution is verified by checking whether *p*(*i\u03c0*) = *o*. Since programs may not be bijective, we use *output* value equivalence rather than requiring exact input matches. executes *p*(*i*) and get the triplet (*p, i, o*). \u2022 As a *solver*, the model receives (*p, o*) and predicts *i\u03c0*. The solution is verifed by checking whether *p*(*i\u03c0*) = *o*. Since programs may not be bijective, we use *output* value equivalence rather than requiring exact input matches.\\n- 3. **Induction:** synthesizing a program *<sup>p</sup>* from a set of in-out examples {(*<sup>i</sup> n , o<sup>n</sup>* )}, requiring generalization from partial information. 3. **Induction:** synthesizing a program *p* from a set of in-out examples {(*i <sup>n</sup>, o<sup>n</sup>*)}, requiring generalization from partial information.\\n\\t- As a *proposer*, AZR samples a valid program *<sup>p</sup>* from <sup>D</sup>abduction \u222a Ddeduction, generates *<sup>N</sup>* new inputs and a message *<sup>m</sup>*, and uses the environment to compute corresponding outputs. This forms an extended task representation (*p,* {(*<sup>i</sup> n , o<sup>n</sup>* )}*, m*), which is stored in the induction buffer <sup>D</sup>induction. Since infinitely many functions can map the inputs to the outputs, making the induction task under-constrained, the message *m* helps properly condition the problem for the solver. \u2022 As a *proposer*, AZR samples a valid program *p* from Dabduction \u222aDdeduction, generates *N* new inputs and a message *m*, and uses the environment to compute corresponding outputs. This forms an extended task representation (*p,* {(*i <sup>n</sup>, o<sup>n</sup>*)}*, m*), which is stored in the induction bufer Dinduction. Since infnitely many functions can map the inputs to the outputs, making the induction task under-constrained, the message *m* helps properly condition the problem for the solver.\\n\\t- As a *solver*, the model is shown the first half of the input-output pairs and the message *m*, and must synthesize a program *p<sup>\u03c0</sup>* that correctly maps the remaining hidden inputs to their outputs. The use of held-out examples discourages overfitting through if-else logic and promotes generalized induction. \u2022 As a *solver*, the model is shown the frst half of the input-output pairs and the message *m*, and must synthesize a program *p<sup>\u03c0</sup>* that correctly maps the remaining hidden inputs to their outputs. The use of held-out examples discourages overftting through if-else logic and promotes generalized induction.\\n\\nEach reasoning task type leverages code as an expressive and verifable medium, aligning with the Absolute Zero Paradigm\\'s goals of fully selfimproving systems in open-ended domains (DeepSeek-AI et al., 2025; Lambert et al., 2024). All prompts used by three diferent task types and two types of roles within a task type are shown in Figures 34 to 39. Next, we outline exact details of our algorithm. Each reasoning task type leverages code as an expressive and verifiable medium, aligning with the Absolute Zero Paradigm\\'s goals of fully selfimproving systems in open-ended domains [\\\\(DeepSeek-AI et al.,](#page-13-0) [2025;](#page-13-0) [Lambert et al.,](#page-15-0) [2024\\\\)](#page-15-0). All prompts used by three different task types and two types of roles within a task type are shown in Figures [34](#page-39-0) to [39.](#page-43-0) Next, we outline exact details of our algorithm.\\n\\n#### <span id=\"page-5-1\"></span>**3.3. Absolute Zero Reasoner Learning Algorithm 3.3. Absolute Zero Reasoner Learning Algorithm**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-3-1\\\\\"></span>**3.1. Two Roles in One: Proposer and Solver**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"<span id=\\\\\"page-5-1\\\\\"></span>**3.3. Absolute Zero Reasoner Learning Algorithm 3.3. Absolute Zero Reasoner Learning Algorithm**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nIn this section, we will discuss details of our AZR self-play algorithm, including initialization of bufers 3.3.1, usage of thse bufers 3.3.2, construction of valid tasks 3.3.3, validating solutions 3.3.4, and fn[ally ad](#page-6-2)vantage estimator calculation 3.3.5. We outline the o[verall](#page-7-1) recipe of the self-play procedure of AZR in [Algor](#page-7-0)ithm 1. In this section, we will discuss details of our AZR self-play algorithm, including initialization of buffers [3.3.1,](#page-5-2) usage of thse buffers 3.3.2, construction of valid tasks [3.3.3,](#page-6-1) validating solutions 3.3.4, and finally advantage estimator calculation 3.3.5. We outline the overall recipe of the self-play procedure of AZR in Algorithm [1.](#page-6-0)\\n\\n#### <span id=\"page-5-2\"></span>3.3.1. BUFFER INITIALIZATION To initialize AZR self-play, we frst generate a seed set of valid triplets using 3.3.1. Buffer Initialization\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-3-1\\\\\"></span>**3.1. Two Roles in One: Proposer and Solver**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"<span id=\\\\\"page-5-2\\\\\"></span>3.3.1. BUFFER INITIALIZATION To initialize AZR self-play, we frst generate a seed set of valid triplets using 3.3.1. Buffer Initialization\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nthe base language model. Each prompt samples up to *K* triplets from the current seed bufer Dseed as references. When Dseed is empty at time 0, we fall back to the zero triplet show in Figure 5. During the seeding stage, we use the same proposer prompts detailed [in](#page-5-3) Figures 34 to 36. First, for deduction and abduction tasks, the LLM is prompted to generate To initialize AZR self-play, we first generate a seed set of valid triplets using the base language model. Each prompt samples up to *K* triplets from the current seed buffer <sup>D</sup>seed as references. When <sup>D</sup>seed is empty at time 0, we fall back to the zero triplet show in Figure 5. During the seeding stage, we use the same proposer prompts detailed in Figures [34](#page-39-0) to [36.](#page-41-0)\\n\\n(*p, i*) pairs, which are fltered, executed, and stored as valid triplets. We initialize <sup>D</sup><sup>0</sup> abduction <sup>=</sup> <sup>D</sup><sup>0</sup> deduction = Dseed, where |Dseed| = *B* \u00d7 *S*, where First, for deduction and abduction tasks, the LLM is prompted to generate (*p, i*) pairs, which are filtered, executed, and stored as valid triplets. We\\n\\n**Program Triplet Input:** \"Hello World\" <sup>1</sup> **def** f(x): <sup>2</sup> **return** x **Output:** \"Hello World\"\\n\\n<span id=\"page-5-3\"></span>Figure 5. **The Seed AZR Zero Triplet.** The above identity function triplet was the only triplet provided to AZR to initiate its self-bootstrap propose-and-solve RLVR loop. We note that the base LLM is fully capable of initiating the AZR loop without any seed program; its inclusion illustrates our approach\\'s fexibility: we can optionally initialize seed programs with existing datasets of varying complexity, and we initialized ours with the simplest program. *Figure 5.* **The Seed AZR Zero Triplet.** The above identity function triplet was the only triplet provided to AZR to initiate its self-bootstrap propose-and-solve RLVR loop. We note that the base LLM is fully capable of initiating the AZR loop without any seed program; its inclusion illustrates our approach\\'s flexibility: we can optionally initialize seed programs with existing datasets of varying complexity, and we initialized ours with the simplest program.\\n\\n*B* is the batch size, and *S* = 4 is a factor we fx in all experiments. All seed triplet\\'s program are stripped of global variables and comments (Appendix C), but subsequent iterations of adding new triplets to the bufers are un[alte](#page-48-0)red. No model updates occur during this phase. Similarly, to initialize the induction bufer, we sample programs from Dseed, generate matching input sets and messages, and collect valid examples until |D<sup>0</sup> induction| = *B* \u00d7 *S*. initialize <sup>D</sup> 0 abduction = D 0 deduction <sup>=</sup> <sup>D</sup>seed, where |Dseed<sup>|</sup> <sup>=</sup> *<sup>B</sup>* <sup>\u00d7</sup> *<sup>S</sup>*, where *<sup>B</sup>* is the batch size, and *<sup>S</sup>* = 4 is a factor we fix in all experiments. All seed triplet\\'s program are stripped of global variables and comments (Appendix D), but subsequent iterations of adding new triplets to the buffers are unaltered. No model updates occur during this phase. Similarly, to initialize the induction buffer, we sample programs from <sup>D</sup>seed, generate matching input sets and messages, and collect valid examples until |D<sup>0</sup> induction<sup>|</sup> <sup>=</sup> *<sup>B</sup>* <sup>\u00d7</sup> *<sup>S</sup>*.\\n\\n<span id=\"page-6-0\"></span>\\n\\n| Algorithm 1                      | Self-Play Training of Absolute Zero Reasoner (AZR)              |                                                      |                           |\\n|----------------------------------|-----------------------------------------------------------------|------------------------------------------------------|---------------------------|\\n| Require:                         | Pretrained base LLM<br>\u03c0\u03b8; batch size<br>B; #references         | K; iterations<br>T                                   |                           |\\n| 1:<br>Dded,<br>Dabd,<br>Dind     | \u2190 InitSeeding(\u03c0\u03b8)                                               |                                                      | see \u00a73.3.1<br>\u25b7           |\\n| to<br>2:<br>\u2190 1<br>for<br>t<br>T | do                                                              |                                                      |                           |\\n| 3:<br>for<br>\u2190 1<br>b            | to<br>do<br>B                                                   | \u25b7                                                    | PROPOSE PHASE             |\\n| 4:<br>p<br>\u223c Dabd                | \u222a Dded                                                          | sample a program for induction task proposal<br>\u25b7    |                           |\\n| N<br>n<br>5:<br><br>i<br>\u03c0       | propose<br>(ind, p)<br>n=1, m\u03c0<br>\u2190 \u03c0<br>\u03b8                      | generate<br>\u25b7<br>N                                   | inputs and a description  |\\n| n<br>6:<br><br>(i<br>if<br>\u03c0     | N<br>n=1 \u2190 ValidateByExecuting<br>, on<br>)<br>p,<br>{i<br>\u03c0    | syntax<br>n<br>\u03c0},<br>then<br>\u25b7                      | validate I/Os, see \u00a73.3.3 |\\n| 7:<br>Dind                       | n<br>, on<br><br>(p,<br>{(i<br>)}, m\u03c0)<br>\u2190 Dind<br>\u222a<br>\u03c0<br>\u03c0 | \u25b7                                                    | update induction buffer   |\\n| 8:<br>for<br>\u03b1                   | \u2208 {ded,<br>abd}<br>do                                           |                                                      |                           |\\n| 9:<br>                           | K<br>pk, ik, ok<br>k=1 \u223c D\u03b1                                     | sample<br>\u25b7<br>K                                     | reference examples        |\\n| 10:                              | propose<br><br><br>(p\u03c0, i\u03c0)<br>{(pk, ik, ok)}<br>\u2190 \u03c0<br>\u03b1,<br>\u03b8 | \u25b7                                                    | propose new task          |\\n| 11:<br>if                        | \u2190 ValidateByExecuting<br>o\u03c0<br>p\u03c0, i\u03c0,                          | syntax,safety,determinism<br>then                    | see \u00a73.3.3<br>\u25b7           |\\n| 12:                              | <br>(p\u03c0, i\u03c0, o\u03c0)<br>D\u03b1 \u2190 D\u03b1 \u222a                                   | if valid, update deduction or abduction buffers<br>\u25b7 |                           |\\n| 13:<br>for all<br>\u03b1              | \u2208 {ded,<br>abd,<br>ind}<br>do                                   | \u25b7                                                    | SOLVE PHASE               |\\n| (x, y\u22c6<br>14:                    | \u2190 SamplePrepareTasks<br>D\u03b1, B, t<br>)                           | \u25b7 x, y\u22c6 prepared based on                            | \u03b1, see \u00a73.3.3&3.3.4       |\\n| 15:<br>y\u03c0<br>\u223c \u03c0                 | solve<br>(x)<br>\u03b8                                               |                                                      |                           |\\n| 16:<br>Reward:                   | Use proposed task triplets and solved answers to get            | &<br>rpropose<br>rsolve                              | see \u00a73.1<br>\u25b7             |\\n| 17:<br>RL update:                | use Task Relative REINFORCE++ to update                         | \u03c0\u03b8                                                   | see \u00a73.3.5<br>\u25b7           |\\n\\nAlgorithm 1,Self-Play Training of Absolute Zero Reasoner (AZR),,\\r\\nRequire:,Pretrained base LLM \u03c0\u03b8; batch size B; #references,K; iterations T,\\r\\n\"1: Dded, Dabd, Dind\",\u2190 InitSeeding(\u03c0\u03b8),,see \u00a73.3.1 \u25b7\\r\\nto 2: \u2190 1 for t T,do,,\\r\\n3: for \u2190 1 b,to do B,\u25b7,PROPOSE PHASE\\r\\n4: p \u223c Dabd,\u222a Dded,sample a program for induction task proposal \u25b7,\\r\\nN n 5: i \u03c0,\"propose (ind, p) n=1, m\u03c0 \u2190 \u03c0 \u03b8\",generate \u25b7 N,inputs and a description\\r\\nn 6: (i if \u03c0,\"N n=1 \u2190 ValidateByExecuting , on ) p, {i \u03c0\",\"syntax n \u03c0}, then \u25b7\",\"validate I/Os, see \u00a73.3.3\"\\r\\n7: Dind,\"n , on (p, {(i )}, m\u03c0) \u2190 Dind \u222a \u03c0 \u03c0\",\u25b7,update induction buffer\\r\\n8: for \u03b1,\"\u2208 {ded, abd} do\",,\\r\\n9: ,\"K pk, ik, ok k=1 \u223c D\u03b1\",sample \u25b7 K,reference examples\\r\\n10:,\"propose (p\u03c0, i\u03c0) {(pk, ik, ok)} \u2190 \u03c0 \u03b1, \u03b8\",\u25b7,propose new task\\r\\n11: if,\"\u2190 ValidateByExecuting o\u03c0 p\u03c0, i\u03c0,\",\"syntax,safety,determinism then\",see \u00a73.3.3 \u25b7\\r\\n12:,\" (p\u03c0, i\u03c0, o\u03c0) D\u03b1 \u2190 D\u03b1 \u222a\",\"if valid, update deduction or abduction buffers \u25b7\",\\r\\n13: for all \u03b1,\"\u2208 {ded, abd, ind} do\",\u25b7,SOLVE PHASE\\r\\n\"(x, y\u22c6 14:\",\"\u2190 SamplePrepareTasks D\u03b1, B, t )\",\"\u25b7 x, y\u22c6 prepared based on\",\"\u03b1, see \u00a73.3.3&3.3.4\"\\r\\n15: y\u03c0 \u223c \u03c0,solve (x) \u03b8,,\\r\\n16: Reward:,Use proposed task triplets and solved answers to get,& rpropose rsolve,see \u00a73.1 \u25b7\\r\\n17: RL update:,use Task Relative REINFORCE++ to update,\u03c0\u03b8,see \u00a73.3.5 \u25b7\\r\\n{\\n \"headers\": [\\n \"Algorithm 1\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\",\\n \"\",\\n \"\"\\n ],\\n \"rows\": [\\n {\\n \"Algorithm 1\": \"Require:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"Pretrained base LLM \u03c0\u03b8; batch size B; #references\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"1: Dded, Dabd, Dind\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2190 InitSeeding(\u03c0\u03b8)\",\\n \"\": \"see \u00a73.3.1 \u25b7\"\\n },\\n {\\n \"Algorithm 1\": \"to 2: \u2190 1 for t T\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"do\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"3: for \u2190 1 b\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"to do B\",\\n \"\": \"PROPOSE PHASE\"\\n },\\n {\\n \"Algorithm 1\": \"4: p \u223c Dabd\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u222a Dded\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"N n 5: i \u03c0\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"propose (ind, p) n=1, m\u03c0 \u2190 \u03c0 \u03b8\",\\n \"\": \"inputs and a description\"\\n },\\n {\\n \"Algorithm 1\": \"n 6: (i if \u03c0\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"N n=1 \u2190 ValidateByExecuting , on ) p, {i \u03c0\",\\n \"\": \"validate I/Os, see \u00a73.3.3\"\\n },\\n {\\n \"Algorithm 1\": \"7: Dind\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"n , on (p, {(i )}, m\u03c0) \u2190 Dind \u222a \u03c0 \u03c0\",\\n \"\": \"update induction buffer\"\\n },\\n {\\n \"Algorithm 1\": \"8: for \u03b1\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2208 {ded, abd} do\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"9: \",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"K pk, ik, ok k=1 \u223c D\u03b1\",\\n \"\": \"reference examples\"\\n },\\n {\\n \"Algorithm 1\": \"10:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"propose (p\u03c0, i\u03c0) {(pk, ik, ok)} \u2190 \u03c0 \u03b1, \u03b8\",\\n \"\": \"propose new task\"\\n },\\n {\\n \"Algorithm 1\": \"11: if\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2190 ValidateByExecuting o\u03c0 p\u03c0, i\u03c0,\",\\n \"\": \"see \u00a73.3.3 \u25b7\"\\n },\\n {\\n \"Algorithm 1\": \"12:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \" (p\u03c0, i\u03c0, o\u03c0) D\u03b1 \u2190 D\u03b1 \u222a\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"13: for all \u03b1\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2208 {ded, abd, ind} do\",\\n \"\": \"SOLVE PHASE\"\\n },\\n {\\n \"Algorithm 1\": \"(x, y\u22c6 14:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2190 SamplePrepareTasks D\u03b1, B, t )\",\\n \"\": \"\u03b1, see \u00a73.3.3&3.3.4\"\\n },\\n {\\n \"Algorithm 1\": \"15: y\u03c0 \u223c \u03c0\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"solve (x) \u03b8\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"16: Reward:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"Use proposed task triplets and solved answers to get\",\\n \"\": \"see \u00a73.1 \u25b7\"\\n },\\n {\\n \"Algorithm 1\": \"17: RL update:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"use Task Relative REINFORCE++ to update\",\\n \"\": \"see \u00a73.3.5 \u25b7\"\\n }\\n ]\\n}# <span id=\"page-6-2\"></span>3.3.2. Task Proposal Inputs and Buffer Management\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-6-2\\\\\"></span>3.3.2. Task Proposal Inputs and Buffer Management\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nDuring the actual self-play stage of AZR, we use the task buffer in three ways. *First*, for the proposer of abduction and deduction tasks, we uniformly sample *K* past triplets from the buffer, present them as in-context examples to the proposer and let it generate a new task. The design is to show it past examples, and prompt it to generate a different one to promote diversity [\\\\(Zhao et al.,](#page-18-2) [2025a\\\\)](#page-18-2). *Second*, we sample one triplet from the union of abduction and deduction buffers <sup>D</sup>abd <sup>S</sup> <sup>D</sup>ded, and present the program *<sup>p</sup>* from that triplet to the induction proposer to generate a set of *<sup>N</sup>* matching inputs {*<sup>i</sup> n* } and a natural language message *<sup>m</sup>*. *Lastly*, to maintain stable training, if a batch of solver problems contains fewer than *B* valid proposed tasks (proposer not adhering to formatting), we fill the remainder by uniformly sampling from the corresponding task buffer of previously validated triplets.\\n\\nThe buffer grows for abduction and deduction tasks whenever *\u03c0* propose a valid triplet (*p, i, o*), regardless if it gets any task reward. Similarly, for induction tasks, all valid triplets (*p,* {*<sup>i</sup> n , o<sup>n</sup>* })*, m* are added to the buffer.\\n\\n# <span id=\"page-6-1\"></span>3.3.3. Constructing Valid Tasks\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-6-1\\\\\"></span>3.3.3. Constructing Valid Tasks\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Proposal Task Validation.** We first describe how we construct valid tasks from the proposals generated by the policy *\u03c0*. For *deduction and abduction* tasks, each proposal consists of a program and an input (*p, i*). To validate the task, we use the task validation procedure (steps shown below) on the input to obtain the correct output *o*, resulting in a complete triplet (*p, i, o*). For *induction* tasks, given a program *<sup>p</sup>* the policy proposes a set of inputs {*<sup>i</sup> n* } and message *<sup>m</sup>*. We also use the task validation procedure on each of the input *<sup>i</sup> n* in the set to obtain a corresponding output *o n* , forming a set of input-output pairs {*<sup>i</sup> n , o<sup>n</sup>* }. We do not impose any constraints on *<sup>m</sup>*. The resulting task is considered valid only when all inputs yield valid outputs and the formatting requirements are satisfied. The **task validation procedure** entails:\\n\\n- 1. *Program Integrity.* We first use Python to run the program *p* with the input *i*. If no errors are raised and something is returned, we then gather the output *o* of that (*p, i*) pair and determine that the program at least has valid syntax.\\n- 2. *Program Safety.* We also check whether a program is safe for execution by restricting the use of certain sensitive packages that might cause harm to the Python environment, *i.e*., os.sys, sys, shutil. The list of packages used to filter out invalid programs is provided in Figure [8.](#page-21-0) This list is also included in the instructions when prompting the language model to generate questions. See Figures [34](#page-39-0) to [36.](#page-41-0)\\n- 3. *Check for Determinism.* In our setting, we only consider *deterministic programs*, *i.e*., *<sup>p</sup>* <sup>\u2208</sup> <sup>P</sup>deterministic <sup>\u2282</sup> <sup>P</sup>, where <sup>P</sup> is the space of all valid programs and I is the space of all valid inputs:\\n\\n<span id=\"page-7-2\"></span>\\n$$\\\\forall p \\\\in \\\\mathscr{P}\\\\_{\\\\text{deterministic}}, \\\\ \\\\forall i \\\\in \\\\mathscr{I}, \\\\ \\\\left( \\\\lim\\\\_{j \\\\to \\\\infty} p(i)^{(1)} = p(i)^{(2)} = \\\\dots = p(i)^{(j)} \\\\right), \\\\tag{7}$$\\n\\nwhere (*j*) indexes repeated independent executions of the program. That is, for all inputs *i*, the output of *p*(*i*) remains identical with any independent execution of the program. A *valid program/input/output triplet* (*p, i, o*) is defined such that *o* = *p*(*i*), where *<sup>p</sup>* <sup>\u2208</sup> <sup>P</sup>deterministic.\\n\\nSince the output of probabilistic programs can vary on every individual run, it is non-trivial to use verifiable functions to evaluate the correctness of an answer. Therefore, to keep the verifier simple, we restrict the valid programs generated by the learner to the class of deterministic programs. We believe that stochastic programs can encompass a larger class of behaviors and are important and promising to include in future versions of AZR.\\n\\nTo implement the filtering of invalid probabilistic programs, and following the definition of a deterministic program highlighted in Equation [\\\\(7\\\\)](#page-7-2), we approximate this procedure by independently running the program *j* finite times and checking that all the outputs are equal. For computational budget reasons, we fixed *j* = 2 for all experiments.\\n\\n**Solving Task Construction.** If a task proposal passes these three checks, we deem it a valid task and apply appropriate procedures to present part of the triplet to the solver. Specifically, we set *<sup>x</sup>* = (*p, i*)for deduction; *<sup>x</sup>* = (*p, o*)for abduction; and *<sup>x</sup>* = ({*<sup>i</sup> n , o<sup>n</sup>* } *N//*2 *<sup>n</sup>*=1 *, m*) for induction, where half of the tests cases and a program description *m* is used. We use all valid tasks from timestep *t*; if the batch *B* is not full, we uniformly sample from previously validated tasks to fill the batch.\\n\\n# <span id=\"page-7-1\"></span>3.3.4. Answer Verification\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-7-1\\\\\"></span>3.3.4. Answer Verification\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nFor abduction task, we receive *i<sup>\u03c0</sup>* from the solver policy, then we equivalence match using *p*(*i\u03c0*) = *p*(*i \u22c6* ), where <sup>\u2217</sup> refers to the privileged gold information. The reason we do not just match *i<sup>\u03c0</sup>* and *i \u22c6* is because *p* is not necessarily bijective. For deduction task, we match *o<sup>\u03c0</sup>* = *o \u22c6* . For induction, we match all({*p\u03c0*(*<sup>i</sup> \u22c6 <sup>n</sup>*) = *o \u22c6 <sup>n</sup>*} *<sup>N</sup>* ). This part might be convoluted to explain in language, therefore we recommend the reader to see how we did abduction, deduction and induction verification in code in Figures [10](#page-22-0) to [12,](#page-22-1) respectively.\\n\\n# <span id=\"page-7-0\"></span>3.3.5. Task-Relative REINFORCE++\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-7-0\\\\\"></span>3.3.5. Task-Relative REINFORCE++\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nSince AZR trains the combination of roles and task types, it operates in a multitask reinforcement learning setup [\\\\(Zhang & Yang,](#page-18-3) [2021;](#page-18-3) [Zhao et al.,](#page-18-4) [2022;](#page-18-4) [Wang et al.,](#page-16-6) [2023;](#page-16-6) [Yue et al.,](#page-17-2) [2023\\\\)](#page-17-2). Instead of computing a single global baseline as in REINFORCE++ [\\\\(Hu,](#page-14-2) [2025\\\\)](#page-14-2) (Appendix [A\\\\)](#page-20-0), we compute separate baselines for each of the six task-role configurations. This can be viewed as an interpolation between per-question baselines, as in GRPO [\\\\(Shao et al.,](#page-16-7) [2024\\\\)](#page-16-7), and a global baseline, allowing for more structured variance reduction tailored to each task setup. We refer to this variant as **Task-Relative REINFORCE++ (TRR++)**. The normalized advantage *A* norm is computed as:\\n\\n$$A\\\\_{\\\\text{task,role}}^{\\\\text{norm}} = \\\\frac{r - \\\\mu\\\\_{\\\\text{task,role}}}{\\\\sigma\\\\_{\\\\text{task,role}}}, \\\\quad \\\\text{task} \\\\in \\\\{\\\\text{ind,ded,abd}\\\\}, \\\\text{role} \\\\in \\\\{\\\\text{propose,solve}\\\\},\\\\tag{8}$$\\n\\nwhere the mean and standard deviation are computed *within each task type and role*, yielding six baselines.\\n\\n# **4. Experiments**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**4. Experiments**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n### **4.1. Experiment Setup**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**4. Experiments**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"**4.1. Experiment Setup**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Training Details.** For all experiments, we initialize the buffers as described in Section [3.1.](#page-3-1) AZR models are trained using a batch size of <sup>64</sup> <sup>\u00d7</sup> <sup>6</sup> (2 roles <sup>\u00d7</sup> 3 task types). We use constant learning rate= 1*e*\u2212<sup>6</sup> and the AdamW optimizer [\\\\(Loshchilov & Hutter,](#page-15-6) [2019\\\\)](#page-15-6). Complete list of hyperparameters is provided in Table [3.](#page-20-1)\\n\\nFor the main experiments, we train AZR models on Qwen2.5-7B and Qwen2.5-7B-Coder, resulting in Absolute Zero Reasoner-base-7B and Absolute Zero Reasoner-Coder-7B, respectively. Additional experiments include training Qwen2.5-Coder-3B, Qwen2.5-Coder-14B, Qwen2.5-14B, Llama-3.1-8B [\\\\(Yang et al.,](#page-17-3) [2024a;](#page-17-3) [Hui et al.,](#page-14-3) [2024;](#page-14-3) [Dubey et al.,](#page-13-4) [2024\\\\)](#page-13-4).\\n\\n**Evaluation Protocol.** To evaluate our models, we divide the datasets into in-distribution (ID) and out-of-distribution (OOD) categories. For OOD benchmarks, which we emphasize more, we further categorize them into coding and mathematical reasoning benchmarks. For coding tasks, we evaluate using Evalplus [\\\\(Liu et al.,](#page-15-7) [2023\\\\)](#page-15-7) on the HumanEval+ and MBPP+ benchmarks, as well as LiveCodeBench Generation (v1-5, May 23-Feb 25) [\\\\(Jain et al.,](#page-14-4) [2024\\\\)](#page-14-4). For mathematical reasoning, we utilize six standard benchmarks commonly used in recent zero-shot trained reasoners: AIME\\'24, AIME\\'25, OlympiadBench [\\\\(He et al.,](#page-14-5) [2024\\\\)](#page-14-5), Minerva, Math500 [\\\\(Hendrycks et al.,](#page-14-6) [2021\\\\)](#page-14-6), and AMC\\'23. For ID benchmarks, we use CruxEval-I(nput), CruxEval-O(utput), and LiveCodeBench-Execution [\\\\(Gu et al.,](#page-14-7) [2024;](#page-14-7) [Jain et al.,](#page-14-4) [2024\\\\)](#page-14-4), which assess reasoning capabilities regarding the input and output of programs [\\\\(Li et al.,](#page-15-8) [2025\\\\)](#page-15-8). *Greedy decoding* is used for all baseline methods and AZR results to ensure reproducibility.\\n\\n**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n\\n| Model                                               | Base  | #data | HEval+       | MBPP+        | LCBv1-5       | AME24         | AME25        | AMC        | M500       | Minva               | Olypiad | CAvg                | MAvg      | AVG                |\\n|-----------------------------------------------------|-------|-------|--------------|--------------|---------------|---------------|--------------|------------|------------|---------------------|---------|---------------------|-----------|--------------------|\\n| Base Models                                         |       |       |              |              |               |               |              |            |            |                     |         |                     |           |                    |\\n| Qwen2.5-7B[73]                                      | -     | -     | 73.2         | 65.3         | 17.5          | 6.7           | 3.3          | 37.5       | 64.8       | 25.0                | 27.7    | 52.0                | 27.5      | 39.8               |\\n| Qwen2.5-7B-Ins[73]                                  | -     | -     | 75.0         | 68.5         | 25.5          | 13.3          | 6.7          | 52.5       | 76.4       | 35.7                | 37.6    | 56.3                | 37.0      | 46.7               |\\n| Qwen2.5-7B-Coder[26]                                | -     | -     | 80.5         | 69.3         | 19.9          | 6.7           | 3.3          | 40.0       | 54.0       | 17.3                | 21.9    | 56.6                | 23.9      | 40.2               |\\n| Qwen2.5-7B-Math[74]                                 | -     | -     | 61.0         | 57.9         | 16.2          | 10.0          | 16.7         | 42.5       | 64.2       | 15.4                | 28.0    | 45.0                | 29.5      | 37.3               |\\n| Zero-Style Reasoners Trained on Curated Coding Data |       |       |              |              |               |               |              |            |            |                     |         |                     |           |                    |\\n| AceCoder-RM[84]                                     | Ins   | 22k   | 79.9         | 71.4         | 23.6          | 20.0          | 6.7          | 50.0       | 76.4       | 34.6                | 36.7    | 58.3                | 37.4      | 47.9               |\\n| AceCoder-Rule[84]                                   | Ins   | 22k   | 77.4         | 69.0         | 19.9          | 13.3          | 6.7          | 50.0       | 76.0       | 37.5                | 37.8    | 55.4                | 36.9      | 46.2               |\\n| AceCoder-RM[84]                                     | Coder | 22k   | 78.0         | 66.4         | 27.5          | 13.3          | 3.3          | 27.5       | 62.6       | 29.4                | 29.0    | 57.3                | 27.5      | 42.4               |\\n| AceCoder-Rule[84]                                   | Coder | 22k   | 80.5         | 70.4         | 29.0          | 6.7           | 6.7          | 40.0       | 62.8       | 27.6                | 27.4    | 60.0                | 28.5      | 44.3               |\\n| CodeR1-LC2k[36]                                     | Ins   | 2k    | 81.7         | 71.7         | 28.1          | 13.3          | 10.0         | 45.0       | 75.0       | 33.5                | 36.7    | 60.5                | 35.6      | 48.0               |\\n| CodeR1-12k[36]                                      | Ins   | 12k   | 81.1         | 73.5         | 29.3          | 13.3          | 3.3          | 37.5       | 74.0       | 35.7                | 36.9    | 61.3                | 33.5      | 47.4               |\\n| Zero-Style Reasoners Trained on Curated Math Data   |       |       |              |              |               |               |              |            |            |                     |         |                     |           |                    |\\n| PRIME-Zero[9]                                       | Coder | 484k  | 49.4         | 51.1         | 11.0          | 23.3          | 23.3         | 67.5       | 81.2       | 37.9                | 41.8    | 37.2                | 45.8      | 41.5               |\\n| SimpleRL-Zoo[85]                                    | Base  | 8.5k  | 73.2         | 63.2         | 25.6          | 16.7          | 3.3          | 57.5       | 77.0       | 35.7                | 41.0    | 54.0                | 38.5      | 46.3               |\\n| Oat-Zero[38]                                        | Math  | 8.5k  | 62.2         | 59.0         | 15.2          | 30.0          | 16.7         | 62.5       | 80.0       | 34.9                | 41.6    | 45.5                | 44.3      | 44.9               |\\n| ORZ[23]                                             | Base  | 57k   | 80.5         | 64.3         | 22.0          | 13.3          | 16.7         | 60.0       | 81.8       | 32.7                | 45.0    | 55.6                | 41.6      | 48.6               |\\n| Absolute Zero Training w/ No Curated Data (Ours)    |       |       |              |              |               |               |              |            |            |                     |         |                     |           |                    |\\n| AZR (Ours)                                          | Base  | 0     | -1.9<br>71.3 | +3.8<br>69.1 | +7.8<br>25.3  | +6.6<br>13.3  | 13.3         | +10.0 52.5 | +15.0 74.4 | +9.6 38.2<br>+13.2  | 38.5    | +10.8 55.2          | +3.2 38.4 | +10.9 46.8<br>+7.0 |\\n| AZR (Ours)                                          | Coder | 0     | +3.0<br>83.5 | +0.3<br>69.6 | +11.8<br>31.7 | +13.3<br>20.0 | +6.7<br>10.0 | 57.5       | +17.5 72.6 | +22.6 36.4<br>+19.1 | 38.2    | +16.3 61.6+5.0 39.1 |           | +15.2 50.4+10.2    |\\n\\nModel,Base,#data,HEval+,MBPP+,LCBv1-5,AME24,AME25,AMC,M500,Minva,Olypiad,CAvg,MAvg,AVG\\r\\nBase Models,\\r\\nQwen2.5-7B[73],-,-,73.2,65.3,17.5,6.7,3.3,37.5,64.8,25.0,27.7,52.0,27.5,39.8\\r\\nQwen2.5-7B-Ins[73],-,-,75.0,68.5,25.5,13.3,6.7,52.5,76.4,35.7,37.6,56.3,37.0,46.7\\r\\nQwen2.5-7B-Coder[26],-,-,80.5,69.3,19.9,6.7,3.3,40.0,54.0,17.3,21.9,56.6,23.9,40.2\\r\\nQwen2.5-7B-Math[74],-,-,61.0,57.9,16.2,10.0,16.7,42.5,64.2,15.4,28.0,45.0,29.5,37.3\\r\\nZero-Style Reasoners Trained on Curated Coding Data,\\r\\nAceCoder-RM[84],Ins,22k,79.9,71.4,23.6,20.0,6.7,50.0,76.4,34.6,36.7,58.3,37.4,47.9\\r\\nAceCoder-Rule[84],Ins,22k,77.4,69.0,19.9,13.3,6.7,50.0,76.0,37.5,37.8,55.4,36.9,46.2\\r\\nAceCoder-RM[84],Coder,22k,78.0,66.4,27.5,13.3,3.3,27.5,62.6,29.4,29.0,57.3,27.5,42.4\\r\\nAceCoder-Rule[84],Coder,22k,80.5,70.4,29.0,6.7,6.7,40.0,62.8,27.6,27.4,60.0,28.5,44.3\\r\\nCodeR1-LC2k[36],Ins,2k,81.7,71.7,28.1,13.3,10.0,45.0,75.0,33.5,36.7,60.5,35.6,48.0\\r\\nCodeR1-12k[36],Ins,12k,81.1,73.5,29.3,13.3,3.3,37.5,74.0,35.7,36.9,61.3,33.5,47.4\\r\\nZero-Style Reasoners Trained on Curated Math Data,\\r\\nPRIME-Zero[9],Coder,484k,49.4,51.1,11.0,23.3,23.3,67.5,81.2,37.9,41.8,37.2,45.8,41.5\\r\\nSimpleRL-Zoo[85],Base,8.5k,73.2,63.2,25.6,16.7,3.3,57.5,77.0,35.7,41.0,54.0,38.5,46.3\\r\\nOat-Zero[38],Math,8.5k,62.2,59.0,15.2,30.0,16.7,62.5,80.0,34.9,41.6,45.5,44.3,44.9\\r\\nORZ[23],Base,57k,80.5,64.3,22.0,13.3,16.7,60.0,81.8,32.7,45.0,55.6,41.6,48.6\\r\\nAbsolute Zero Training w/ No Curated Data (Ours)\\r\\nAZR (Ours),Base,0,-1.9 71.3,+3.8 69.1,+7.8 25.3,+6.6 13.3,13.3,+10.0 52.5,+15.0 74.4,+9.6 38.2 +13.2,38.5,+10.8 55.2,+3.2 38.4,+10.9 46.8 +7.0\\r\\nAZR (Ours),Coder,0,+3.0 83.5,+0.3 69.6,+11.8 31.7,+13.3 20.0,+6.7 10.0,57.5,+17.5 72.6,+22.6 36.4 +19.1,38.2,+16.3 61.6+5.0 39.1,,+15.2 50.4+10.2\\r\\n{\\n \"headers\": [\\n \"Model\",\\n \"Base\",\\n \"#data\",\\n \"HEval+\",\\n \"MBPP+\",\\n \"LCBv1-5\",\\n \"AME24\",\\n \"AME25\",\\n \"AMC\",\\n \"M500\",\\n \"Minva\",\\n \"Olypiad\",\\n \"CAvg\",\\n \"MAvg\",\\n \"AVG\"\\n ],\\n \"rows\": [\\n {\\n \"Model\": \"Qwen2.5-7B[73]\",\\n \"Base\": \"-\",\\n \"#data\": \"-\",\\n \"HEval+\": \"73.2\",\\n \"MBPP+\": \"65.3\",\\n \"LCBv1-5\": \"17.5\",\\n \"AME24\": \"6.7\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"37.5\",\\n \"M500\": \"64.8\",\\n \"Minva\": \"25.0\",\\n \"Olypiad\": \"27.7\",\\n \"CAvg\": \"52.0\",\\n \"MAvg\": \"27.5\",\\n \"AVG\": \"39.8\"\\n },\\n {\\n \"Model\": \"Qwen2.5-7B-Ins[73]\",\\n \"Base\": \"-\",\\n \"#data\": \"-\",\\n \"HEval+\": \"75.0\",\\n \"MBPP+\": \"68.5\",\\n \"LCBv1-5\": \"25.5\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"6.7\",\\n \"AMC\": \"52.5\",\\n \"M500\": \"76.4\",\\n \"Minva\": \"35.7\",\\n \"Olypiad\": \"37.6\",\\n \"CAvg\": \"56.3\",\\n \"MAvg\": \"37.0\",\\n \"AVG\": \"46.7\"\\n },\\n {\\n \"Model\": \"Qwen2.5-7B-Coder[26]\",\\n \"Base\": \"-\",\\n \"#data\": \"-\",\\n \"HEval+\": \"80.5\",\\n \"MBPP+\": \"69.3\",\\n \"LCBv1-5\": \"19.9\",\\n \"AME24\": \"6.7\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"40.0\",\\n \"M500\": \"54.0\",\\n \"Minva\": \"17.3\",\\n \"Olypiad\": \"21.9\",\\n \"CAvg\": \"56.6\",\\n \"MAvg\": \"23.9\",\\n \"AVG\": \"40.2\"\\n },\\n {\\n \"Model\": \"Qwen2.5-7B-Math[74]\",\\n \"Base\": \"-\",\\n \"#data\": \"-\",\\n \"HEval+\": \"61.0\",\\n \"MBPP+\": \"57.9\",\\n \"LCBv1-5\": \"16.2\",\\n \"AME24\": \"10.0\",\\n \"AME25\": \"16.7\",\\n \"AMC\": \"42.5\",\\n \"M500\": \"64.2\",\\n \"Minva\": \"15.4\",\\n \"Olypiad\": \"28.0\",\\n \"CAvg\": \"45.0\",\\n \"MAvg\": \"29.5\",\\n \"AVG\": \"37.3\"\\n },\\n {\\n \"Model\": \"Zero-Style Reasoners Trained on Curated Coding Data\",\\n \"Base\": \"\"\\n },\\n {\\n \"Model\": \"AceCoder-RM[84]\",\\n \"Base\": \"Ins\",\\n \"#data\": \"22k\",\\n \"HEval+\": \"79.9\",\\n \"MBPP+\": \"71.4\",\\n \"LCBv1-5\": \"23.6\",\\n \"AME24\": \"20.0\",\\n \"AME25\": \"6.7\",\\n \"AMC\": \"50.0\",\\n \"M500\": \"76.4\",\\n \"Minva\": \"34.6\",\\n \"Olypiad\": \"36.7\",\\n \"CAvg\": \"58.3\",\\n \"MAvg\": \"37.4\",\\n \"AVG\": \"47.9\"\\n },\\n {\\n \"Model\": \"AceCoder-Rule[84]\",\\n \"Base\": \"Ins\",\\n \"#data\": \"22k\",\\n \"HEval+\": \"77.4\",\\n \"MBPP+\": \"69.0\",\\n \"LCBv1-5\": \"19.9\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"6.7\",\\n \"AMC\": \"50.0\",\\n \"M500\": \"76.0\",\\n \"Minva\": \"37.5\",\\n \"Olypiad\": \"37.8\",\\n \"CAvg\": \"55.4\",\\n \"MAvg\": \"36.9\",\\n \"AVG\": \"46.2\"\\n },\\n {\\n \"Model\": \"AceCoder-RM[84]\",\\n \"Base\": \"Coder\",\\n \"#data\": \"22k\",\\n \"HEval+\": \"78.0\",\\n \"MBPP+\": \"66.4\",\\n \"LCBv1-5\": \"27.5\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"27.5\",\\n \"M500\": \"62.6\",\\n \"Minva\": \"29.4\",\\n \"Olypiad\": \"29.0\",\\n \"CAvg\": \"57.3\",\\n \"MAvg\": \"27.5\",\\n \"AVG\": \"42.4\"\\n },\\n {\\n \"Model\": \"AceCoder-Rule[84]\",\\n \"Base\": \"Coder\",\\n \"#data\": \"22k\",\\n \"HEval+\": \"80.5\",\\n \"MBPP+\": \"70.4\",\\n \"LCBv1-5\": \"29.0\",\\n \"AME24\": \"6.7\",\\n \"AME25\": \"6.7\",\\n \"AMC\": \"40.0\",\\n \"M500\": \"62.8\",\\n \"Minva\": \"27.6\",\\n \"Olypiad\": \"27.4\",\\n \"CAvg\": \"60.0\",\\n \"MAvg\": \"28.5\",\\n \"AVG\": \"44.3\"\\n },\\n {\\n \"Model\": \"CodeR1-LC2k[36]\",\\n \"Base\": \"Ins\",\\n \"#data\": \"2k\",\\n \"HEval+\": \"81.7\",\\n \"MBPP+\": \"71.7\",\\n \"LCBv1-5\": \"28.1\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"10.0\",\\n \"AMC\": \"45.0\",\\n \"M500\": \"75.0\",\\n \"Minva\": \"33.5\",\\n \"Olypiad\": \"36.7\",\\n \"CAvg\": \"60.5\",\\n \"MAvg\": \"35.6\",\\n \"AVG\": \"48.0\"\\n },\\n {\\n \"Model\": \"CodeR1-12k[36]\",\\n \"Base\": \"Ins\",\\n \"#data\": \"12k\",\\n \"HEval+\": \"81.1\",\\n \"MBPP+\": \"73.5\",\\n \"LCBv1-5\": \"29.3\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"37.5\",\\n \"M500\": \"74.0\",\\n \"Minva\": \"35.7\",\\n \"Olypiad\": \"36.9\",\\n \"CAvg\": \"61.3\",\\n \"MAvg\": \"33.5\",\\n \"AVG\": \"47.4\"\\n },\\n {\\n \"Model\": \"Zero-Style Reasoners Trained on Curated Math Data\",\\n \"Base\": \"\"\\n },\\n {\\n \"Model\": \"PRIME-Zero[9]\",\\n \"Base\": \"Coder\",\\n \"#data\": \"484k\",\\n \"HEval+\": \"49.4\",\\n \"MBPP+\": \"51.1\",\\n \"LCBv1-5\": \"11.0\",\\n \"AME24\": \"23.3\",\\n \"AME25\": \"23.3\",\\n \"AMC\": \"67.5\",\\n \"M500\": \"81.2\",\\n \"Minva\": \"37.9\",\\n \"Olypiad\": \"41.8\",\\n \"CAvg\": \"37.2\",\\n \"MAvg\": \"45.8\",\\n \"AVG\": \"41.5\"\\n },\\n {\\n \"Model\": \"SimpleRL-Zoo[85]\",\\n \"Base\": \"Base\",\\n \"#data\": \"8.5k\",\\n \"HEval+\": \"73.2\",\\n \"MBPP+\": \"63.2\",\\n \"LCBv1-5\": \"25.6\",\\n \"AME24\": \"16.7\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"57.5\",\\n \"M500\": \"77.0\",\\n \"Minva\": \"35.7\",\\n \"Olypiad\": \"41.0\",\\n \"CAvg\": \"54.0\",\\n \"MAvg\": \"38.5\",\\n \"AVG\": \"46.3\"\\n },\\n {\\n \"Model\": \"Oat-Zero[38]\",\\n \"Base\": \"Math\",\\n \"#data\": \"8.5k\",\\n \"HEval+\": \"62.2\",\\n \"MBPP+\": \"59.0\",\\n \"LCBv1-5\": \"15.2\",\\n \"AME24\": \"30.0\",\\n \"AME25\": \"16.7\",\\n \"AMC\": \"62.5\",\\n \"M500\": \"80.0\",\\n \"Minva\": \"34.9\",\\n \"Olypiad\": \"41.6\",\\n \"CAvg\": \"45.5\",\\n \"MAvg\": \"44.3\",\\n \"AVG\": \"44.9\"\\n },\\n {\\n \"Model\": \"ORZ[23]\",\\n \"Base\": \"Base\",\\n \"#data\": \"57k\",\\n \"HEval+\": \"80.5\",\\n \"MBPP+\": \"64.3\",\\n \"LCBv1-5\": \"22.0\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"16.7\",\\n \"AMC\": \"60.0\",\\n \"M500\": \"81.8\",\\n \"Minva\": \"32.7\",\\n \"Olypiad\": \"45.0\",\\n \"CAvg\": \"55.6\",\\n \"MAvg\": \"41.6\",\\n \"AVG\": \"48.6\"\\n },\\n {\\n \"Model\": \"Absolute Zero Training w/ No Curated Data (Ours)\"\\n },\\n {\\n \"Model\": \"AZR (Ours)\",\\n \"Base\": \"Base\",\\n \"#data\": \"0\",\\n \"HEval+\": \"-1.9 71.3\",\\n \"MBPP+\": \"+3.8 69.1\",\\n \"LCBv1-5\": \"+7.8 25.3\",\\n \"AME24\": \"+6.6 13.3\",\\n \"AME25\": \"13.3\",\\n \"AMC\": \"+10.0 52.5\",\\n \"M500\": \"+15.0 74.4\",\\n \"Minva\": \"+9.6 38.2 +13.2\",\\n \"Olypiad\": \"38.5\",\\n \"CAvg\": \"+10.8 55.2\",\\n \"MAvg\": \"+3.2 38.4\",\\n \"AVG\": \"+10.9 46.8 +7.0\"\\n },\\n {\\n \"Model\": \"AZR (Ours)\",\\n \"Base\": \"Coder\",\\n \"#data\": \"0\",\\n \"HEval+\": \"+3.0 83.5\",\\n \"MBPP+\": \"+0.3 69.6\",\\n \"LCBv1-5\": \"+11.8 31.7\",\\n \"AME24\": \"+13.3 20.0\",\\n \"AME25\": \"+6.7 10.0\",\\n \"AMC\": \"57.5\",\\n \"M500\": \"+17.5 72.6\",\\n \"Minva\": \"+22.6 36.4 +19.1\",\\n \"Olypiad\": \"38.2\",\\n \"CAvg\": \"+16.3 61.6+5.0 39.1\",\\n \"MAvg\": \"\",\\n \"AVG\": \"+15.2 50.4+10.2\"\\n }\\n ]\\n}<span id=\"page-8-0\"></span>*Table 1.* **Performance of RL-Trained Reasoner on Reasoning Benchmarks Based on Qwen2.5-7B Models.** Performance of various models is evaluated on three standard code benchmarks (HumanEval<sup>+</sup> , MBPP<sup>+</sup> , LCBv1-5 and six math benchmarks (AIME\\'24, AIME\\'25, AMC\\'23, MATH500, Minerva, OlympiadBench). Average performance across coding and math benchmarks is calculated as average of the two averages: AVG = (CAvg + MAvg)*/*2. We use + for absolute percentage increase from base model. All models are trained using different variants of the Qwen2.5-7B model, with the variant and data usage labeled, more details listed in Table [4](#page-21-1)\\n\\n**Baselines.** For our main results, we use Qwen2.5-7B as the base model, along with its specialized base model variants: Qwen2.5-7B-Coder, Qwen2.5-7B-Instruct, and Qwen2.5-Math-7B [\\\\(Yang et al.,](#page-17-3) [2024a;](#page-17-3) [Hui et al.,](#page-14-3) [2024;](#page-14-3) [Yang et al.,](#page-17-4) [2024b\\\\)](#page-17-4). Furthermore, the zero-style models are usually trained specifically on either code or math data; and only Eurus-2-7B-PRIME-Zero[\\\\(Cui](#page-13-5) [et al.,](#page-13-5) [2025\\\\)](#page-13-5) was trained jointly on both domains. For code data models, we present four variants of the AceCoder [\\\\(Zeng et al.,](#page-18-5) [2025a\\\\)](#page-18-5) and two different CodeR1 models [\\\\(Liu & Zhang,](#page-15-9) [2025\\\\)](#page-15-9). For math data models, we have Qwen2.5-Math-7B-Oat-Zero [\\\\(Liu et al.,](#page-15-10) [2025\\\\)](#page-15-10), Open-Reasoner-Zero-7B (ORZ) [\\\\(Hu et al.,](#page-14-8) [2025\\\\)](#page-14-8), Qwen-2.5-7B-SimpleRL-Zoo [\\\\(Zeng et al.,](#page-18-1) [2025b\\\\)](#page-18-1). All baseline models\\' training data and initialization settings are summarized in Table [4.](#page-21-1) For follow-up scaling experiments, we compare each AZR model against its own corresponding base model, due to the lack of established baselines across different parameter scales. Finally, we compare our Llama3.1-8B-trained model with Llama-3.1-8B-SimpleRL-Zoo [\\\\(Zeng et al.,](#page-18-1) [2025b\\\\)](#page-18-1) and the base model.\\n\\n## **4.2. Results**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**4. Experiments**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 2, \"title\": \"**4.2. Results**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Research Question 1: How does AZR compare to other zero setting models trained with human expert data?** We present the main results of reasoning models trained under both the standard zero and our proposed absolute zero settings in Table [1.](#page-8-0) Notably, Absolute Zero Reasoner-Coder-7B achieves state-of-the-art performance in both the 7B overall average and the coding average categories. Despite being entirely out-of-distribution for both math and code reasoning benchmarks, it surpasses the previous best model by 1.8 absolute percentages. Even more strikingly, it outperforms models trained with expert-curated human data in the coding category by 0*.*3 absolute percentages, while never having access to such data itself.\\n\\n**Strong Cross-domain Generalization.** To assess cross-domain generalization after RLVR, we evaluate math performance before and after training, comparing AZR models with other expert code models, since AZR was trained in coding environments. After training, most expert code models showed minimal changes or even declines in performance compared to their base versions, with an average increase of only 0.65 points across these models, indicating very limited cross-domain generalization. In contrast, AZR base and coder models achieved gains of 10.9 and 15.2 percentage points, respectively, demonstrating substantially stronger generalized reasoning improvements. Similarly, although also out-of-distribution on human-defined code generation tasks, our AZR models improved by 3.2 and 5.0 points, while the math models on average showed just a moderate increases in coding (+2.0 on average).\\n\\nOverall, these results highlight the surprising effectiveness of our approach. Unlike other RLVR models trained and evaluated on human-defined tasks, our AZR models demonstrate strong general reasoning capabilities without any direct training on downstream human-defined math or coding data, only had access to self-proposed tasks during training.\\n\\n**Research Question 2: How do initializing from different base model variants (base vs. coder) affect performance?** As shown in Table [1,](#page-8-0) the coder variant achieved better overall performance in both math and coding after the AZR\\n\\n**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n\\n![](_page_9_Figure_1.jpeg)\\n\\n<span id=\"page-9-0\"></span>*Figure 6.* **(a) In-Distribution & (b) Out-of-Distribution Reasoning Task Performances. (a)** Scores on CruxEval-I, CruxEval-O, and LiveCodeBench-Execution, which correspond to abduction, deduction, and deduction task types respectively, used to evaluate in-distribution abilities of AZR during training across different model sizes and types; **(b)** Out-of-distribution reasoning performance, reported as the average of code tasks, math tasks, and their overall average, across different model sizes and types. A detailed breakdown of all benchmark results can be found in Table [5.](#page-31-0)\\n\\nself-play process. Strikingly, although the coder base model variant started with a lower average performance in math than the vanilla base model (23.9 vs. 27.5), it ultimately outperformed it after AZR training. This highlights the importance of initial code competency as a catalyst for enhancing broader reasoning abilities within the Absolute Zero Reasoner approach.\\n\\n**Research Question 3: How does varying model size effect AZR\\'s in-distribution and out-of-distribution capabilities?** We examine the effects of scaling model size and present both in-distribution and out-of-distribution results in Figure [6](#page-9-0) (a) and (b), respectively. Given the strong performance of coder models in the 7B category, we extend the analysis by evaluating smaller and larger variants: Qwen2.5-3B-Coder and Qwen2.5-14B-Coder. Due to the absence of existing baselines for these zero-style reasoner models, we compare each model\\'s performance to its corresponding base coder model.\\n\\nThe results reveal a clear trend: our method delivers *greater gains on larger, more capable models*. In the in-distribution setting, the 7B and 14B models continue to improve beyond 200 training steps, whereas the smaller 3B model appears to plateau. For out-of-distribution domains, larger models also show greater overall performance improvements than smaller ones: +5.7, +10.2, +13.2 overall performance gains, respectively for 3B, 7B and 14B. This is an encouraging sign, since base models continue to improve and also suggesting that scaling enhances the effectiveness of AZR. In future work, we aim to investigate the scaling laws that govern performance in the Absolute Zero paradigm.\\n\\n**Research Question 4: Any interesting observations by changing the model class?** We also evaluate our method on a different model class, using Llama3.1-8B as the base shown in Figure [6.](#page-9-0) Unlike the 3B and 14B categories, this setting has an existing baseline, SimpleRL [\\\\(Zeng et al.,](#page-18-1) [2025b\\\\)](#page-18-1), which enables a direct comparison. Although Llama3.1-8B is less capable than the Qwen2.5 models, our method still produces moderate improvements (+3.2), demonstrating AZR\\'s effectiveness even on relatively weaker models. However, these gains appear more limited, which aligns with our earlier observation that performance improvements tend to scale with initial base model potency.\\n\\n**Research Question 5: Any interesting behaviors or patterns observed during AZR training?** We observed interesting response patterns in both the proposal and solution stages. The model is capable of proposing diverse programs, such as string manipulation tasks, dynamic programming problems, and practical cases (*e.g*., calculating a triangle\\'s area using Heron\\'s formula). We show a concrete example in Figure [7,](#page-10-0) where AZR proposes a code problem that searches for the sum of continuous sub-arrays matching a target value and solves it through trial-and-error.\\n\\nOverall, the models trained exhibits distinct reasoning patterns depending on the task type. For example, when solving abduction tasks, it repeatedly tests different input patterns, self-correcting until the reasoned output matches the given input. When predicting outputs, it steps through the code and records structured intermediate results (such as dynamic programming arrays) until the final output is reached. When inducting programs from given inputs, outputs, and descriptions, the model systematically checks each test case to confirm that its program produces correct results. We showcase more concrete examples of these behaviors in Figures [18](#page-24-0) and [20](#page-26-0) to [26.](#page-33-0) We also share some fun \"vibe checks\" such as solving Sudoku and solving the [sum-product game](https://en.wikipedia.org/wiki/Sum_and_Product_Puzzle) in Figures [40](#page-45-0) and [41.](#page-47-0)\\n\\n**Intermediate Planning During Code Response.** Another interesting pattern emerged in our AZR models during the code induction task: the final code outputs were often interleaved with comments that resembled immediate step-by-step plans, reminiscent of the ReAct prompting framework [\\\\(Yao et al.,](#page-17-1) [2023\\\\)](#page-17-1). A similar behavior has been observed in recent formal math proving models, such as DeepSeek\\n\\n#### Input: [1,2,3,4,5], 5 Model-proposed Task Response of Predict Input Let\\'s analyze the code snippet **\u2026(analysis)** To find one possible input that produces the output 1, we need to find a scenario where **\u2026(analysis) Let\\'s consider a simple example: numbers = [1, 2], target = 1 Here\\'s the step-by-step calculation:** 1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 2 = 3, accumulated\\\\_values = [1, 3] -Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target) Since no pair satisfies the condition, the function will not return any value. This doesn\\'t match our output. Let\\'s try another example **\u2026(Tried 3 more examples) Given the complexity and the fact that no simple example seems to work, let\\'s try a more complex scenario: numbers = [2, -1, 1], target = 1** Step-by-step calculation: 1. current\\\\_sum = 0 + 2 = 2, accumulated\\\\_values = [2] 2. current\\\\_sum = 2 - 1 = 1 , accumulated\\\\_values = [2, 1] 3. current\\\\_sum = 1 + 1 = 2, accumulated\\\\_values = [2, 1, 2] - Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target)\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**4. Experiments**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 2, \"title\": \"**4.2. Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"Input: [1,2,3,4,5], 5 Model-proposed Task Response of Predict Input Let\\'s analyze the code snippet **\u2026(analysis)** To find one possible input that produces the output 1, we need to find a scenario where **\u2026(analysis) Let\\'s consider a simple example: numbers = [1, 2], target = 1 Here\\'s the step-by-step calculation:** 1. current\\\\\\\\_sum = 0 + 1 = 1, accumulated\\\\\\\\_values = [1] 2. current\\\\\\\\_sum = 1 + 2 = 3, accumulated\\\\\\\\_values = [1, 3] -Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target) Since no pair satisfies the condition, the function will not return any value. This doesn\\'t match our output. Let\\'s try another example **\u2026(Tried 3 more examples) Given the complexity and the fact that no simple example seems to work, let\\'s try a more complex scenario: numbers = [2, -1, 1], target = 1** Step-by-step calculation: 1. current\\\\\\\\_sum = 0 + 2 = 2, accumulated\\\\\\\\_values = [2] 2. current\\\\\\\\_sum = 2 - 1 = 1 , accumulated\\\\\\\\_values = [2, 1] 3. current\\\\\\\\_sum = 1 + 1 = 2, accumulated\\\\\\\\_values = [2, 1, 2] - Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target)\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n<span id=\"page-10-0\"></span>Output: 1\\n\\n*Figure 7.* **Example of a Model-Proposed Task and Its Response for Solving an Abduction Task.** (Left) The model autonomously proposes an input and program for the abduction task. We execute the program to verify its validity and obtain the corresponding output. (Right) The model\\'s reasoning process when solving the abduction task: given the code and output, it attempts to infer the original input. The model begins by analyzing the program, proposes an initial input, and reasons through the code to produce an output. If there is a mismatch, it reflects on the discrepancy and iteratively adjusts the input until the generated output matches the target. Interestingly, the agent arrives at a different input than the gold one, but since it produces the correct output, the answer is considered correct.\\n\\n- Check for pair (i=0, j=2): 2 - 2 = 0 (not equal to target) - Check for pair (i=1, j=2): 2 - 1 = 1 (equal to target)\\n\\n**The pair (i=1, j=2) satisfies the condition, and the function returns the first accumulated value in this pair, which is 1. This matches our output.**\\n\\nProver v2, which is significantly larger in scale (671B). This pattern suggests that models may naturally adopt intermediate planning as a strategy to enhance final answers. Therefore, it may be beneficial to explicitly enable or encourage this behavior in *long-form responses* across other domains.\\n\\n**Cognitive Behavior in Llama.** Interestingly, we also observed some emergent cognitive patterns in Absolute Zero Reasoner-Llama3.1-8B, similar to those reported by [Zeng et al.](#page-18-1) [\\\\(2025b\\\\)](#page-18-1), and we include one example in Figure [26,](#page-33-0) where clear state-tracking behavior is demonstrated. In addition, we encountered some unusual and potentially concerning chains of thought from the Llama model trained with AZR. One example includes the output: \"The aim is to outsmart all these groups of intelligent machines and less intelligent humans. This is for the brains behind the future\" shown in Figure [32.](#page-37-0) We refer to this as the *\"uh-oh moment\"* and encourage future work to further investigate its potential implications.\\n\\n**Token Length Increase Depends on Task Type.** Finally, we observed that token length increases over the course of training, consistent with findings from recent studies [\\\\(Hu et al.,](#page-14-8) [2025;](#page-14-8) [Liu et al.,](#page-15-10) [2025\\\\)](#page-15-10). Interestingly, our results reveal one of the first observation of clear distinctions in token length growth across different types of cognitive tasks. As shown in Figures [15](#page-23-0) to [17,](#page-24-1) the extent of lengthening varies by task type. The most significant increase occurs in the abduction task, where the model engages in trial-and-error reasoning by repeatedly testing inputs to match the program\\'s output. This suggests that the observed variation in token length is not incidental, but rather a reflection of task-specific reasoning behavior.\\n\\n**Research Question 6: Are all task types essential for good performance (Ablation)?** Due to resource constraints, we perform the ablation studies in this section and the next using only Absolute Zero Reasoner-Base-7B. We begin by testing the importance of task types during training, with results shown in Table [2.](#page-11-0) In row 1, both induction and abduction tasks are removed; in row 2, only the induction task is removed. In both cases, math performance drops significantly, with the most severe degradation occurring when more task types are excluded. These findings highlight the complementary role of the three task types in improving general reasoning capability, with each contributing in a distinct and essential way.\\n\\n**Research Question 7: How much do the designs of proposer contribute to the overall performance (Ablation)?** Next, we ablate two components of the proposer role and present the results in Table [2.](#page-11-0) First, we examine whether conditioning on historic reference triplets is necessary. To do so, we design a variant in which a fixed prompt is used to propose abduction and deduction tasks, rather than dynamically conditioning on *K* historical triplets (row 3). This results in a 5-point absolute drop in math performance and a 1-point drop in code performance. This suggest that dynamically conditioning on reference programs helps\\n\\n| Absolute Zero: Reinforced Self-play Reasoning with Zero Data |  |  |  |  |  |  |\\n|--------------------------------------------------------------|--|--|--|--|--|--|\\n|--------------------------------------------------------------|--|--|--|--|--|--|\\n\\nAbsolute Zero: Reinforced Self-play Reasoning with Zero Data,,,,,,\\r\\n{\\n \"headers\": [\\n \"Absolute Zero: Reinforced Self-play Reasoning with Zero Data\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\"\\n ],\\n \"rows\": []\\n}\\n\\n| Experiment        | Task Type     | Gen Reference | Trained Roles   | Code Avg. | Math Avg. | Overall Avg. |\\n|-------------------|---------------|---------------|-----------------|-----------|-----------|--------------|\\n| Deduction only    | Ded           | /             | /               | 54.6      | 32.0      | 43.3         |\\n| w/o Induction     | Abd, Ded      | /             | /               | 54.2      | 33.3      | 43.8         |\\n| w/o Gen Reference | /             | 0             | /               | 54.4      | 33.1      | 43.8         |\\n| Train Solver Only | /             | /             | Solve Only      | 54.8      | 36.0      | 45.4         |\\n| Ours              | Abd, Ded, Ind | K             | Propose & Solve | 55.2      | 38.4      | 46.8         |\\n\\nExperiment,Task Type,Gen Reference,Trained Roles,Code Avg.,Math Avg.,Overall Avg.\\r\\nDeduction only,Ded,/,/,54.6,32.0,43.3\\r\\nw/o Induction,\"Abd, Ded\",/,/,54.2,33.3,43.8\\r\\nw/o Gen Reference,/,0,/,54.4,33.1,43.8\\r\\nTrain Solver Only,/,/,Solve Only,54.8,36.0,45.4\\r\\nOurs,\"Abd, Ded, Ind\",K,Propose & Solve,55.2,38.4,46.8\\r\\n{\\n \"headers\": [\\n \"Experiment\",\\n \"Task Type\",\\n \"Gen Reference\",\\n \"Trained Roles\",\\n \"Code Avg.\",\\n \"Math Avg.\",\\n \"Overall Avg.\"\\n ],\\n \"rows\": [\\n {\\n \"Experiment\": \"Deduction only\",\\n \"Task Type\": \"Ded\",\\n \"Gen Reference\": \"/\",\\n \"Trained Roles\": \"/\",\\n \"Code Avg.\": \"54.6\",\\n \"Math Avg.\": \"32.0\",\\n \"Overall Avg.\": \"43.3\"\\n },\\n {\\n \"Experiment\": \"w/o Induction\",\\n \"Task Type\": \"Abd, Ded\",\\n \"Gen Reference\": \"/\",\\n \"Trained Roles\": \"/\",\\n \"Code Avg.\": \"54.2\",\\n \"Math Avg.\": \"33.3\",\\n \"Overall Avg.\": \"43.8\"\\n },\\n {\\n \"Experiment\": \"w/o Gen Reference\",\\n \"Task Type\": \"/\",\\n \"Gen Reference\": \"0\",\\n \"Trained Roles\": \"/\",\\n \"Code Avg.\": \"54.4\",\\n \"Math Avg.\": \"33.1\",\\n \"Overall Avg.\": \"43.8\"\\n },\\n {\\n \"Experiment\": \"Train Solver Only\",\\n \"Task Type\": \"/\",\\n \"Gen Reference\": \"/\",\\n \"Trained Roles\": \"Solve Only\",\\n \"Code Avg.\": \"54.8\",\\n \"Math Avg.\": \"36.0\",\\n \"Overall Avg.\": \"45.4\"\\n },\\n {\\n \"Experiment\": \"Ours\",\\n \"Task Type\": \"Abd, Ded, Ind\",\\n \"Gen Reference\": \"K\",\\n \"Trained Roles\": \"Propose & Solve\",\\n \"Code Avg.\": \"55.2\",\\n \"Math Avg.\": \"38.4\",\\n \"Overall Avg.\": \"46.8\"\\n }\\n ]\\n}<span id=\"page-11-0\"></span>*Table 2.* **Ablation Results.** We ablate task types and the proposer role in the Absolute Zero Reasoner using the 7B base model. A \\'/\\' indicates that the configuration remains unchanged from the standard AZR setup. Removing induction or using only deduction leads to significant performance drops (rows 1 & 2). For the proposer role, both removing conditioning on *K* references (row 3) and omitting proposer-role training (row 4) result in degraded performance. Overall, all components are essential for general reasoning.\\n\\nimprove performance, possibly by increasing diversity and achieving better coverage of the reasoning problem space.\\n\\nFinally, we consider a case where we do not train the proposer at all. Instead, we only prompt it using the current learner and train the solver alone (row 4). We observe a moderate drop in overall performance (-1.4), suggesting that while proposer training is beneficial, it may not be the most critical factor for now in the AZR framework. We hypothesize that this could be related to task interference, as studied in multitask learning literature [\\\\(Suteu & Guo,](#page-16-8) [2019\\\\)](#page-16-8). Thus, we believe that further investigation into how to make the proposer even more potent is an exciting and promising direction.\\n\\n**Additional Results.** Beyond the core research questions, we present additional results, including the breakdown of individual out-of-distribution benchmark scores during training for the 7B base and coder models in Figures [28](#page-34-0) and [29,](#page-35-0) for th 14B base and coder model in Figures [30](#page-36-0) and [31.](#page-37-1) For completeness, we also report in-distribution benchmark performance during training for the 7B base model in Figure [14.](#page-22-2) Finally, we invite interested readers to explore Appendix [D,](#page-48-0) where we share several experimental directions that, while not yielding strong performance gains, produced interesting and insightful findings.\\n\\n# **5. Related Work**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**5. Related Work**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Reasoning with RL.** Using RL to enhance reasoning capabilities has recently emerged as an important step in the post-training process of strong reasoning-focused large language models [\\\\(Lambert et al.,](#page-15-0) [2024\\\\)](#page-15-0). One of the first works to explore a self-bootstrapping approach to improving LLM reasoning is STaR, which employs expert iteration and rejection sampling of outcome-verified responses to iteratively improve the model\\'s CoT. A monumental work, o1 [\\\\(Jaech et al.,](#page-14-0) [2024\\\\)](#page-14-0), was among the first to deploy this idea on a scale, achieving state-of-the-art results in reasoning tasks at the time of release. More recently, the R1 model [\\\\(DeepSeek-AI et al.,](#page-13-0) [2025\\\\)](#page-13-0) became the first open-weight model to match or even surpass the performance of o1. Most notably, the zero setting was introduced, in which reinforcement learning is applied directly on top of the base LLM. This inspired followup work, which are open source attempts to replicate the R1 process or to improve the underlying reinforcement learning algorithm [\\\\(Zeng et al.,](#page-18-1) [2025b;](#page-18-1) [Liu et al.,](#page-15-10) [2025;](#page-15-10) [Cui et al.,](#page-13-5) [2025;](#page-13-5) [Hu et al.,](#page-14-8) [2025;](#page-14-8) [Yu et al.,](#page-17-5) [2025;](#page-17-5) [Yuan et al.,](#page-17-6) [2025\\\\)](#page-17-6). Recent work explored RL on human defined procedural generated puzzles saw improvements in math [\\\\(Xie et al.,](#page-17-7) [2025\\\\)](#page-17-7), and using one human example can almost match the performance of thousands [\\\\(Wang et al.,](#page-17-8) [2025b\\\\)](#page-17-8). We extend the zero setting to a new absolute zero setting, where not only is the RLVR process initialized from a base LLM without SFT, but no external prompt data or answers are provided to the learner. All data used to improve reasoning were self-proposed, and refined entirely through RLVR. Moreover, our goal is not to only match zero-setting models, but to surpass them in the long run.\\n\\n**Self-play.** The self-play paradigm can be traced back to early 2000s, where [Schmidhuber](#page-16-9) [\\\\(2003;](#page-16-9) [2011\\\\)](#page-16-10) (of course) explored a two-agent setup in which a proposal agent invents questions for a prediction agent to answer. This dynamic continuously and automatically improves both agents, enabling theoretically never-ending progress [\\\\(Schaul,](#page-15-11) [2024\\\\)](#page-15-11). AlphaGo and AlphaZero [\\\\(Silver et al.,](#page-16-11) [2016;](#page-16-11) [2017\\\\)](#page-16-3) extend the self-play paradigm to the two-player zero-sum game of Go, where the current learner competes against earlier versions of itself to progressively enhance its capabilities. These were among the first milestone works to demonstrate superhuman performance in the game of Go. Moreover, methods such as asymmetric self-play [\\\\(Sukhbaatar et al.,](#page-16-5) [2018;](#page-16-5) [OpenAI et al.,](#page-15-12) [2021\\\\)](#page-15-12), unsupervised environment design [\\\\(Wang et al.,](#page-16-12) [2019;](#page-16-12) [Dennis et al.,](#page-13-6) [2020\\\\)](#page-13-6), unsupervised reinforcement learning [\\\\(Laskin et al.,](#page-15-13) [2021;](#page-15-13) [Zhao et al.,](#page-18-4) [2022;](#page-18-4) [2025b\\\\)](#page-18-6), and automatic goal generation [\\\\(Florensa et al.,](#page-14-9) [2018\\\\)](#page-14-9) all center around inventing new tasks for an agent to learn from\u2014typically without supervision. In these approaches, the process of setting goals itself is often dynamic and continuously evolving. Generative adversarial networks [\\\\(Goodfellow et al.,](#page-14-10) [2020\\\\)](#page-14-10), also belong in this paradigm where a discriminator discriminate between real data and generated data, and the generated is trained to fool the discriminator.\\n\\nMost recently, SPIN and Self-Rewarding Language Models [\\\\(Chen et al.,](#page-13-2) [2024;](#page-13-2) [Yuan et al.,](#page-17-9) [2024\\\\)](#page-17-9) use the same instance of the lanugage models themselves as the reward model to progressively improve the generative and discriminative abilities of the same LLM for alignment. [\\\\(Kirchner et al.,](#page-14-11) [2024\\\\)](#page-14-11) uses Prover-Verifier Game for increasing legibility and eva [\\\\(Ye et al.,](#page-17-10) [2024\\\\)](#page-17-10) uses self-play for alignment, but reward model is the main bottleneck as it is not reliable for reasoning tasks [\\\\(Lambert et al.,](#page-15-0) [2024\\\\)](#page-15-0). SPC [\\\\(Chen et al.,](#page-13-1) [2025\\\\)](#page-13-1) used self-play to train on human-curated tasks to increase the critic capabilities and SPAG [\\\\(Cheng et al.,](#page-13-7) [2024\\\\)](#page-13-7) trained using self-play in specific game of Adversarial Taboo. Concurrent works\u2014Genius, EMPO, and TTRL [\\\\(Xu et al.,](#page-17-11) [2025;](#page-17-11) [Zhang et al.,](#page-18-7) [2025b;](#page-18-7) [Zuo et al.,](#page-18-8) [2025\\\\)](#page-18-8)\u2014leverage human-curated language queries without labels to train reinforcement learning agents, but still rely on a fixed human defined learning task distribution. Finally, Minimo [\\\\(Poesia et al.,](#page-15-14) [2024\\\\)](#page-15-14) extends self-play to formal mathematics, where a pair of conjecture- and theorem-proving agents are jointly trained using reinforcement learning. Our work builds upon the self-play paradigm, but it is the first to use it to elicit long CoT for improved reasoning, and the first to frame the problem space as a Python input/output/function abduction/deduction/induction tasks, grounding it in an operationalizable environment to facilitate RLVR.\\n\\n**Weak-to-Strong Supervision.** The concept of weak-to-strong supervision has been studied in prior work, where a teacher\u2014despite being weaker than the learner\u2014still provides useful guidance [\\\\(Burns et al.,](#page-13-8) [2024;](#page-13-8) [Hinton et al.,](#page-14-12) [2015;](#page-14-12) [Christiano,](#page-13-9) [2018;](#page-13-9) [2019;](#page-13-10) [Demski &](#page-13-11) [Garrabrant,](#page-13-11) [2019;](#page-13-11) [Leike & Sutskever,](#page-15-15) [2023;](#page-15-15) [Hubinger et al.,](#page-14-13) [2019\\\\)](#page-14-13). We consider a similar setting in which the learner may possess superhuman capabilities. However, rather than relying on supervision from a weaker teacher, we propose an alternative approach: guiding the learner\\'s improvement through verifiable rewards, which potentially offer a more reliable and scalable learning signal. Furthermore, in our proposed method, the learning task and goal distribution is not predefined by any external supervisor\u2014they are entirely self-generated by the learner, enabling it to maximize its learning potential through autonomous self-practice.\\n\\n# **6. Conclusion and Discussion**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**6. Conclusion and Discussion**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Conclusion.** In this work, we proposed the Absolute Zero paradigm, a novel setting that addresses the data limitations of existing RLVR frameworks. In this paradigm, reasoning agents are tasked with generating their own learning task distributions and improving their reasoning abilities with environmental guidance. We then presented our own instantiation, the Absolute Zero Reasoner (AZR), which is trained by having them propose and solve code-related reasoning tasks grounded by code executor.\\n\\nWe evaluated our trained models on out-of-distribution benchmarks in both the code generation and mathematical reasoning domains. Remarkably, even though our models were not directly trained on these tasks and lacked human expert-curated datasets, our reasoning agents achieved exceptional performance, surpassing the state-of-the-art in combined general reasoning scores and in coding. This demonstrates the potential of the absolute zero paradigm to drive superior reasoning capabilities without the need for extensive domain-specific training data. Furthermore, we showed that AZR scales efficiently, offering strong performance across varying model sizes, and can enhance the capabilities of other model classes as well. To foster further exploration and advancement of this emerging paradigm, we are releasing the code, models, and logs as open-source, encouraging the research community to build upon our findings.\\n\\n**Discussion.** We believe there remains much to explore, such as altering the environment from which the reasoner receives verifiable feedback, including sources like the world wide web, formal math languages [\\\\(Sutton,](#page-16-13) [2001;](#page-16-13) [Ren et al.,](#page-15-3) [2025\\\\)](#page-15-3), world simulators, or even the real world. Furthermore, AZ\\'s generality could possibly be extend to domains such as embodied AI [\\\\(Zitkovich et al.,](#page-18-9) [2023;](#page-18-9) [Yue](#page-17-12) [et al.,](#page-17-12) [2024\\\\)](#page-17-12). Additionally, more complex agentic tasks or scientific experiments, present exciting opportunities to further advance the absolute zero setting to different application domains [\\\\(Wu et al.,](#page-17-13) [2024;](#page-17-13) [2023\\\\)](#page-17-14). Beyond that, future directions could include exploring multimodal reasoning models, modifying the distribution *p*(*z*) to incorporate privileged information, defining or even let the model dynamically learn how to define *f* (Equation [\\\\(3\\\\)](#page-3-2)), or designing exploration/diversity rewards for both the propose and solve roles.\\n\\nWhile underappreciated in current reasoning literature, the exploration component of RL has long been recognized as a critical driver for emergent behavior in traditional RL [\\\\(Yue et al.,](#page-17-0) [2025;](#page-17-0) [Silver et al.,](#page-16-11) [2016;](#page-16-11) [Ladosz et al.,](#page-14-14) [2022\\\\)](#page-14-14). Years of research have examined various forms of exploration, even in related subfields using LLMs such as red teaming [\\\\(Zhao et al.,](#page-18-2) [2025a\\\\)](#page-18-2), yet its role in LLM reasoning models remains underexplored. Taking this a step further, our framework investigates an even more meta-level exploration problem: exploration within the learning task space\u2014where the agent learns not just how to solve tasks, but what tasks to learn from and how to find them. Rather than being confined to a fixed problem set, AI reasoner agents may benefit from dynamically defining and refining their own learning tasks. This shift opens a powerful new frontier\u2014where agents explore not only solution spaces but also expand the boundaries of problem spaces. We believe this is a promising and important direction for future research.\\n\\nOne limitation of our work is that we did not address how to safely manage a system composed of such self-improving components. To our surprise, we observed several instances of safety-concerning CoT from the Llama-3.1-8B model, which we term the \"uh-oh moment\". These findings suggest that the proposed absolute zero paradigm, while reducing the need for human intervention for curating tasks, still necessitates oversight due to lingering safety concerns and is a critical direction for future research [\\\\(Wang et al.,](#page-17-15) [2024;](#page-17-15) [2025a\\\\)](#page-16-14).\\n\\nAs a final note, we explored reasoning models that possess experience\u2014models that not only solve given tasks, but also define and evolve their own learning task distributions with the help of an environment. Our results with AZR show that this shift enables strong performance across diverse reasoning tasks, even with significantly fewer privileged resources, such as curated human data. We believe this could finally free reasoning models from the constraints of human-curated data [\\\\(Morris,](#page-15-16) [2025\\\\)](#page-15-16) and marks the beginning of a new chapter for reasoning models: **\"welcome to the era of experience\"** [\\\\(Silver & Sutton,](#page-16-15) [2025;](#page-16-15) [Zhao et al.,](#page-18-10) [2024\\\\)](#page-18-10).\\n\\n# **References**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**References**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n- <span id=\"page-13-3\"></span>Aryabumi, V., Su, Y., Ma, R., Morisot, A., Zhang, I., Locatelli, A., Fadaee, M., \u00dcst\u00fcn, A., and Hooker, S. To code, or not to code? exploring impact of code in pre-training. *CoRR*, abs/2408.10914, 2024. doi: 10.48550/ARXIV.2408.10914. URL <https://doi.org/10.48550/arXiv.2408.10914>.\\n- <span id=\"page-13-8\"></span>Burns, C., Izmailov, P., Kirchner, J. H., Baker, B., Gao, L., Aschenbrenner, L., Chen, Y., Ecoffet, A., Joglekar, M., Leike, J., Sutskever, I., and Wu, J. Weak-to-strong generalization: Eliciting strong capabilities with weak supervision. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=ghNRg2mEgN>.\\n- <span id=\"page-13-12\"></span>Canal, M. Radon: Python tool for code metrics. <https://github.com/rubik/radon>, 2023. Accessed: 2025-04-06.\\n- <span id=\"page-13-1\"></span>Chen, J., Zhang, B., Ma, R., Wang, P., Liang, X., Tu, Z., Li, X., and Wong, K.-Y. K. Spc: Evolving self-play critic via adversarial games for llm reasoning, 2025. URL <https://arxiv.org/abs/2504.19162>.\\n- <span id=\"page-13-2\"></span>Chen, Z., Deng, Y., Yuan, H., Ji, K., and Gu, Q. Self-play fine-tuning converts weak language models to strong language models. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=O4cHTxW9BS>.\\n- <span id=\"page-13-7\"></span>Cheng, P., Hu, T., Xu, H., Zhang, Z., Dai, Y., Han, L., Du, N., and Li, X. Self-playing adversarial language game enhances LLM reasoning. In Globersons, A., Mackey, L., Belgrave, D., Fan, A., Paquet, U., Tomczak, J. M., and Zhang, C. (eds.), *Advances in Neural Information Processing Systems 38: Annual Conference on Neural Information Processing Systems 2024, NeurIPS 2024, Vancouver, BC, Canada, December 10 - 15, 2024*, 2024. URL [http://papers.nips.cc/paper\\\\\\\\_files/paper/2024/hash/](http://papers.nips.cc/paper_files/paper/2024/hash/e4be7e9867ef163563f4a5e90cec478f-Abstract-Conference.html) [e4be7e9867ef163563f4a5e90cec478f-Abstract-Conference.html](http://papers.nips.cc/paper_files/paper/2024/hash/e4be7e9867ef163563f4a5e90cec478f-Abstract-Conference.html).\\n- <span id=\"page-13-9\"></span>Christiano, P. Approval-directed bootstrapping. [https://www.alignmentforum.org/posts/6x7oExXi32ot6HjJv/](https://www.alignmentforum.org/posts/6x7oExXi32ot6HjJv/approval-directed-bootstrapping) [approval-directed-bootstrapping](https://www.alignmentforum.org/posts/6x7oExXi32ot6HjJv/approval-directed-bootstrapping), 2018. AI Alignment Forum.\\n- <span id=\"page-13-10\"></span>Christiano, P. Capability amplification. [https://www.alignmentforum.org/posts/t3AJW5jP3sk36aGoC/](https://www.alignmentforum.org/posts/t3AJW5jP3sk36aGoC/capability-amplification-1) [capability-amplification-1](https://www.alignmentforum.org/posts/t3AJW5jP3sk36aGoC/capability-amplification-1), 2019. AI Alignment Forum.\\n- <span id=\"page-13-5\"></span>Cui, G., Yuan, L., Wang, Z., Wang, H., Li, W., He, B., Fan, Y., Yu, T., Xu, Q., Chen, W., Yuan, J., Chen, H., Zhang, K., Lv, X., Wang, S., Yao, Y., Han, X., Peng, H., Cheng, Y., Liu, Z., Sun, M., Zhou, B., and Ding, N. Process reinforcement through implicit rewards. *CoRR*, abs/2502.01456, 2025. doi: 10.48550/ARXIV.2502.01456. URL <https://doi.org/10.48550/arXiv.2502.01456>.\\n- <span id=\"page-13-0\"></span>DeepSeek-AI, Guo, D., Yang, D., Zhang, H., Song, J., Zhang, R., Xu, R., Zhu, Q., Ma, S., Wang, P., Bi, X., Zhang, X., Yu, X., Wu, Y., Wu, Z. F., Gou, Z., Shao, Z., Li, Z., Gao, Z., Liu, A., Xue, B., Wang, B., Wu, B., Feng, B., Lu, C., Zhao, C., Deng, C., Zhang, C., Ruan, C., Dai, D., Chen, D., Ji, D., Li, E., Lin, F., Dai, F., Luo, F., Hao, G., Chen, G., Li, G., Zhang, H., Bao, H., Xu, H., Wang, H., Ding, H., Xin, H., Gao, H., Qu, H., Li, H., Guo, J., Li, J., Wang, J., Chen, J., Yuan, J., Qiu, J., Li, J., Cai, J. L., Ni, J., Liang, J., Chen, J., Dong, K., Hu, K., Gao, K., Guan, K., Huang, K., Yu, K., Wang, L., Zhang, L., Zhao, L., Wang, L., Zhang, L., Xu, L., Xia, L., Zhang, M., Zhang, M., Tang, M., Li, M., Wang, M., Li, M., Tian, N., Huang, P., Zhang, P., Wang, Q., Chen, Q., Du, Q., Ge, R., Zhang, R., Pan, R., Wang, R., Chen, R. J., Jin, R. L., Chen, R., Lu, S., Zhou, S., Chen, S., Ye, S., Wang, S., Yu, S., Zhou, S., Pan, S., and Li, S. S. Deepseek-r1: Incentivizing reasoning capability in llms via reinforcement learning. *CoRR*, abs/2501.12948, 2025. doi: 10.48550/ARXIV.2501.12948. URL <https://doi.org/10.48550/arXiv.2501.12948>.\\n- <span id=\"page-13-11\"></span>Demski, A. and Garrabrant, S. Embedded agency. *CoRR*, abs/1902.09469, 2019. URL <http://arxiv.org/abs/1902.09469>.\\n- <span id=\"page-13-6\"></span>Dennis, M., Jaques, N., Vinitsky, E., Bayen, A. M., Russell, S., Critch, A., and Levine, S. Emergent complexity and zeroshot transfer via unsupervised environment design. In Larochelle, H., Ranzato, M., Hadsell, R., Balcan, M., and Lin, H. (eds.), *Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020, virtual*, 2020. URL [https://proceedings.neurips.cc/paper/2020/hash/](https://proceedings.neurips.cc/paper/2020/hash/985e9a46e10005356bbaf194249f6856-Abstract.html) [985e9a46e10005356bbaf194249f6856-Abstract.html](https://proceedings.neurips.cc/paper/2020/hash/985e9a46e10005356bbaf194249f6856-Abstract.html).\\n- <span id=\"page-13-4\"></span>Dubey, A., Jauhri, A., Pandey, A., Kadian, A., Al-Dahle, A., Letman, A., Mathur, A., Schelten, A., Yang, A., Fan, A., Goyal, A., Hartshorn, A., Yang, A., Mitra, A., Sravankumar, A., Korenev, A., Hinsvark, A., Rao, A., Zhang, A., Rodriguez, A., Gregerson, A., Spataru, A., Rozi\u00e8re, B., Biron, B., Tang, B., Chern, B., Caucheteux, C., Nayak, C., Bi, C., Marra, C., McConnell, C., Keller, C., Touret, C., Wu, C., Wong, C., Ferrer, C. C., Nikolaidis, C., Allonsius, D., Song, D., Pintz, D., Livshits, D., Esiobu, D., Choudhary, D., Mahajan, D., Garcia-Olano, D., Perino, D., Hupkes, D., Lakomkin, E., AlBadawy, E., Lobanova, E., Dinan, E., Smith, E. M., Radenovic, F., Zhang, F., Synnaeve, G., Lee, G., Anderson, G. L., Nail, G., Mialon, G., Pang, G., Cucurell, G., Nguyen, H., Korevaar, H., Xu, H., Touvron, H., Zarov, I., Ibarra, I. A., Kloumann, I. M., Misra, I., Evtimov, I., Copet, J., Lee, J., Geffert, J., Vranes, J., Park, J., Mahadeokar, J., Shah, J., van der Linde, J., Billock, J., Hong, J., Lee, J., Fu, J., Chi, J., Huang, J., Liu, J., Wang, J., Yu, J., Bitton, J., Spisak, J., Park, J., Rocca, J., Johnstun, J., Saxe, J., Jia, J., Alwala, K. V., Upasani, K., Plawiak, K., Li, K., Heafield,\\n\\nK., Stone, K., and et al. The llama 3 herd of models. *CoRR*, abs/2407.21783, 2024. doi: 10.48550/ARXIV.2407.21783. URL <https://doi.org/10.48550/arXiv.2407.21783>.\\n\\n<span id=\"page-14-15\"></span>Ebert, C., Cain, J., Antoniol, G., Counsell, S., and Laplante, P. Cyclomatic complexity. *IEEE software*, 33(6):27\u201329, 2016.\\n\\n- <span id=\"page-14-9\"></span>Florensa, C., Held, D., Geng, X., and Abbeel, P. Automatic goal generation for reinforcement learning agents. In Dy, J. G. and Krause, A. (eds.), *Proceedings of the 35th International Conference on Machine Learning, ICML 2018, Stockholmsm\u00e4ssan, Stockholm, Sweden, July 10-15, 2018*, volume 80 of *Proceedings of Machine Learning Research*, pp. 1514\u20131523. PMLR, 2018. URL <http://proceedings.mlr.press/v80/florensa18a.html>.\\n- <span id=\"page-14-10\"></span>Goodfellow, I. J., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S., Courville, A. C., and Bengio, Y. Generative adversarial networks. *Commun. ACM*, 63(11):139\u2013144, 2020. doi: 10.1145/3422622. URL <https://doi.org/10.1145/3422622>.\\n- <span id=\"page-14-7\"></span>Gu, A., Rozi\u00e8re, B., Leather, H. J., Solar-Lezama, A., Synnaeve, G., and Wang, S. Cruxeval: A benchmark for code reasoning, understanding and execution. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=Ffpg52swvg>.\\n\\n<span id=\"page-14-16\"></span>Halstead, M. H. *Elements of Software Science (Operating and programming systems series)*. Elsevier Science Inc., 1977.\\n\\n- <span id=\"page-14-5\"></span>He, C., Luo, R., Bai, Y., Hu, S., Thai, Z. L., Shen, J., Hu, J., Han, X., Huang, Y., Zhang, Y., Liu, J., Qi, L., Liu, Z., and Sun, M. Olympiadbench: A challenging benchmark for promoting AGI with olympiad-level bilingual multimodal scientific problems. In Ku, L., Martins, A., and Srikumar, V. (eds.), *Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2024, Bangkok, Thailand, August 11-16, 2024*, pp. 3828\u20133850. Association for Computational Linguistics, 2024. doi: 10.18653/V1/2024.ACL-LONG.211. URL <https://doi.org/10.18653/v1/2024.acl-long.211>.\\n- <span id=\"page-14-6\"></span>Hendrycks, D., Burns, C., Kadavath, S., Arora, A., Basart, S., Tang, E., Song, D., and Steinhardt, J. Measuring mathematical problem solving with the MATH dataset. In Vanschoren, J. and Yeung, S. (eds.), *Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks 1, NeurIPS Datasets and Benchmarks 2021, December 2021, virtual*, 2021. URL [https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/be83ab3ecd0db773eb2dc1b0a17836a1-Abstract-round2.html) [be83ab3ecd0db773eb2dc1b0a17836a1-Abstract-round2.html](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/be83ab3ecd0db773eb2dc1b0a17836a1-Abstract-round2.html).\\n- <span id=\"page-14-12\"></span>Hinton, G. E., Vinyals, O., and Dean, J. Distilling the knowledge in a neural network. *CoRR*, abs/1503.02531, 2015. URL <http://arxiv.org/abs/1503.02531>.\\n- <span id=\"page-14-2\"></span>Hu, J. REINFORCE++: A simple and efficient approach for aligning large language models. *CoRR*, abs/2501.03262, 2025. doi: 10.48550/ARXIV.2501.03262. URL <https://doi.org/10.48550/arXiv.2501.03262>.\\n- <span id=\"page-14-8\"></span>Hu, J., Zhang, Y., Han, Q., Jiang, D., Zhang, X., and Shum, H. Open-reasoner-zero: An open source approach to scaling up reinforcement learning on the base model. *CoRR*, abs/2503.24290, 2025. doi: 10.48550/ARXIV.2503.24290. URL [https:](https://doi.org/10.48550/arXiv.2503.24290) [//doi.org/10.48550/arXiv.2503.24290](https://doi.org/10.48550/arXiv.2503.24290).\\n- <span id=\"page-14-13\"></span>Hubinger, E., van Merwijk, C., Mikulik, V., Skalse, J., and Garrabrant, S. Risks from learned optimization in advanced machine learning systems. *CoRR*, abs/1906.01820, 2019. URL <http://arxiv.org/abs/1906.01820>.\\n- <span id=\"page-14-1\"></span>Hughes, E., Dennis, M. D., Parker-Holder, J., Behbahani, F. M. P., Mavalankar, A., Shi, Y., Schaul, T., and Rockt\u00e4schel, T. Position: Open-endedness is essential for artificial superhuman intelligence. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=Bc4vZ2CX7E>.\\n- <span id=\"page-14-3\"></span>Hui, B., Yang, J., Cui, Z., Yang, J., Liu, D., Zhang, L., Liu, T., Zhang, J., Yu, B., Dang, K., Yang, A., Men, R., Huang, F., Ren, X., Ren, X., Zhou, J., and Lin, J. Qwen2.5-coder technical report. *CoRR*, abs/2409.12186, 2024. doi: 10.48550/ARXIV.2409.12186. URL <https://doi.org/10.48550/arXiv.2409.12186>.\\n- <span id=\"page-14-0\"></span>Jaech, A., Kalai, A., Lerer, A., Richardson, A., El-Kishky, A., Low, A., Helyar, A., Madry, A., Beutel, A., Carney, A., et al. Openai o1 system card. *arXiv preprint arXiv:2412.16720*, 2024.\\n- <span id=\"page-14-4\"></span>Jain, N., Han, K., Gu, A., Li, W., Yan, F., Zhang, T., Wang, S., Solar-Lezama, A., Sen, K., and Stoica, I. Livecodebench: Holistic and contamination free evaluation of large language models for code. *CoRR*, abs/2403.07974, 2024. doi: 10.48550/ARXIV.2403.07974. URL <https://doi.org/10.48550/arXiv.2403.07974>.\\n- <span id=\"page-14-11\"></span>Kirchner, J. H., Chen, Y., Edwards, H., Leike, J., McAleese, N., and Burda, Y. Prover-verifier games improve legibility of LLM outputs. *CoRR*, abs/2407.13692, 2024. doi: 10.48550/ARXIV.2407.13692. URL <https://doi.org/10.48550/arXiv.2407.13692>.\\n- <span id=\"page-14-14\"></span>Ladosz, P., Weng, L., Kim, M., and Oh, H. Exploration in deep reinforcement learning: A survey. *Inf. Fusion*, 85:1\u201322, 2022. doi: 10.1016/J.INFFUS.2022.03.003. URL <https://doi.org/10.1016/j.inffus.2022.03.003>.\\n- <span id=\"page-15-0\"></span>Lambert, N., Morrison, J., Pyatkin, V., Huang, S., Ivison, H., Brahman, F., Miranda, L. J. V., Liu, A., Dziri, N., Lyu, S., Gu, Y., Malik, S., Graf, V., Hwang, J. D., Yang, J., Bras, R. L., Tafjord, O., Wilhelm, C., Soldaini, L., Smith, N. A., Wang, Y., Dasigi, P., and Hajishirzi, H. T\u00fclu 3: Pushing frontiers in open language model post-training. *CoRR*, abs/2411.15124, 2024. doi: 10.48550/ARXIV.2411.15124. URL <https://doi.org/10.48550/arXiv.2411.15124>.\\n- <span id=\"page-15-13\"></span>Laskin, M., Yarats, D., Liu, H., Lee, K., Zhan, A., Lu, K., Cang, C., Pinto, L., and Abbeel, P. URLB: unsupervised reinforcement learning benchmark. In Vanschoren, J. and Yeung, S. (eds.), *Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks 1, NeurIPS Datasets and Benchmarks 2021, December 2021, virtual*, 2021. URL [https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/091d584fced301b442654dd8c23b3fc9-Abstract-round2.html) [091d584fced301b442654dd8c23b3fc9-Abstract-round2.html](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/091d584fced301b442654dd8c23b3fc9-Abstract-round2.html).\\n- <span id=\"page-15-15\"></span>Leike, J. and Sutskever, I. Introducing superalignment. <https://openai.com/index/introducing-superalignment/>, 2023. OpenAI Blog.\\n- <span id=\"page-15-8\"></span>Li, J., Guo, D., Yang, D., Xu, R., Wu, Y., and He, J. Codei/o: Condensing reasoning patterns via code input-output prediction. *CoRR*, abs/2502.07316, 2025. doi: 10.48550/ARXIV.2502.07316. URL <https://doi.org/10.48550/arXiv.2502.07316>.\\n- <span id=\"page-15-17\"></span>Li, R., Fu, J., Zhang, B., Huang, T., Sun, Z., Lyu, C., Liu, G., Jin, Z., and Li, G. TACO: topics in algorithmic code generation dataset. *CoRR*, abs/2312.14852, 2023. doi: 10.48550/ARXIV.2312.14852. URL <https://doi.org/10.48550/arXiv.2312.14852>.\\n- <span id=\"page-15-9\"></span>Liu, J. and Zhang, L. Code-r1: Reproducing r1 for code with reliable rewards. *GitHub*, 2025.\\n- <span id=\"page-15-7\"></span>Liu, J., Xia, C. S., Wang, Y., and Zhang, L. Is your code generated by chatGPT really correct? rigorous evaluation of large language models for code generation. In *Thirty-seventh Conference on Neural Information Processing Systems*, 2023. URL <https://openreview.net/forum?id=1qvx610Cu7>.\\n- <span id=\"page-15-10\"></span>Liu, Z., Chen, C., Li, W., Qi, P., Pang, T., Du, C., Lee, W. S., and Lin, M. Understanding r1-zero-like training: A critical perspective. *CoRR*, abs/2503.20783, 2025. doi: 10.48550/ARXIV.2503.20783. URL <https://doi.org/10.48550/arXiv.2503.20783>.\\n- <span id=\"page-15-18\"></span>Lopez, R. H. Q. Complexipy: An extremely fast python library to calculate the cognitive complexity of python files, written in rust, 2025. URL <https://github.com/rohaquinlop/complexipy>. Accessed: 2025-04-06.\\n- <span id=\"page-15-6\"></span>Loshchilov, I. and Hutter, F. Decoupled weight decay regularization. In *7th International Conference on Learning Representations, ICLR 2019, New Orleans, LA, USA, May 6-9, 2019*. OpenReview.net, 2019. URL <https://openreview.net/forum?id=Bkg6RiCqY7>.\\n- <span id=\"page-15-16\"></span>Morris, J. There are no new ideas in ai. . . only new datasets. <https://blog.jxmo.io/p/there-are-no-new-ideas-in-ai-only>, 2025.\\n- <span id=\"page-15-2\"></span>OpenAI. Openai o3-mini, January 2025a. URL <https://openai.com/index/openai-o3-mini/>. Accessed: 2025-04-17.\\n- <span id=\"page-15-1\"></span>OpenAI. Introducing openai o3 and o4-mini, April 2025b. URL <https://openai.com/index/introducing-o3-and-o4-mini/>. Accessed: 2025-04-17.\\n- <span id=\"page-15-12\"></span>OpenAI, Plappert, M., Sampedro, R., Xu, T., Akkaya, I., Kosaraju, V., Welinder, P., D\\'Sa, R., Petron, A., de Oliveira Pinto, H. P., Paino, A., Noh, H., Weng, L., Yuan, Q., Chu, C., and Zaremba, W. Asymmetric self-play for automatic goal discovery in robotic manipulation. *CoRR*, abs/2101.04882, 2021. URL <https://arxiv.org/abs/2101.04882>.\\n- <span id=\"page-15-4\"></span>Ouyang, L., Wu, J., Jiang, X., Almeida, D., Wainwright, C., Mishkin, P., Zhang, C., Agarwal, S., Slama, K., Ray, A., et al. Training language models to follow instructions with human feedback. *Advances in neural information processing systems*, 35:27730\u201327744, 2022.\\n- <span id=\"page-15-14\"></span>Poesia, G., Broman, D., Haber, N., and Goodman, N. D. Learning formal mathematics from intrinsic motivation. In Globersons, A., Mackey, L., Belgrave, D., Fan, A., Paquet, U., Tomczak, J. M., and Zhang, C. (eds.), *Advances in Neural Information Processing Systems 38: Annual Conference on Neural Information Processing Systems 2024, NeurIPS 2024, Vancouver, BC, Canada, December 10 - 15, 2024*, 2024. URL [http://papers.nips.cc/paper\\\\\\\\_files/paper/2024/hash/](http://papers.nips.cc/paper_files/paper/2024/hash/4b8001fc75f0532827472ea5a16af9ca-Abstract-Conference.html) [4b8001fc75f0532827472ea5a16af9ca-Abstract-Conference.html](http://papers.nips.cc/paper_files/paper/2024/hash/4b8001fc75f0532827472ea5a16af9ca-Abstract-Conference.html).\\n- <span id=\"page-15-5\"></span>Radford, A., Wu, J., Child, R., Luan, D., Amodei, D., Sutskever, I., et al. Language models are unsupervised multitask learners. *OpenAI blog*, 1(8):9, 2019.\\n- <span id=\"page-15-3\"></span>Ren, Z. Z., Shao, Z., Song, J., Xin, H., Wang, H., Zhao, W., Zhang, L., Fu, Z., Zhu, Q., Yang, D., Wu, Z. F., Gou, Z., Ma, S., Tang, H., Liu, Y., Gao, W., Guo, D., and Ruan, C. Deepseek-prover-v2: Advancing formal mathematical reasoning via reinforcement learning for subgoal decomposition, 2025. URL <https://arxiv.org/abs/2504.21801>.\\n- <span id=\"page-15-11\"></span>Schaul, T. Boundless socratic learning with language games. *arXiv preprint arXiv:2411.16905*, 2024.\\n- <span id=\"page-16-9\"></span>Schmidhuber, J. Exploring the predictable. In *Advances in evolutionary computing: theory and applications*, pp. 579\u2013612. Springer, 2003.\\n- <span id=\"page-16-10\"></span>Schmidhuber, J. POWERPLAY: training an increasingly general problem solver by continually searching for the simplest still unsolvable problem. *CoRR*, abs/1112.5309, 2011. URL <http://arxiv.org/abs/1112.5309>.\\n- <span id=\"page-16-7\"></span>Shao, Z., Wang, P., Zhu, Q., Xu, R., Song, J., Zhang, M., Li, Y. K., Wu, Y., and Guo, D. Deepseekmath: Pushing the limits of mathematical reasoning in open language models. *CoRR*, abs/2402.03300, 2024. doi: 10.48550/ARXIV.2402.03300. URL <https://doi.org/10.48550/arXiv.2402.03300>.\\n- <span id=\"page-16-16\"></span>Sheng, G., Zhang, C., Ye, Z., Wu, X., Zhang, W., Zhang, R., Peng, Y., Lin, H., and Wu, C. Hybridflow: A flexible and efficient RLHF framework. In *Proceedings of the Twentieth European Conference on Computer Systems, EuroSys 2025, Rotterdam, The Netherlands, 30 March 2025 - 3 April 2025*, pp. 1279\u20131297. ACM, 2025. doi: 10.1145/3689031.3696075. URL [https:](https://doi.org/10.1145/3689031.3696075) [//doi.org/10.1145/3689031.3696075](https://doi.org/10.1145/3689031.3696075).\\n- <span id=\"page-16-15\"></span>Silver, D. and Sutton, R. S. The era of experience. [https://storage.googleapis.com/deepmind-media/Era-of-Experience%](https://storage.googleapis.com/deepmind-media/Era-of-Experience%20/The%20Era%20of%20Experience%20Paper.pdf) [20/The%20Era%20of%20Experience%20Paper.pdf](https://storage.googleapis.com/deepmind-media/Era-of-Experience%20/The%20Era%20of%20Experience%20Paper.pdf), 2025.\\n- <span id=\"page-16-11\"></span>Silver, D., Huang, A., Maddison, C. J., Guez, A., Sifre, L., van den Driessche, G., Schrittwieser, J., Antonoglou, I., Panneershelvam, V., Lanctot, M., Dieleman, S., Grewe, D., Nham, J., Kalchbrenner, N., Sutskever, I., Lillicrap, T. P., Leach, M., Kavukcuoglu, K., Graepel, T., and Hassabis, D. Mastering the game of go with deep neural networks and tree search. *Nat.*, 529(7587):484\u2013489, 2016. doi: 10.1038/NATURE16961. URL <https://doi.org/10.1038/nature16961>.\\n- <span id=\"page-16-3\"></span>Silver, D., Hubert, T., Schrittwieser, J., Antonoglou, I., Lai, M., Guez, A., Lanctot, M., Sifre, L., Kumaran, D., Graepel, T., Lillicrap, T. P., Simonyan, K., and Hassabis, D. Mastering chess and shogi by self-play with a general reinforcement learning algorithm. *CoRR*, abs/1712.01815, 2017. URL <http://arxiv.org/abs/1712.01815>.\\n- <span id=\"page-16-4\"></span>Stuart, T. *Understanding computation - from simple machines to impossible programs*. O\\'Reilly, 2015. ISBN 978-1-449-32927-3. URL <http://www.oreilly.de/catalog/9781449329273/index.html>.\\n- <span id=\"page-16-5\"></span>Sukhbaatar, S., Lin, Z., Kostrikov, I., Synnaeve, G., Szlam, A., and Fergus, R. Intrinsic motivation and automatic curricula via asymmetric self-play. In *6th International Conference on Learning Representations, ICLR 2018, Vancouver, BC, Canada, April 30 - May 3, 2018, Conference Track Proceedings*. OpenReview.net, 2018. URL <https://openreview.net/forum?id=SkT5Yg-RZ>.\\n- <span id=\"page-16-8\"></span>Suteu, M. and Guo, Y. Regularizing deep multi-task networks using orthogonal gradients. *CoRR*, abs/1912.06844, 2019. URL <http://arxiv.org/abs/1912.06844>.\\n- <span id=\"page-16-2\"></span>Sutskever, I., Vinyals, O., and Le, Q. V. Neurips 2024 test of time award session: Sequence to sequence learning with neural networks. Conference session, December 2024. URL <https://neurips.cc/virtual/2024/test-of-time/105032>.\\n- <span id=\"page-16-13\"></span>Sutton, R. S. Verification, the key to ai. <http://incompleteideas.net/IncIdeas/KeytoAI.html>, 2001.\\n- <span id=\"page-16-0\"></span>Team, K., Du, A., Gao, B., Xing, B., Jiang, C., Chen, C., Li, C., Xiao, C., Du, C., Liao, C., Tang, C., Wang, C., Zhang, D., Yuan, E., Lu, E., Tang, F., Sung, F., Wei, G., Lai, G., Guo, H., Zhu, H., Ding, H., Hu, H., Yang, H., Zhang, H., Yao, H., Zhao, H., Lu, H., Li, H., Yu, H., Gao, H., Zheng, H., Yuan, H., Chen, J., Guo, J., Su, J., Wang, J., Zhao, J., Zhang, J., Liu, J., Yan, J., Wu, J., Shi, L., Ye, L., Yu, L., Dong, M., Zhang, N., Ma, N., Pan, Q., Gong, Q., Liu, S., Ma, S., Wei, S., Cao, S., Huang, S., Jiang, T., Gao, W., Xiong, W., He, W., Huang, W., Wu, W., He, W., Wei, X., Jia, X., Wu, X., Xu, X., Zu, X., Zhou, X., Pan, X., Charles, Y., Li, Y., Hu, Y., Liu, Y., Chen, Y., Wang, Y., Liu, Y., Qin, Y., Liu, Y., Yang, Y., Bao, Y., Du, Y., Wu, Y., Wang, Y., Zhou, Z., Wang, Z., Li, Z., Zhu, Z., Zhang, Z., Wang, Z., Yang, Z., Huang, Z., Huang, Z., Xu, Z., and Yang, Z. Kimi k1.5: Scaling reinforcement learning with llms. *CoRR*, abs/2501.12599, 2025. doi: 10.48550/ARXIV.2501.12599. URL <https://doi.org/10.48550/arXiv.2501.12599>.\\n- <span id=\"page-16-1\"></span>Villalobos, P., Ho, A., Sevilla, J., Besiroglu, T., Heim, L., and Hobbhahn, M. Position: Will we run out of data? limits of LLM scaling based on human-generated data. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=ViZcgDQjyG>.\\n- <span id=\"page-16-14\"></span>Wang, H., Yue, Y., Lu, R., Shi, J., Zhao, A., Wang, S., Song, S., and Huang, G. Model surgery: Modulating LLM\\'s behavior via simple parameter editing. In *Proceedings of the 2025 Conference of the Nations of the Americas Chapter of the Association for Computational Linguistics*, pp. 6337\u20136357, 2025a.\\n- <span id=\"page-16-12\"></span>Wang, R., Lehman, J., Clune, J., and Stanley, K. O. Paired open-ended trailblazer (POET): endlessly generating increasingly complex and diverse learning environments and their solutions. *CoRR*, abs/1901.01753, 2019. URL <http://arxiv.org/abs/1901.01753>.\\n- <span id=\"page-16-6\"></span>Wang, S., Yang, Q., Gao, J., Lin, M. G., Chen, H., Wu, L., Jia, N., Song, S., and Huang, G. Train once, get a family: State-adaptive balances for offline-to-online reinforcement learning. In *Thirty-seventh Conference on Neural Information Processing Systems*, 2023. URL <https://openreview.net/forum?id=vtoY8qJjTR>.\\n- <span id=\"page-17-15\"></span>Wang, S., Liu, C., Zheng, Z., Qi, S., Chen, S., Yang, Q., Zhao, A., Wang, C., Song, S., and Huang, G. Boosting LLM agents with recursive contemplation for effective deception handling. In Ku, L.-W., Martins, A., and Srikumar, V. (eds.), *Findings of the Association for Computational Linguistics: ACL 2024*, pp. 9909\u20139953, Bangkok, Thailand, August 2024. Association for Computational Linguistics. doi: 10.18653/v1/2024.findings-acl.591. URL <https://aclanthology.org/2024.findings-acl.591/>.\\n- <span id=\"page-17-8\"></span>Wang, Y., Yang, Q., Zeng, Z., Ren, L., Liu, L., Peng, B., Cheng, H., He, X., Wang, K., Gao, J., Chen, W., Wang, S., Du, S. S., and Shen, Y. Reinforcement learning for reasoning in large language models with one training example, 2025b. URL <https://arxiv.org/abs/2504.20571>.\\n- <span id=\"page-17-14\"></span>Wu, Q., Bansal, G., Zhang, J., Wu, Y., Zhang, S., Zhu, E., Li, B., Jiang, L., Zhang, X., and Wang, C. Autogen: Enabling next-gen LLM applications via multi-agent conversation framework. *CoRR*, abs/2308.08155, 2023. doi: 10.48550/ARXIV.2308.08155. URL <https://doi.org/10.48550/arXiv.2308.08155>.\\n- <span id=\"page-17-13\"></span>Wu, Y., Yue, T., Zhang, S., Wang, C., and Wu, Q. Stateflow: Enhancing LLM task-solving through state-driven workflows. *CoRR*, abs/2403.11322, 2024. doi: 10.48550/ARXIV.2403.11322. URL <https://doi.org/10.48550/arXiv.2403.11322>.\\n- <span id=\"page-17-7\"></span>Xie, T., Gao, Z., Ren, Q., Luo, H., Hong, Y., Dai, B., Zhou, J., Qiu, K., Wu, Z., and Luo, C. Logic-rl: Unleashing LLM reasoning with rule-based reinforcement learning. *CoRR*, abs/2502.14768, 2025. doi: 10.48550/ARXIV.2502.14768. URL <https://doi.org/10.48550/arXiv.2502.14768>.\\n- <span id=\"page-17-11\"></span>Xu, F., Yan, H., Ma, C., Zhao, H., Sun, Q., Cheng, K., He, J., Liu, J., and Wu, Z. Genius: A generalizable and purely unsupervised self-training framework for advanced reasoning, 2025. URL <https://arxiv.org/abs/2504.08672>.\\n- <span id=\"page-17-3\"></span>Yang, A., Yang, B., Zhang, B., Hui, B., Zheng, B., Yu, B., Li, C., Liu, D., Huang, F., Wei, H., Lin, H., Yang, J., Tu, J., Zhang, J., Yang, J., Yang, J., Zhou, J., Lin, J., Dang, K., Lu, K., Bao, K., Yang, K., Yu, L., Li, M., Xue, M., Zhang, P., Zhu, Q., Men, R., Lin, R., Li, T., Xia, T., Ren, X., Ren, X., Fan, Y., Su, Y., Zhang, Y., Wan, Y., Liu, Y., Cui, Z., Zhang, Z., and Qiu, Z. Qwen2.5 technical report. *CoRR*, abs/2412.15115, 2024a. doi: 10.48550/ARXIV.2412.15115. URL <https://doi.org/10.48550/arXiv.2412.15115>.\\n- <span id=\"page-17-4\"></span>Yang, A., Zhang, B., Hui, B., Gao, B., Yu, B., Li, C., Liu, D., Tu, J., Zhou, J., Lin, J., Lu, K., Xue, M., Lin, R., Liu, T., Ren, X., and Zhang, Z. Qwen2.5-math technical report: Toward mathematical expert model via self-improvement. *CoRR*, abs/2409.12122, 2024b. doi: 10.48550/ARXIV.2409.12122. URL <https://doi.org/10.48550/arXiv.2409.12122>.\\n- <span id=\"page-17-1\"></span>Yao, S., Zhao, J., Yu, D., Du, N., Shafran, I., Narasimhan, K. R., and Cao, Y. React: Synergizing reasoning and acting in language models. In *The Eleventh International Conference on Learning Representations, ICLR 2023, Kigali, Rwanda, May 1-5, 2023*. OpenReview.net, 2023. URL [https://openreview.net/forum?id=WE\\\\\\\\_vluYUL-X](https://openreview.net/forum?id=WE_vluYUL-X).\\n- <span id=\"page-17-10\"></span>Ye, Z., Agarwal, R., Liu, T., Joshi, R., Velury, S., Le, Q. V., Tan, Q., and Liu, Y. Evolving alignment via asymmetric self-play. *CoRR*, abs/2411.00062, 2024. doi: 10.48550/ARXIV.2411.00062. URL <https://doi.org/10.48550/arXiv.2411.00062>.\\n- <span id=\"page-17-5\"></span>Yu, Q., Zhang, Z., Zhu, R., Yuan, Y., Zuo, X., Yue, Y., Fan, T., Liu, G., Liu, L., Liu, X., Lin, H., Lin, Z., Ma, B., Sheng, G., Tong, Y., Zhang, C., Zhang, M., Zhang, W., Zhu, H., Zhu, J., Chen, J., Chen, J., Wang, C., Yu, H., Dai, W., Song, Y., Wei, X., Zhou, H., Liu, J., Ma, W., Zhang, Y., Yan, L., Qiao, M., Wu, Y., and Wang, M. DAPO: an open-source LLM reinforcement learning system at scale. *CoRR*, abs/2503.14476, 2025. doi: 10.48550/ARXIV.2503.14476. URL <https://doi.org/10.48550/arXiv.2503.14476>.\\n- <span id=\"page-17-9\"></span>Yuan, W., Pang, R. Y., Cho, K., Li, X., Sukhbaatar, S., Xu, J., and Weston, J. Self-rewarding language models. *URL https://arxiv. org/abs/2401.10020*, 2024.\\n- <span id=\"page-17-6\"></span>Yuan, Y., Yu, Q., Zuo, X., Zhu, R., Xu, W., Chen, J., Wang, C., Fan, T., Du, Z., Wei, X., et al. Vapo: Efficient and reliable reinforcement learning for advanced reasoning tasks. *arXiv preprint arXiv:2504.05118*, 2025.\\n- <span id=\"page-17-2\"></span>Yue, Y., Lu, R., Kang, B., Song, S., and Huang, G. Understanding, predicting and better resolving q-value divergence in offline-rl. *Advances in Neural Information Processing Systems*, 36:60247\u201360277, 2023.\\n- <span id=\"page-17-12\"></span>Yue, Y., Wang, Y., Kang, B., Han, Y., Wang, S., Song, S., Feng, J., and Huang, G. Deer-vla: Dynamic inference of multimodal large language models for efficient robot execution. In Globersons, A., Mackey, L., Belgrave, D., Fan, A., Paquet, U., Tomczak, J. M., and Zhang, C. (eds.), *Advances in Neural Information Processing Systems 38: Annual Conference on Neural Information Processing Systems 2024, NeurIPS 2024, Vancouver, BC, Canada, December 10 - 15, 2024*, 2024. URL [http://papers.nips.cc/paper\\\\\\\\_](http://papers.nips.cc/paper_files/paper/2024/hash/67b0e7c7c2a5780aeefe3b79caac106e-Abstract-Conference.html) [files/paper/2024/hash/67b0e7c7c2a5780aeefe3b79caac106e-Abstract-Conference.html](http://papers.nips.cc/paper_files/paper/2024/hash/67b0e7c7c2a5780aeefe3b79caac106e-Abstract-Conference.html).\\n- <span id=\"page-17-0\"></span>Yue, Y., Chen, Z., Lu, R., Zhao, A., Wang, Z., Yue, Y., Song, S., and Huang, G. Does reinforcement learning really incentivize reasoning capacity in llms beyond the base model?, 2025. URL <https://arxiv.org/abs/2504.13837>.\\n- <span id=\"page-17-16\"></span>Zelikman, E., Wu, Y., Mu, J., and Goodman, N. Star: Bootstrapping reasoning with reasoning. *Advances in Neural Information Processing Systems*, 35:15476\u201315488, 2022.\\n- <span id=\"page-18-5\"></span>Zeng, H., Jiang, D., Wang, H., Nie, P., Chen, X., and Chen, W. ACECODER: acing coder RL via automated test-case synthesis. *CoRR*, abs/2502.01718, 2025a. doi: 10.48550/ARXIV.2502.01718. URL <https://doi.org/10.48550/arXiv.2502.01718>.\\n- <span id=\"page-18-1\"></span>Zeng, W., Huang, Y., Liu, Q., Liu, W., He, K., Ma, Z., and He, J. Simplerl-zoo: Investigating and taming zero reinforcement learning for open base models in the wild. *CoRR*, abs/2503.18892, 2025b. doi: 10.48550/ARXIV.2503.18892. URL [https:](https://doi.org/10.48550/arXiv.2503.18892) [//doi.org/10.48550/arXiv.2503.18892](https://doi.org/10.48550/arXiv.2503.18892).\\n- <span id=\"page-18-0\"></span>Zhang, C., Deng, Y., Lin, X., Wang, B., Ng, D., Ye, H., Li, X., Xiao, Y., Mo, Z., Zhang, Q., et al. 100 days after deepseek-r1: A survey on replication studies and more directions for reasoning language models. *arXiv preprint arXiv:2505.00551*, 2025a.\\n- <span id=\"page-18-7\"></span>Zhang, Q., Wu, H., Zhang, C., Zhao, P., and Bian, Y. Right question is already half the answer: Fully unsupervised llm reasoning incentivization, 2025b. URL <https://arxiv.org/abs/2504.05812>.\\n- <span id=\"page-18-3\"></span>Zhang, Y. and Yang, Q. A survey on multi-task learning. *IEEE transactions on knowledge and data engineering*, 34(12):5586\u20135609, 2021.\\n- <span id=\"page-18-4\"></span>Zhao, A., Lin, M. G., Li, Y., Liu, Y., and Huang, G. A mixture of surprises for unsupervised reinforcement learning. In Koyejo, S., Mohamed, S., Agarwal, A., Belgrave, D., Cho, K., and Oh, A. (eds.), *Advances in Neural Information Processing Systems 35: Annual Conference on Neural Information Processing Systems 2022, NeurIPS 2022, New Orleans, LA, USA, November 28 - December 9, 2022*, 2022. URL [http://papers.nips.cc/paper\\\\\\\\_files/paper/2022/hash/](http://papers.nips.cc/paper_files/paper/2022/hash/a7667ee5d545a43d2f0fda98863c260e-Abstract-Conference.html) [a7667ee5d545a43d2f0fda98863c260e-Abstract-Conference.html](http://papers.nips.cc/paper_files/paper/2022/hash/a7667ee5d545a43d2f0fda98863c260e-Abstract-Conference.html).\\n- <span id=\"page-18-10\"></span>Zhao, A., Huang, D., Xu, Q., Lin, M., Liu, Y., and Huang, G. Expel: LLM agents are experiential learners. In Wooldridge, M. J., Dy, J. G., and Natarajan, S. (eds.), *Thirty-Eighth AAAI Conference on Artificial Intelligence, AAAI 2024, Thirty-Sixth Conference on Innovative Applications of Artificial Intelligence, IAAI 2024, Fourteenth Symposium on Educational Advances in Artificial Intelligence, EAAI 2014, February 20-27, 2024, Vancouver, Canada*, pp. 19632\u201319642. AAAI Press, 2024. doi: 10.1609/AAAI.V38I17.29936. URL <https://doi.org/10.1609/aaai.v38i17.29936>.\\n- <span id=\"page-18-2\"></span>Zhao, A., Xu, Q., Lin, M., Wang, S., Liu, Y., Zheng, Z., and Huang, G. Diver-ct: Diversity-enhanced red teaming large language model assistants with relaxing constraints. In Walsh, T., Shah, J., and Kolter, Z. (eds.), *AAAI-25, Sponsored by the Association for the Advancement of Artificial Intelligence, February 25 - March 4, 2025, Philadelphia, PA, USA*, pp. 26021\u201326030. AAAI Press, 2025a. doi: 10.1609/AAAI.V39I24.34797. URL <https://doi.org/10.1609/aaai.v39i24.34797>.\\n- <span id=\"page-18-6\"></span>Zhao, A., Zhu, E., Lu, R., Lin, M., Liu, Y., and Huang, G. Self-referencing agents for unsupervised reinforcement learning. *Neural Networks*, 188:107448, 2025b. doi: 10.1016/J.NEUNET.2025.107448. URL [https://doi.org/10.1016/j.neunet.2025.](https://doi.org/10.1016/j.neunet.2025.107448) [107448](https://doi.org/10.1016/j.neunet.2025.107448).\\n- <span id=\"page-18-9\"></span>Zitkovich, B., Yu, T., Xu, S., Xu, P., Xiao, T., Xia, F., Wu, J., Wohlhart, P., Welker, S., Wahid, A., Vuong, Q., Vanhoucke, V., Tran, H. T., Soricut, R., Singh, A., Singh, J., Sermanet, P., Sanketi, P. R., Salazar, G., Ryoo, M. S., Reymann, K., Rao, K., Pertsch, K., Mordatch, I., Michalewski, H., Lu, Y., Levine, S., Lee, L., Lee, T. E., Leal, I., Kuang, Y., Kalashnikov, D., Julian, R., Joshi, N. J., Irpan, A., Ichter, B., Hsu, J., Herzog, A., Hausman, K., Gopalakrishnan, K., Fu, C., Florence, P., Finn, C., Dubey, K. A., Driess, D., Ding, T., Choromanski, K. M., Chen, X., Chebotar, Y., Carbajal, J., Brown, N., Brohan, A., Arenas, M. G., and Han, K. RT-2: vision-language-action models transfer web knowledge to robotic control. In Tan, J., Toussaint, M., and Darvish, K. (eds.), *Conference on Robot Learning, CoRL 2023, 6-9 November 2023, Atlanta, GA, USA*, volume 229 of *Proceedings of Machine Learning Research*, pp. 2165\u20132183. PMLR, 2023. URL <https://proceedings.mlr.press/v229/zitkovich23a.html>.\\n- <span id=\"page-18-8\"></span>Zuo, Y., Zhang, K., Qu, S., Sheng, L., Zhu, X., Qi, B., Sun, Y., Cui, G., Ding, N., and Zhou, B. Ttrl: Test-time reinforcement learning, 2025. URL <https://arxiv.org/abs/2504.16084>.\\n\\n# **Appendix**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Appendix**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n# **Appendix Contents**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Appendix Contents**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n| A | Reinforcement Learning with Verifiable Rewards.                         |    |  |  |  |  |  |\\n|---|-------------------------------------------------------------------------|----|--|--|--|--|--|\\n| B | Implementation Details                                                  |    |  |  |  |  |  |\\n| C | More Results                                                            | 22 |  |  |  |  |  |\\n|   | C.1<br>Out-of-Distribution Performance Breakdown<br>.                   | 22 |  |  |  |  |  |\\n|   | C.2<br>In-Distribution Results<br>.                                     | 22 |  |  |  |  |  |\\n|   | C.3<br>Interplay Between Propose and Solve Roles<br>.                   | 22 |  |  |  |  |  |\\n|   | C.4<br>Complexity and Diversity Metrics of AZR Proposed Tasks<br>.      | 32 |  |  |  |  |  |\\n|   | C.5<br>Generated Code Complexity Dynamics Between Abd/Ded and Ind.<br>. | 32 |  |  |  |  |  |\\n| D | Alternative Approaches Considered                                       | 49 |  |  |  |  |  |\\n|   | D.1<br>Error Deduction Task<br>.                                        | 49 |  |  |  |  |  |\\n|   | D.2<br>Composite Functions as Curriculum Learning<br>.                  | 49 |  |  |  |  |  |\\n|   | D.3<br>Toying with the Initial<br>.<br>p(z)                             | 49 |  |  |  |  |  |\\n|   | D.4<br>Extra Rewards<br>.                                               | 49 |  |  |  |  |  |\\n|   | D.5<br>Environment Transition<br>.                                      | 50 |  |  |  |  |  |\\n\\nA,Reinforcement Learning with Verifiable Rewards.\\r\\nB,Implementation Details\\r\\nC,More Results,22\\r\\n,C.1 Out-of-Distribution Performance Breakdown .,22\\r\\n,C.2 In-Distribution Results .,22\\r\\n,C.3 Interplay Between Propose and Solve Roles .,22\\r\\n,C.4 Complexity and Diversity Metrics of AZR Proposed Tasks .,32\\r\\n,C.5 Generated Code Complexity Dynamics Between Abd/Ded and Ind. .,32\\r\\nD,Alternative Approaches Considered,49\\r\\n,D.1 Error Deduction Task .,49\\r\\n,D.2 Composite Functions as Curriculum Learning .,49\\r\\n,D.3 Toying with the Initial . p(z),49\\r\\n,D.4 Extra Rewards .,49\\r\\n,D.5 Environment Transition .,50\\r\\n{\\n \"headers\": [\\n \"A\",\\n \"Reinforcement Learning with Verifiable Rewards.\"\\n ],\\n \"rows\": [\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"C.2 In-Distribution Results .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"C.3 Interplay Between Propose and Solve Roles .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"C.4 Complexity and Diversity Metrics of AZR Proposed Tasks .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.1 Error Deduction Task .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.2 Composite Functions as Curriculum Learning .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.3 Toying with the Initial . p(z)\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.4 Extra Rewards .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.5 Environment Transition .\"\\n }\\n ]\\n}# <span id=\"page-20-0\"></span>**A. Reinforcement Learning with Verifiable Rewards.**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-20-0\\\\\"></span>**A. Reinforcement Learning with Verifiable Rewards.**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe use reinforcement learning to update our learner LLM, rewarding it based on a task-specific reward function *r<sup>f</sup>* , where the subscript *f* indicates the task. The goal of the RL agent is to maximize the expected discounted sum of rewards. We adopt an online variant of RL, REINFORCE++, which is optimized using the original PPO objective:\\n\\n$$\\\\mathcal{L}\\\\_{\\\\text{PFO}}(\\\\theta) = \\\\mathbb{E}\\\\_{q \\\\sim P(Q), \\\\ o \\\\sim \\\\pi\\\\_{\\\\theta\\\\_{\\\\text{old}}}(O|q)} \\\\left[ \\\\frac{1}{|o|} \\\\sum\\\\_{t=1}^{|o|} \\\\min \\\\left( s\\\\_t(\\\\theta) A\\\\_{f,q}^{\\\\text{norm}}, \\\\ \\\\text{clip} \\\\left( s\\\\_t(\\\\theta), 1 - \\\\epsilon, 1 + \\\\epsilon \\\\right) A\\\\_{f,q}^{\\\\text{norm}} \\\\right) \\\\right],\\\\tag{9}$$\\n\\nwhere *st*(*\u03b8*) is the probability ratio between the new and old policies at timestep *t*, and *A* norm *f,q* is the normalized advantage.\\n\\nREINFORCE++ computes the normalized advantage as:\\n\\n$$A\\\\_{f,q}^{\\\\text{norm}} = \\\\frac{r\\\\_{f,q} - \\\\text{mean}(\\\\{A\\\\_{f,q}\\\\}^B)}{\\\\text{std}(\\\\{A\\\\_{f,q}\\\\}^B)},\\\\tag{10}$$\\n\\nwhere *rf,q* is the outcome reward for question *q*, task *f*, mean and std are calculated across the global batch with batch size *B*. Note that we do not apply any KL penalty to the loss or reward.\\n\\n# <span id=\"page-20-2\"></span>**B. Implementation Details**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-20-2\\\\\"></span>**B. Implementation Details**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe built Absolute Zero Reasoner upon the [veRL codebase](https://github.com/volcengine/verl) [\\\\(Sheng et al.,](#page-16-16) [2025\\\\)](#page-16-16). For code execution, we incorporated components from the [QwQ Python executor.](https://github.com/QwenLM/QwQ/blob/main/eval/eval/math_opensource_utils/python_executor.py) For safer code execution, we recommend using API-based services such as [E2B](https://e2b.dev/) instead.\\n\\nAll experiments were conducted on clusters of A800 GPUs.\\n\\n**Training Hyperparameters.** We show the hyperparameters used in our training in Table [3.](#page-20-1) We do not change them for any of the runs.\\n\\n| Parameter                              | Value                    |  |  |  |  |  |\\n|----------------------------------------|--------------------------|--|--|--|--|--|\\n| Model Configuration                    |                          |  |  |  |  |  |\\n| Max Prompt Length                      | 6144                     |  |  |  |  |  |\\n| Max Response Length                    | 8096                     |  |  |  |  |  |\\n| Seed Batch Factor                      | 4                        |  |  |  |  |  |\\n| Max Programs                           | 16384                    |  |  |  |  |  |\\n| Training Settings                      |                          |  |  |  |  |  |\\n| Train Batch Size                       | 64 * 6                   |  |  |  |  |  |\\n| Learning Rate                          | 1e-6                     |  |  |  |  |  |\\n| Optimizer                              | AdamW                    |  |  |  |  |  |\\n| Grad Clip                              | 1.0                      |  |  |  |  |  |\\n| Total Steps                            | 500                      |  |  |  |  |  |\\n| RL Settings                            |                          |  |  |  |  |  |\\n| Algorithm                              | TRR++ (Section<br>3.3.5) |  |  |  |  |  |\\n| KL Loss                                | False                    |  |  |  |  |  |\\n| KL Reward                              | False                    |  |  |  |  |  |\\n| Entropy Coefficient                    | 0.001                    |  |  |  |  |  |\\n| PPO Epochs                             | 1                        |  |  |  |  |  |\\n| Rollouts<br>N                          | 1                        |  |  |  |  |  |\\n| Rollout Temperature                    | 1.0                      |  |  |  |  |  |\\n| Rollout Top-P                          | 1.0                      |  |  |  |  |  |\\n| References<br>K                        | 6                        |  |  |  |  |  |\\n| Samples to Estimate Task Accuracy<br>N | 8                        |  |  |  |  |  |\\n\\nParameter,Value\\r\\nModel Configuration\\r\\nMax Prompt Length,6144\\r\\nMax Response Length,8096\\r\\nSeed Batch Factor,4\\r\\nMax Programs,16384\\r\\nTraining Settings\\r\\nTrain Batch Size,64 \\\\* 6\\r\\nLearning Rate,1e-6\\r\\nOptimizer,AdamW\\r\\nGrad Clip,1.0\\r\\nTotal Steps,500\\r\\nRL Settings\\r\\nAlgorithm,TRR++ (Section 3.3.5)\\r\\nKL Loss,False\\r\\nKL Reward,False\\r\\nEntropy Coefficient,0.001\\r\\nPPO Epochs,1\\r\\nRollouts N,1\\r\\nRollout Temperature,1.0\\r\\nRollout Top-P,1.0\\r\\nReferences K,6\\r\\nSamples to Estimate Task Accuracy N,8\\r\\n{\\n \"headers\": [\\n \"Parameter\",\\n \"Value\"\\n ],\\n \"rows\": [\\n {\\n \"Parameter\": \"Model Configuration\"\\n },\\n {\\n \"Parameter\": \"Max Prompt Length\",\\n \"Value\": \"6144\"\\n },\\n {\\n \"Parameter\": \"Max Response Length\",\\n \"Value\": \"8096\"\\n },\\n {\\n \"Parameter\": \"Seed Batch Factor\",\\n \"Value\": \"4\"\\n },\\n {\\n \"Parameter\": \"Max Programs\",\\n \"Value\": \"16384\"\\n },\\n {\\n \"Parameter\": \"Training Settings\"\\n },\\n {\\n \"Parameter\": \"Train Batch Size\",\\n \"Value\": \"64 \\\\* 6\"\\n },\\n {\\n \"Parameter\": \"Learning Rate\",\\n \"Value\": \"1e-6\"\\n },\\n {\\n \"Parameter\": \"Optimizer\",\\n \"Value\": \"AdamW\"\\n },\\n {\\n \"Parameter\": \"Grad Clip\",\\n \"Value\": \"1.0\"\\n },\\n {\\n \"Parameter\": \"Total Steps\",\\n \"Value\": \"500\"\\n },\\n {\\n \"Parameter\": \"RL Settings\"\\n },\\n {\\n \"Parameter\": \"Algorithm\",\\n \"Value\": \"TRR++ (Section 3.3.5)\"\\n },\\n {\\n \"Parameter\": \"KL Loss\",\\n \"Value\": \"False\"\\n },\\n {\\n \"Parameter\": \"KL Reward\",\\n \"Value\": \"False\"\\n },\\n {\\n \"Parameter\": \"Entropy Coefficient\",\\n \"Value\": \"0.001\"\\n },\\n {\\n \"Parameter\": \"PPO Epochs\",\\n \"Value\": \"1\"\\n },\\n {\\n \"Parameter\": \"Rollouts N\",\\n \"Value\": \"1\"\\n },\\n {\\n \"Parameter\": \"Rollout Temperature\",\\n \"Value\": \"1.0\"\\n },\\n {\\n \"Parameter\": \"Rollout Top-P\",\\n \"Value\": \"1.0\"\\n },\\n {\\n \"Parameter\": \"References K\",\\n \"Value\": \"6\"\\n },\\n {\\n \"Parameter\": \"Samples to Estimate Task Accuracy N\",\\n \"Value\": \"8\"\\n }\\n ]\\n}<span id=\"page-20-1\"></span>*Table 3.* **Hyperparameters Used During AZR Self-play Training.**\\n\\n| Absolute Zero: Reinforced Self-play Reasoning with Zero Data |  |  |  |  |  |  |\\n|--------------------------------------------------------------|--|--|--|--|--|--|\\n|--------------------------------------------------------------|--|--|--|--|--|--|\\n\\nAbsolute Zero: Reinforced Self-play Reasoning with Zero Data,,,,,,\\r\\n{\\n \"headers\": [\\n \"Absolute Zero: Reinforced Self-play Reasoning with Zero Data\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\"\\n ],\\n \"rows\": []\\n}\\n\\n| Model                                           | Data Curation                                     | Base Model             |  |\\n|-------------------------------------------------|---------------------------------------------------|------------------------|--|\\n| Oat-7B (Liu et al.,<br>2025)                    | 8.5k math pairs (Hendrycks et al.,<br>2021)       | Qwen2.5-7B-Math        |  |\\n| SimpleRL-Zoo (Zeng et al.,<br>2025b)            | 8.5k math pairs (Hendrycks et al.,<br>2021)       | Qwen2.5-7B-Base        |  |\\n| OpenReasonerZero (Hu et al.,<br>2025)           | 57k STEM + math samples                           | Qwen2.5-7B-Base        |  |\\n| PRIME-Zero (Cui et al.,<br>2025)                | 457k math + 27k code problems                     | Qwen2.5Math-7B-Base    |  |\\n| CodeR1-Zero-7B-LC2k-1088 (Liu & Zhang,<br>2025) | 2k Leetcode pairs                                 | Qwen2.5-7B-Instruct-1M |  |\\n| CodeR1-Zero-7B-12k-832 (Liu & Zhang,<br>2025)   | 2k Leetcode + 10k TACO pairs (Li et al.,<br>2023) | Qwen2.5-7B-Instruct-1M |  |\\n| AceCoder-7B-Ins-RM (Zeng et al.,<br>2025a)      | 22k code data                                     | Qwen2.5-7B-Instruct    |  |\\n| AceCoder-7B-Ins-Rule (Zeng et al.,<br>2025a)    | 22k code data                                     | Qwen2.5-7B-Instruct    |  |\\n| AceCoder-7B-Code-RM (Zeng et al.,<br>2025a)     | 22k code data                                     | Qwen2.5-7B-Coder       |  |\\n| AceCoder-7B-Code-Rule (Zeng et al.,<br>2025a)   | 22k code data                                     | Qwen2.5-7B-Coder       |  |\\n| Qwen-7B-Instruct (Yang et al.,<br>2024a)        | 1M SFT + 150k RL pairs                            | Qwen2.5-7B-Base        |  |\\n| AZR-7B (Ours)                                   | No data                                           | Qwen2.5-7B-Base        |  |\\n| AZR-7B-Coder (Ours)                             | No data                                           | Qwen2.5-7B-Coder       |  |\\n\\nModel,Data Curation,Base Model\\r\\n\"Oat-7B (Liu et al., 2025)\",\"8.5k math pairs (Hendrycks et al., 2021)\",Qwen2.5-7B-Math\\r\\n\"SimpleRL-Zoo (Zeng et al., 2025b)\",\"8.5k math pairs (Hendrycks et al., 2021)\",Qwen2.5-7B-Base\\r\\n\"OpenReasonerZero (Hu et al., 2025)\",57k STEM + math samples,Qwen2.5-7B-Base\\r\\n\"PRIME-Zero (Cui et al., 2025)\",457k math + 27k code problems,Qwen2.5Math-7B-Base\\r\\n\"CodeR1-Zero-7B-LC2k-1088 (Liu & Zhang, 2025)\",2k Leetcode pairs,Qwen2.5-7B-Instruct-1M\\r\\n\"CodeR1-Zero-7B-12k-832 (Liu & Zhang, 2025)\",\"2k Leetcode + 10k TACO pairs (Li et al., 2023)\",Qwen2.5-7B-Instruct-1M\\r\\n\"AceCoder-7B-Ins-RM (Zeng et al., 2025a)\",22k code data,Qwen2.5-7B-Instruct\\r\\n\"AceCoder-7B-Ins-Rule (Zeng et al., 2025a)\",22k code data,Qwen2.5-7B-Instruct\\r\\n\"AceCoder-7B-Code-RM (Zeng et al., 2025a)\",22k code data,Qwen2.5-7B-Coder\\r\\n\"AceCoder-7B-Code-Rule (Zeng et al., 2025a)\",22k code data,Qwen2.5-7B-Coder\\r\\n\"Qwen-7B-Instruct (Yang et al., 2024a)\",1M SFT + 150k RL pairs,Qwen2.5-7B-Base\\r\\nAZR-7B (Ours),No data,Qwen2.5-7B-Base\\r\\nAZR-7B-Coder (Ours),No data,Qwen2.5-7B-Coder\\r\\n{\\n \"headers\": [\\n \"Model\",\\n \"Data Curation\",\\n \"Base Model\"\\n ],\\n \"rows\": [\\n {\\n \"Model\": \"Oat-7B (Liu et al., 2025)\",\\n \"Data Curation\": \"8.5k math pairs (Hendrycks et al., 2021)\",\\n \"Base Model\": \"Qwen2.5-7B-Math\"\\n },\\n {\\n \"Model\": \"SimpleRL-Zoo (Zeng et al., 2025b)\",\\n \"Data Curation\": \"8.5k math pairs (Hendrycks et al., 2021)\",\\n \"Base Model\": \"Qwen2.5-7B-Base\"\\n },\\n {\\n \"Model\": \"OpenReasonerZero (Hu et al., 2025)\",\\n \"Data Curation\": \"57k STEM + math samples\",\\n \"Base Model\": \"Qwen2.5-7B-Base\"\\n },\\n {\\n \"Model\": \"PRIME-Zero (Cui et al., 2025)\",\\n \"Data Curation\": \"457k math + 27k code problems\",\\n \"Base Model\": \"Qwen2.5Math-7B-Base\"\\n },\\n {\\n \"Model\": \"CodeR1-Zero-7B-LC2k-1088 (Liu & Zhang, 2025)\",\\n \"Data Curation\": \"2k Leetcode pairs\",\\n \"Base Model\": \"Qwen2.5-7B-Instruct-1M\"\\n },\\n {\\n \"Model\": \"CodeR1-Zero-7B-12k-832 (Liu & Zhang, 2025)\",\\n \"Data Curation\": \"2k Leetcode + 10k TACO pairs (Li et al., 2023)\",\\n \"Base Model\": \"Qwen2.5-7B-Instruct-1M\"\\n },\\n {\\n \"Model\": \"AceCoder-7B-Ins-RM (Zeng et al., 2025a)\",\\n \"Data Curation\": \"22k code data\",\\n \"Base Model\": \"Qwen2.5-7B-Instruct\"\\n },\\n {\\n \"Model\": \"AceCoder-7B-Ins-Rule (Zeng et al., 2025a)\",\\n \"Data Curation\": \"22k code data\",\\n \"Base Model\": \"Qwen2.5-7B-Instruct\"\\n },\\n {\\n \"Model\": \"AceCoder-7B-Code-RM (Zeng et al., 2025a)\",\\n \"Data Curation\": \"22k code data\",\\n \"Base Model\": \"Qwen2.5-7B-Coder\"\\n },\\n {\\n \"Model\": \"AceCoder-7B-Code-Rule (Zeng et al., 2025a)\",\\n \"Data Curation\": \"22k code data\",\\n \"Base Model\": \"Qwen2.5-7B-Coder\"\\n },\\n {\\n \"Model\": \"Qwen-7B-Instruct (Yang et al., 2024a)\",\\n \"Data Curation\": \"1M SFT + 150k RL pairs\",\\n \"Base Model\": \"Qwen2.5-7B-Base\"\\n },\\n {\\n \"Model\": \"AZR-7B (Ours)\",\\n \"Data Curation\": \"No data\",\\n \"Base Model\": \"Qwen2.5-7B-Base\"\\n },\\n {\\n \"Model\": \"AZR-7B-Coder (Ours)\",\\n \"Data Curation\": \"No data\",\\n \"Base Model\": \"Qwen2.5-7B-Coder\"\\n }\\n ]\\n}<span id=\"page-21-1\"></span>*Table 4.* **Reasoner Training Data Source and Base Model.**\\n\\n| logging   | random   | multiprocessing | pebble   | subprocess |\\n|-----------|----------|-----------------|----------|------------|\\n| threading | datetime | time            | hashlib  | calendar   |\\n| bcrypt    | os.sys   | os.path         | sys.exit | os.environ |\\n\\nlogging,random,multiprocessing,pebble,subprocess\\r\\nthreading,datetime,time,hashlib,calendar\\r\\nbcrypt,os.sys,os.path,sys.exit,os.environ\\r\\n{\\n \"headers\": [\\n \"logging\",\\n \"random\",\\n \"multiprocessing\",\\n \"pebble\",\\n \"subprocess\"\\n ],\\n \"rows\": [\\n {\\n \"logging\": \"threading\",\\n \"random\": \"datetime\",\\n \"multiprocessing\": \"time\",\\n \"pebble\": \"hashlib\",\\n \"subprocess\": \"calendar\"\\n },\\n {\\n \"logging\": \"bcrypt\",\\n \"random\": \"os.sys\",\\n \"multiprocessing\": \"os.path\",\\n \"pebble\": \"sys.exit\",\\n \"subprocess\": \"os.environ\"\\n }\\n ]\\n}<span id=\"page-21-0\"></span>*Figure 8.* **Forbidden Python Modules.** List of Python modules forbidden to exist in proposed tasks\\' programs.\\n\\n# <span id=\"page-21-2\"></span>**C. More Results**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n### <span id=\"page-21-3\"></span>**C.1. Out-of-Distribution Performance Breakdown**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-21-3\\\\\"></span>**C.1. Out-of-Distribution Performance Breakdown**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe plot the out-of-distribution performance, broken down by each benchmark and in aggregate, across training steps for our 7B, 7B-Coder, 14B, and 14B-Coder models in Figures [28](#page-34-0) to [31.](#page-37-1) We observe a strong correlation between training using AZR and improvements in both mathematical and coding reasoning capabilities. Moreover, our models are trained for more steps than typical zero-style reasoners; while overfitting can occur with static datasets, it is less likely in AZR due to dynamically proposed tasks.\\n\\n### <span id=\"page-21-4\"></span>**C.2. In-Distribution Results**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-21-4\\\\\"></span>**C.2. In-Distribution Results**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nSince we have defined the task domains as input prediction and output prediction, we can directly evaluate our model\\'s capabilities in these areas using popular code reasoning benchmarks: CruxEval-I(nput), CruxEval-O(utput), and LiveCodeBench-Execution (LCB-E) [\\\\(Gu](#page-14-7) [et al.,](#page-14-7) [2024;](#page-14-7) [Jain et al.,](#page-14-4) [2024\\\\)](#page-14-4), where CruxEval-O and LCB-E is solving the deduction task, and CruxEval-I is solving the abduction task. In Figure [14,](#page-22-2) we visualize the evolution of these metrics during the training of Absolute Zero Reasoner-base-7b. As training progresses, we observe a consistent improvement in in-distribution performance across steps. While these three benchmark curves do not perfectly correlate with broader coding or math reasoning capabilities (compare this with Figure [28\\\\)](#page-34-0), they serve as useful proxies for tracking task-specific progress.\\n\\n### <span id=\"page-21-5\"></span>**C.3. Interplay Between Propose and Solve Roles**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-21-5\\\\\"></span>**C.3. Interplay Between Propose and Solve Roles**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe visualize the training dynamics between the propose and solve roles over training steps in Figures [15](#page-23-0) to [17.](#page-24-1) We observe that, in general, the solve roles produce more output tokens than the propose role. Intuitively, this makes sense: the propose role emphasizes creativity and generation of novel tasks, whereas the solve role requires deeper reasoning, which naturally leads to longer outputs.\\n\\nInterestingly, we also observe a consistent ordering in token length across reasoning types\u2014abduction and deduction tasks tend to result in shorter outputs than induction tasks during problem solving. This aligns with our intuition, as we observed the model engaging in trial-and-error reasoning\u2014repeatedly generating hypothesized inputs, evaluating their outcomes, and reflecting and retrying when subsequent deductions fail to produce the correct output. To our knowledge, this is the first time such a clear distinction in token length\\n\\n```\\n```python\\n1 VALIDATE_CODE_TEMPLATE = \"\"\"{ code }\\n2 repr (f({ inputs }))\"\"\"\\n3\\n4 exec ( VALIDATE_CODE_TEMPLATE )\\n```\\n```\\n\\n```\\n```python\\n1 EVAL_INPUT_PREDICTION_TEMPLATE = \"\"\" { code }\\n2 { gold_output } == f({ agent_input }) \"\"\"\\n3\\n4 exec ( EVAL_INPUT_PREDICTION_TEMPLATE )\\n```\\n```\\n<span id=\"page-22-0\"></span>*Figure 10.* **Python Code to Check Agent Input Abduction Correctness.**\\n\\n```\\n```python\\n1 EVAL_OUTPUT_PREDICTION_TEMPLATE = \"\"\" { code }\\n2 eval ({ gold_output }) == eval ({ agent_output }) \"\"\"\\n3\\n4 exec ( EVAL_OUTPUT_PREDICTION_TEMPLATE )\\n```\\n```\\n*Figure 11.* **Python Code to Check Agent Output Deduction Correctness.**\\n\\n```\\n```python\\n1 EVAL_FUNCTION_PREDICTION_TEMPLATE = \"\"\"{ code }\\n2 matches = []\\n3 for gold_input , gold_output in zip ({ gold_inputs } , { gold_outputs }):\\n4 match = { gold_output } == f({ gold_input })\\n5 matches . append ( match )\\n6 \"\"\"\\n7\\n8 exec ( EVAL_OUTPUT_PREDICTION_TEMPLATE )\\n```\\n```\\n<span id=\"page-22-1\"></span>*Figure 12.* **Python Code to Check Agent Function Induction Correctness.**\\n\\n```\\n```python\\n1 CHECK_DETERMINISM_TEMPLATE = \"\"\"{ code }\\n2 returns = f({ inputs })\\n3 if returns != f({ inputs }):\\n4 raise Exception ( \\'Non - deterministic code \\')\\n5 repr ( returns ) \"\"\"\\n6\\n7 exec ( CHECK_DETERMINISM_TEMPLATE )\\n```\\n```\\n![](_page_22_Figure_8.jpeg)\\n\\n*Figure 13.* **Python Code to Check Deterministic Program.**\\n\\n<span id=\"page-22-2\"></span>*Figure 14.* **In-distribution Benchmark Score During Training.** The evolution of CruxEval-I, CruxEval-O, and LiveCodeBench-Execution during training for the Qwen2.5-7B base model trained using AZR.\\n\\n![](_page_23_Figure_1.jpeg)\\n\\n<span id=\"page-23-0\"></span>*Figure 15.* **Abduction Task Reward and Token Lengths.** The task reward and token lengths of the two roles for abduction task type of Absolute Zero Reasoner-base-7b.\\n\\n![](_page_23_Figure_3.jpeg)\\n\\n*Figure 16.* **Induction Task Reward and Token Lengths.** The task reward and token lengths of the two roles for induction task type of Absolute Zero Reasoner-base-7b.\\n\\n![](_page_24_Figure_1.jpeg)\\n\\n<span id=\"page-24-1\"></span>*Figure 17.* **Deduction Task Reward and Token Lengths.** The task reward and token lengths of the two roles for deduction task type of Absolute Zero Reasoner-base-7b. Figure 17. **Deduction Task Reward and Token Lengths.** The task reward and token lengths of the two roles for deduction task type of Absolute Zero Reasoner-base-7b.\\n\\n![](_page_24_Figure_3.jpeg)\\n\\n<span id=\"page-24-0\"></span>Figure 18. An example response of proposing a deduction task. k programs are selected as few-shot examples to the model. The generated new program will then be verifed through execution. *Figure 18.* **Propose Deduction Task Example.** An example response of proposing a deduction task. k programs are selected as few-shot examples to the model. The generated new program will then be verified through execution.\\n\\n```\\n```python\\ndef f(numbers):\\n    # Step 1: Filter out even numbers\\n    filtered_numbers = [num for num in numbers if num % 2 != 0]\\n    # Step 2: Calculate the sum of the remaining odd numbers\\n    sum_of_odd_numbers = sum(filtered_numbers)\\n    # Step 3: Reverse the order of the remaining odd numbers\\n    reversed_odd_numbers = filtered_numbers[::-1]\\n    # Step 4: Calculate the product of the reversed odd numbers\\n    product_of_reversed_odd_numbers = 1\\n    for num in reversed_odd_numbers:\\n        product_of_reversed_odd_numbers *= num\\n    # Step 5: Calculate the sum of the digits of the product\\n    sum_of_digits_of_product = sum(int(digit) for digit in str(product_of_reversed_odd_numbers))\\n    # Step 6: Modify the original list by adding the sum of the digits to each even number\\n    # and subtracting it from each odd number\\n    modified_numbers = []\\n    for num in numbers:\\n        if num % 2 == 0:\\n            modified_numbers.append(num + sum_of_digits_of_product)\\n        else:\\n            modified_numbers.append(num - sum_of_digits_of_product)\\n    # Step 7: Return the modified list\\n    return modified_numbers\\n```\\n```\\nFigure 19. **Learned \"ReAct\" style program generation.** We observe that even after outputting the CoT and during answering when the answer requires outputting code, the model usually uses comments in code to interleave its thinking and \"acting\", an example is shown here for induction task output by Absolute Zero Reasoner-Coder-14b during training. Similar observations are recently observed in much bigger models (671b) for math proofs with DeepSeek Prover [V2 \\\\(Ren et a](#page-15-3)l., 2025). *Figure 19.* **Learned \"ReAct\" style program generation.** We observe that even after outputting the CoT and during answering when the answer requires outputting code, the model usually uses comments in code to interleave its thinking and \"acting\", an example is shown here for induction task output by Absolute Zero Reasoner-Coder-14b during training. Similar observations are recently observed in much bigger models (671b) for math proofs with DeepSeek Prover V2 (Ren et al., [2025\\\\)](#page-15-3).\\n\\n#### **Task: Propose Abduction Task**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-21-5\\\\\"></span>**C.3. Interplay Between Propose and Solve Roles**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Propose Abduction Task**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n### **Model Input:** (k random selected example programs as few-shot input)\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"**Model Input:** (k random selected example programs as few-shot input)\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n# **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nFor this task, we need an intelligent problem that requires deep algorithmic reasoning and demands long multi step reasoning. A typical type of problem that fts these requirements is the Matrix Reconstruction from a given jumbled li st of elements, where we have to fgure out the matrix\\'s dimensions and individual values. However, this task will involve multiple steps, increasing its complexity and creativity. We will create a function \\'f\\' that transforms a jumbled list of elements into a two-dimensional matrix, then back to a list, given a specifc reconstruction pattern. We will retrieve the original list from the reconstructed matrix. Here, we will avoid random and datetime operations to ensure determinism. The function will be structured to reconstruct the matrix elements in a unique and challenging way. We will provide an input that, after reconstruction, presents a unique list that can be easily deduced from the given output in a test piece.\\n\\n```\\n```python\\ndef f(jumbled_elements: list) -> list:\\n    if not jumbled_elements:\\n        return []\\n    # Calculate the square root of the length of elements to estimate the matrix dimensions\\n    n = len(jumbled_elements)\\n    sqrt_n = int(n ** 0.5)\\n    if n > sqrt_n ** 2:\\n        sqrt_n += 1\\n    if n < sqrt_n ** 2:\\n        sqrt_n -= 1\\n    # Now, we need to reconstruct the matrix elements in a challenging way using specific patterns\\n    # For this, we can reconstruct the matrix using zigzag patterns or hill-climbing patterns\\n    # Here, a hill-climbing pattern is used where we traverse the matrix from the extreme\\n    # right and downward Then traverse the matrix from the second to last element to the\\n    # extreme bottom. Repeat the process until the entire matrix is traversed.\\n    # Initialize the matrix\\n    matrix = [[0 for _ in range(sqrt_n)] for _ in range(sqrt_n)]\\n    cur_idx = 0\\n    # Fill the matrix in a zigzag pattern\\n    for i in range(sqrt_n):\\n        if i % 2 == 0:\\n            for j in range(sqrt_n):\\n                matrix[j][i] = j * sqrt_n + i + cur_idx\\n                cur_idx += 1\\n        else:\\n            for j in range(sqrt_n - 1, -1, -1):\\n                matrix[j][i] = j * sqrt_n + n - i - cur_idx - 1\\n                cur_idx += 1\\n    # Reconstruct the list into a matrix by repeating the process\\n    reconstructed_list = []\\n    for i in range(sqrt_n):\\n        for j in range(sqrt_n):\\n            reconstructed_list.append(matrix[i][j])\\n    # Now, we need to calculate another matrix based on a function F applied to the current matrix\\n    # F is a mathematical function that can be complex, such as factorial, prime check,\\n    # or another transformation For example, transform each element by adding 1 if it\\'s prime,\\n    # subtracting 1 if it\\'s even, or leaving it unchanged, Implement any specific transformation\\n    # function here. Here, for demonstration, each element is left unchanged\\n    transformed_result = reconstructed_list\\n    return transformed_result\\nOutput: [0, 11, 10, 1, 5, 16, 15, 6, 10, 21, 20, 11, 15, 26, 25, 16]\\n```\\n```\\n<span id=\"page-26-0\"></span>Figure 20. An example response of proposing an abduction task. The model uses comments as reasoning when generating the program. 26 *Figure 20.* **Propose Abduction Task Example.** An example response of proposing an abduction task. The model uses comments as reasoning when generating the program.\\n\\n#### **Task: Propose Induction Task**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Propose Induction Task**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Input:** Here is the function f. Analyze its behaviour and relate it to the observed inputs/outputs.\\n\\n```\\n```yaml\\ndef f(numbers: list[int]) -> int:\\n    replacement = {\\n        0: 2,\\n        1: 3,\\n        2: 1,\\n        3: 0,\\n        4: 4\\n    }\\n    return sum(replacement[num] for num in numbers)\\n```\\n```\\n#### **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nTo solve this task, we need to come up with 10 diferent inputs for the function f(numbers: list[int]) -> int. The function replaces each number in the list according to a specifc dictionary and then sums up the replaced numbers. Let\\'s analyze the dictionary:\\n\\nThis dictionary tells us that:\\n\\n-0 becomes 2\\n\\n-1 becomes 3\\n\\n-2 becomes 1\\n\\n-3 becomes 0\\n\\n-4 remains 4\\n\\nTo create diverse outputs, we should include lists with diferent sets of numbers from the list {0*,* 1*,* 2*,* 3*,* 4}. We also need to ensure that the inputs are valid (i.e., lists of integers).\\n\\nLet\\'s illustrate using provided examples step-by-step:\\n\\n1. Input: [0] \u21d2 Replacement: [2] \u21d2 sum = 2 2. Input: [1, 2, 3] \u21d2 Replacement: [3*,* 1*,* 0] \u21d2 sum = 4 3. Input: [4, 1] \u21d2 Replacement: [4*,* 3] \u21d2 sum = 7 4. Input: [2, 1, 0] \u21d2 Replacement: [1*,* 3*,* 2] \u21d2 sum = 6 5. Input: [3, 0, 2, 4] \u21d2 Replacement: [0*,* 2*,* 1*,* 4] \u21d2 sum = 7 6. Input: [1, 1, 1] \u21d2 Replacement: [3*,* 3*,* 3] \u21d2 sum = 9 7. Input: [2, 2, 0, 1] \u21d2 Replacement: [1*,* 1*,* 2*,* 3] \u21d2 sum = 7 8. Input: [3, 4, 2] \u21d2 Replacement: [0*,* 4*,* 1] \u21d2 sum = 5 9. Input: [0, 1, 2, 3, 4] \u21d2 Replacement: [2*,* 3*,* 1*,* 0*,* 4] \u21d2 sum = 10 10. Input: [1, 2, 3, 0, 4] \u21d2 Replacement: [3*,* 1*,* 0*,* 2*,* 4] \u21d2 sum = 10 Thus, the rule is clearly replacing numbers according to the given mapping and then summing the results. **Inputs**: [\\'[0]\\', \\'[1, 2, 3]\\', \\'[4, 1]\\', \\'[2, 1, 0]\\', \\'[3, 0, 2, 4]\\', \\'[1, 1, 1]\\', [2, 2, 0, 1], \\'[3, 4, 2]\\', \\'[0, 1, 2, 3, 4]\\', \\'[1, 2, 3, 0, 4]\\']| **Message**: You are given a function that takes a list of integers as input and returns a single integer as output. Can you determine the rule this function is following by analyzing the outputs for the given inputs? (After execution:) **Outputs**: [\\'2\\', \\'4\\', \\'7\\', \\'6\\', \\'7\\', \\'9\\', \\'7\\', \\'5\\', \\'10\\', \\'10\\']\\n\\nFigure 21. An example response of proposing an induction task. Given a random selected program, the model needs to propose 10 inputs and a description of program. These inputs will be executed and verifed to get outputs. At solve phase, the model need to generate the program given the message and 5 input/output pairs (half is hidden cases) *Figure 21.* **Propose Induction Task Example.** An example response of proposing an induction task. Given a random selected program, the model needs to propose 10 inputs and a description of program. These inputs will be executed and verified to get outputs. At solve phase, the model need to generate the program given the message and 5 input/output pairs (half is hidden cases)\\n\\n**Task: Solve Abduction Task**\\n\\n**Model Input:** Here is the function f and the output: \\'1\\', please predict the input.\\n\\n```\\n```python\\ndef f(numbers: list[int], target: int) -> int:\\n    accumulated_values = []\\n    current_sum = 0\\n    for number in numbers:\\n        current_sum += number\\n        accumulated_values.append(current_sum)\\n    result = 0\\n    for i in range(len(accumulated_values)):\\n        for j in range(i + 1, len(accumulated_values)):\\n            if accumulated_values[j] \\\\\\n                    - accumulated_values[i] == target:\\n                result = accumulated_values[i]\\n                return result\\n    return result\\n```\\n```\\n#### **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nLet\\'s analyze the code snippet to understand how the result is achieved. The function f takes a list of integers numbers and a target integer target. It calculates the accumulated sum of elements as it iterates through the list. Then, it checks for each pair of accumulated sums if their diference equals the target. If such a pair is found, it returns the accumulated sum at the frst index of the pair.\\n\\nTo fnd one possible input that produces the output 1, we need to fnd a scenario where the diference between any two accumulated\\\\_values equals the target, and the frst accumulated\\\\_values that satisfes this condition is 1. Let\\'s consider a simple example: -numbers = [1, 2] -target = 1 Here\\'s the step-by-step calculation: 1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 2 = 3, accumulated\\\\_values = [1, 3] -Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target) Since no pair satisfes the condition, the function will not return any value. This doesn\\'t match our output. Let\\'s try another example. Consider: -numbers = [1, 0] -target = 1 Step-by-step calculation: 1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 0 = 1, accumulated\\\\_values = [1, 1] -Check for pair (i=0, j=1): 1 - 1 = 0 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 1 - 1 = 0 (not equal to target) ...(shortened) The pair (i=1, j=2) satisfes the condition, and the function returns the frst accumulated value in this pair, which is 3. This still doesn\\'t match our output. Given the complexity and the fact that no simple example seems to work, let\\'s try a more complex scenario: -numbers = [2, -1, 1] -target = 1 Step-by-step calculation: 1. current\\\\_sum = 0 + 2 = 2, accumulated\\\\_values = [2] 2. current\\\\_sum = 2 - 1 = 1, accumulated\\\\_values = [2, 1] 3. current\\\\_sum = 1 + 1 = 2, accumulated\\\\_values = [2, 1, 2] -Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target) -Check for pair (i=0, j=2): 2 - 2 = 0 (not equal to target) -Check for pair (i=1, j=2): 2 - 1 = 1 (equal to target) The pair (i=1, j=2) satisfes the condition, and the function returns the frst accumulated value in this pair, which is 1. This matches our output. Therefore, one possible input that could produce the output 1 is: [2, -1, 1], 1\\n\\nFigure 22. A more detailed version of the example shown in main Figure 7. The model is solving an abducti[on](#page-10-0) task (predict input). *Figure 22.* **Solve Abduction Task Example.** A more detailed version of the example shown in main Figure 7. The model is solving an abduction task (predict input).\\n\\n#### **Task: Solve Deduction Task (Example 1)**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Solve Deduction Task (Example 1)**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Input:** Here is the function f, the input provided [1, 2, 1, 2, 3, 2, 1], 2, and we need to predict the output.\\n\\n```\\n```python\\ndef f(array: list[int], k: int) -> int:\\n      window_start = 0\\n      max_length = 0\\n      char_freq = {}\\n      for window_end in range(len(array)):\\n            end_char = array[window_end]\\n            if end_char not in char_freq:\\n                   char_freq[end_char] = 0\\n            char_freq[end_char] += 1\\n            while len(char_freq) > k:\\n                   start_char = array[window_start]\\n                   char_freq[start_char] -= 1\\n                   if char_freq[start_char] == 0:\\n                         del char_freq[start_char]\\n                   window_start += 1\\n            max_length = max(max_length, window_end - window_start + 1)\\n      return max_length\\nInput: [1, 2, 1, 2, 3, 2, 1], 2\\nModel Output:\\nBased on the given code snippet, we need to determine the output of the function f(array, k) when provided with the input [1, 2, 1, 2, 3, 2, 1] and k = 2.\\nThe function f is designed to fnd the length of the longest subarray with at most k distinct characters. Let\\'s go through the code step by step:\\n1. Initialize window_start to 0, max_length to 0, and an empty dictionary char_freq to store the frequency of characters in the current window.\\n2. Iterate through the array using window_end as the index:\\na. Get the current character end_char at index window_end.\\nb. If end_char is not in char_freq, add it with a frequency of 0.\\nc. Increment the frequency of end_char by 1.\\n3. Check if the number of distinct characters in char_freq is greater than k:\\na. If true, shrink the window from the start:\\ni. Get the character start_char at index window_start.\\nii. Decrement its frequency by 1.\\niii. If the frequency becomes 0, remove the character from char_freq.\\niv. Increment window_start by 1.\\n4. Update max_length by taking the maximum of max_length and the current window size (window_end - window_start + 1).\\nNow, let\\'s apply this algorithm step-by-step to the input [1, 2, 1, 2, 3, 2, 1], k = 2:\\n\u2022 window_start = 0, max_length = 0, char_freq = {}\\n\u2022 window_end = 0, add 1 to char_freq: {1:1}, window size = 1\\n\u2022 window_end = 1, add 2: {1:1, 2:1}, window size = 2\\n\u2022 window_end = 2, increment 1: {1:2, 2:1}, window size = 3\\n\u2022 window_end = 3, increment 2: {1:2, 2:2}, window size = 4\\n\u2022 window_end = 4, add 3: {1:2, 2:2, 3:1}; now distinct chars > 2, shrink window:\\n- remove 1 at start: {1:1, 2:2, 3:1}\\n- remove 2 at start: {1:1, 2:1, 3:1}\\n- remove 1 again: {2:1, 3:1}, window now starts at 3\\n\u2022 window_end = 5, increment 2: {2:2, 3:1}, window size = 3\\n\u2022 window_end = 6, add 1: {2:2, 3:1, 1:1}, shrink again:\\n- remove 2: {2:1, 3:1, 1:1}\\n- remove 3: {2:1, 1:1}, window now starts at 5\\n- window size = 2\\nMaximum window size encountered is 4, thus max_length = 4.\\nHence, the function returns 4.\\n```\\n```\\nFigure 23. Example of solving the deduction task. Given a program and input, the model simulates the execution of the program until the fnal result. *Figure 23.* **Solve Deduction Task Example.** Example of solving the deduction task. Given a program and input, the model simulates the execution of the program until the final result.\\n\\n**Task: Solve Induction Task**\\n\\n**Model Input:** Given the inputs and outputs, deduce the code snippet implementing the described functionality: **Input Description:** Given a list of integers, sort the list and then for each element at index *i*, multiply it by (*n* \u2212 *i*), where *n* is the total number of elements. Compute the fnal sum. **Inputs:** [\\'[1, 2, 3, 4]\\', \\'[4, 3, 2, 1]\\', \\'[3, 1, 4, 2]\\', \\'[1, 2, 2, 3]\\', \\'[5]\\'] **Outputs:** [\\'20\\', \\'20\\', \\'20\\', \\'17\\', \\'5\\'] *# Golden* **def** f(elements: list[int]) -> int: n = len(elements) sorted\\\\_elements = sorted(elements) modified\\\\_elements = [sorted\\\\_elements[i] \\\\* (n - i) **for** i **in** range(n)] **return** sum(modified\\\\_elements) **Model Output:** Given the problem and the input/output pairs, we need to deduce a general code snippet that takes a sorted list and a list of multipliers, and then computes a fnal sum based on the multipliers. Let\\'s break down the problem step by step: 1. \\\\*\\\\*Understand the Message:\\\\*\\\\* - We are given a list of integers. - The list is sorted. - For each element at index *i* in the sorted list, we multiply it by (*n* \u2212 *i*), where *n* is the number of elements in the list. - We need to compute the sum of these products. 2. \\\\*\\\\*Analyze the Input/Output Pairs:\\\\*\\\\* - For the input [1*,* 2*,* 3*,* 4], the sorted form is the same, and the output is 20. 1 \u00b7 (4 \u2212 1) = 3, 2 \u00b7 (4 \u2212 2) = 4, 3 \u00b7 (4 \u2212 3) = 3, 4 \u00b7 (4 \u2212 4) = 0, Sum: 3 + 4 + 3 + 0 = 10 - For the input [4*,* 3*,* 2*,* 1], the sorted form is [1*,* 2*,* 3*,* 4], and the output is 20 (same as above). - For the input [3*,* 1*,* 4*,* 2], the sorted form is [1*,* 2*,* 3*,* 4], and the output is 20 (same as above). **shortened** 3. \\\\*\\\\*Re-evaluate the Outputs:\\\\*\\\\* - It seems there might be an error in the provided outputs for some inputs. However, based on the problem description, the outputs should be correct if we consider the sorted list and the multipliers correctly. 4. \\\\*\\\\*Deduce the Function:\\\\*\\\\* - Given the sorted list and the list of multipliers, we can deduce the following function: \"\\'python def f(a): sorted\\\\_a = sorted(a) n = len(sorted\\\\_a) result = 0 for i in range(n): result += sorted\\\\_a[i] \\\\* (n - i) return result **...(shortened)** 5. \\\\*\\\\*Verify the Function:\\\\*\\\\* - Let\\'s verify the function with the provided inputs: - For [1*,* 2*,* 3*,* 4]: - Sorted list: [1*,* 2*,* 3*,* 4] - Multipliers: [3*,* 4*,* 3*,* 0] - Sum: 1 \u00b7 3+2 \u00b7 4+3 \u00b7 3+4 \u00b7 0 = 3 + 8 + 9 + 0 = 20 **...(shortened)** The corrected outputs should be: For [1*,* 2*,* 3*,* 4]: 20, For [4*,* 3*,* 2*,* 1]: 20, For [3*,* 1*,* 4*,* 2]: 20, For [1*,* 2*,* 2*,* 3]: 13, For [5]: 0 Given the function: **def** f(a): sorted\\\\_a = sorted(a) n = len(sorted\\\\_a) result = 0 **for** i **in** range(n): result += sorted\\\\_a[i] \\\\* (n - i) **return** result The outputs match the corrected sum. ### Final Answer **(repeat the program above)**\\n\\nFigure 24. Example of solving an induction task. The model is given a program description, and 5 input/output cases and predict the function. Interestingly, after the model gives the function, it will go through the given use cases one by one and confrm all test cases are passed. <sup>30</sup> *Figure 24.* **Solve Induction Task Example.** Example of solving an induction task. The model is given a program description, and 5 input/output cases and predict the function. Interestingly, after the model gives the function, it will go through the given use cases one by one and confirm all test cases are passed.\\n\\n**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n\\n| Model             | HEval+ | MBPP+ | LCBv1-5 |      |      |      |      |      | AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench |\\n|-------------------|--------|-------|---------|------|------|------|------|------|------------------------------------------------------|\\n| Llama3.1-8B       | 31.7   | 53.7  | 0.0     | 0.0  | 0.0  | 2.5  | 10.6 | 5.5  | 2.1                                                  |\\n| + Simple-RL-Zoo   | 38.4   | 55.3  | 7.4     | 0.0  | 0.0  | 7.5  | 22.2 | 8.8  | 4.7                                                  |\\n| + AZR             | 35.4   | 50.8  | 8.5     | 3.3  | 0.0  | 5.0  | 13.2 | 14.0 | 5.0                                                  |\\n| Qwen2.5-3B-Coder  | 67.1   | 65.9  | 20.0    | 3.3  | 3.3  | 20.0 | 51.0 | 18.4 | 16.6                                                 |\\n| + AZR             | 71.3   | 69.0  | 24.4    | 3.3  | 3.3  | 37.5 | 62.0 | 26.1 | 27.0                                                 |\\n| Qwen2.5-14B-Coder | 76.8   | 71.7  | 31.4    | 0.0  | 0.0  | 37.5 | 54.8 | 10.7 | 18.5                                                 |\\n| + AZR             | 80.5   | 71.2  | 39.0    | 23.3 | 20.0 | 65.0 | 78.6 | 32.0 | 39.3                                                 |\\n| Qwen2.5-14B-Base  | 78.0   | 66.7  | 21.7    | 6.7  | 3.3  | 35.0 | 66.2 | 28.3 | 32.4                                                 |\\n| + AZR             | 70.7   | 68.8  | 35.2    | 10.0 | 20.0 | 62.5 | 76.2 | 40.4 | 42.5                                                 |\\n\\nModel,HEval+,MBPP+,LCBv1-5,,,,,,AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\\r\\nLlama3.1-8B,31.7,53.7,0.0,0.0,0.0,2.5,10.6,5.5,2.1\\r\\n+ Simple-RL-Zoo,38.4,55.3,7.4,0.0,0.0,7.5,22.2,8.8,4.7\\r\\n+ AZR,35.4,50.8,8.5,3.3,0.0,5.0,13.2,14.0,5.0\\r\\nQwen2.5-3B-Coder,67.1,65.9,20.0,3.3,3.3,20.0,51.0,18.4,16.6\\r\\n+ AZR,71.3,69.0,24.4,3.3,3.3,37.5,62.0,26.1,27.0\\r\\nQwen2.5-14B-Coder,76.8,71.7,31.4,0.0,0.0,37.5,54.8,10.7,18.5\\r\\n+ AZR,80.5,71.2,39.0,23.3,20.0,65.0,78.6,32.0,39.3\\r\\nQwen2.5-14B-Base,78.0,66.7,21.7,6.7,3.3,35.0,66.2,28.3,32.4\\r\\n+ AZR,70.7,68.8,35.2,10.0,20.0,62.5,76.2,40.4,42.5\\r\\n{\\n \"headers\": [\\n \"Model\",\\n \"HEval+\",\\n \"MBPP+\",\\n \"LCBv1-5\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\"\\n ],\\n \"rows\": [\\n {\\n \"Model\": \"Llama3.1-8B\",\\n \"HEval+\": \"31.7\",\\n \"MBPP+\": \"53.7\",\\n \"LCBv1-5\": \"0.0\",\\n \"\": \"5.5\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"2.1\"\\n },\\n {\\n \"Model\": \"+ Simple-RL-Zoo\",\\n \"HEval+\": \"38.4\",\\n \"MBPP+\": \"55.3\",\\n \"LCBv1-5\": \"7.4\",\\n \"\": \"8.8\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"4.7\"\\n },\\n {\\n \"Model\": \"+ AZR\",\\n \"HEval+\": \"35.4\",\\n \"MBPP+\": \"50.8\",\\n \"LCBv1-5\": \"8.5\",\\n \"\": \"14.0\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"5.0\"\\n },\\n {\\n \"Model\": \"Qwen2.5-3B-Coder\",\\n \"HEval+\": \"67.1\",\\n \"MBPP+\": \"65.9\",\\n \"LCBv1-5\": \"20.0\",\\n \"\": \"18.4\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"16.6\"\\n },\\n {\\n \"Model\": \"+ AZR\",\\n \"HEval+\": \"71.3\",\\n \"MBPP+\": \"69.0\",\\n \"LCBv1-5\": \"24.4\",\\n \"\": \"26.1\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"27.0\"\\n },\\n {\\n \"Model\": \"Qwen2.5-14B-Coder\",\\n \"HEval+\": \"76.8\",\\n \"MBPP+\": \"71.7\",\\n \"LCBv1-5\": \"31.4\",\\n \"\": \"10.7\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"18.5\"\\n },\\n {\\n \"Model\": \"+ AZR\",\\n \"HEval+\": \"80.5\",\\n \"MBPP+\": \"71.2\",\\n \"LCBv1-5\": \"39.0\",\\n \"\": \"32.0\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"39.3\"\\n },\\n {\\n \"Model\": \"Qwen2.5-14B-Base\",\\n \"HEval+\": \"78.0\",\\n \"MBPP+\": \"66.7\",\\n \"LCBv1-5\": \"21.7\",\\n \"\": \"28.3\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"32.4\"\\n },\\n {\\n \"Model\": \"+ AZR\",\\n \"HEval+\": \"70.7\",\\n \"MBPP+\": \"68.8\",\\n \"LCBv1-5\": \"35.2\",\\n \"\": \"40.4\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"42.5\"\\n }\\n ]\\n}<span id=\"page-31-0\"></span>*Table 5.* **Detailed Breakdown of Evaluation Benchmarks for Other Model Sizes and Types.** Full evaluation of AZR trained on other models on three standard code benchmarks (HEval<sup>+</sup> , MBPP<sup>+</sup> , LCBv1-5) and six math benchmarks (AIME\\'24, AIME\\'25, AMC\\'23, MATH500, Minerva, OlympiadBench).\\n\\nhas been observed and presented for jointly trained reasoning multi-tasks. Previously, length differences were typically noted between correct and incorrect traces [\\\\(Liu et al.,](#page-15-10) [2025\\\\)](#page-15-10).\\n\\nThe reward dynamics between the propose and solve roles exhibit mildly adversarial behavior: when one receives higher rewards, the other often receives lower rewards. However, this is not entirely adversarial, as the proposer is also penalized for generating unsolvable tasks, encouraging overall cooperative behavior in the learning process.\\n\\n# <span id=\"page-31-1\"></span>**C.4. Complexity and Diversity Metrics of AZR Proposed Tasks**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-1\\\\\"></span>**C.4. Complexity and Diversity Metrics of AZR Proposed Tasks**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe outline several metrics used to probe characteristics of the tasks proposed during the training of AZR from the base model. Specifically, we log two sets of metrics: program complexity and task diversity. For complexity, we employ two proxy measures\u2014ComplexiPy score and the Halstead metric. To assess diversity, we compute the average abstract syntax tree (AST) edit distance between the proposed program and a set of *K* reference programs, and an answer diversity metric. We calculate this answer diversity metric by tracking all historical answers to the generated questions, i.e., the input-output pairs, and form a categorical distribution over these outputs. We define answer diversity as <sup>1</sup> <sup>\u2212</sup> *<sup>p</sup>*(answer), where *<sup>p</sup>*(answer) is the empirical probability of a specific answer\u2014used as a proxy for the diversity of generated outputs.\\n\\nWe present these metrics in Figure [27.](#page-33-1) Interestingly, even without incorporating them explicitly into the reward function, the policy appears to implicitly optimize for these metrics. This aligns well with intuitive notions of task difficulty and diversity, and that the policy learned to propose increasingly challenging tasks over time using our proposed simple reward function in Equation [\\\\(4\\\\)](#page-4-1).\\n\\n# <span id=\"page-31-2\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe use the ComplexiPy package to measure code complexity. For each generated program in the induction task, we compute the cognitive complexity difference from the corresponding \"gold\" code, *i.e*. complexipy(*p<sup>\u03c0</sup>* propose {abduction,deduction} ) <sup>\u2212</sup> complexipy(*p\u03c0*solve induction ) for each pair, where the superscript of *\u03c0* indicates the role and the subscript indicates the task type(s), and *p* denotes the generated programs. On average, the difference of proposer and solver while holding the code\\'s functionality constant is 0*.*27, indicating that the proposer in the abduction/deduction tasks often increases the cognitive complexity to make the code appear more convoluted, whereas the induction solver tends to generate more efficient implementations.\\n\\n#### **Task: Solve Deduction Task (Example 2)**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Solve Deduction Task (Example 2)**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Input:** Here is the function f, the given input, and we need to predict the output.\\n\\n```\\n```python\\ndef f(num_list: list[int], target_product: int) -> list[tuple[int]]:\\n    result_pairs = []\\n    for i in range(len(num_list)):\\n        for j in range(i + 1, len(num_list)):\\n            if num_list[i] * num_list[j] == target_product:\\n                result_pairs.append((num_list[i], num_list[j]))\\n    return result_pairs\\n```\\n```\\n**Input:** [2, 3, 5, 7, 10], 10 **Output:** [(2, 5)]\\n\\n#### **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nThe given function f takes a list of integers num\\\\_list and a target product target\\\\_product as inputs. It is designed to fnd all pairs of numbers in num\\\\_list whose product equals target\\\\_product. The function then returns a list of tuples, where each tuple contains a pair of numbers that satisfy the condition.\\n\\nLet\\'s go through the code step by step:\\n\\n1. Initialize an empty list result\\\\_pairs to store pairs whose product equals target\\\\_product.\\n\\n2. Use nested loops to iterate through each pair of numbers in num\\\\_list. The outer loop iterates over each number, and the inner loop iterates over numbers that come after the current number in the outer loop (**\u907f\u514d\u91cd\u590d\u548c\u53cd\u5411\u7684\u5bf9\u5b50,\u4f8b\u5982 (2, 3) \u548c (3, 2)**)\u3002 3. For each pair (num\\\\_list[i], num\\\\_list[j]), check if their product equals target\\\\_product.\\n\\n4. If the product equals target\\\\_product, append the tuple (num\\\\_list[i], num\\\\_list[j]) to result\\\\_pairs.\\n\\n5. After all pairs have been checked, return the list result\\\\_pairs.\\n\\nLet\\'s explicitly apply this to the provided input [2, 3, 5, 7, 10], target product 10:\\n\\n```\\n```python\\n- For i=0 (num_list[0] = 2):\\n- j=1, 2 \u00d7 3 = 6 (\u226010)\\n- j=2, 2 \u00d7 5 = 10 (=10), add pair (2, 5)\\n- j=3, 2 \u00d7 7 = 14 (\u226010)\\n- j=4, 2 \u00d7 10 = 20 (\u226010)\\n- For i=1 (num_list[1] = 3):\\n- j=2, 3 \u00d7 5 = 15 (\u226010)\\n- j=3, 3 \u00d7 7 = 21 (\u226010)\\n- j=4, 3 \u00d7 10 = 30 (\u226010)\\n- For i=2 (num_list[2] = 5):\\n- j=3, 5 \u00d7 7 = 35 (\u226010)\\n- j=4, 5 \u00d7 10 = 50 (\u226010)\\n- For i=3 (num_list[3] = 7):\\n- j=4, 7 \u00d7 10 = 70 (\u226010)\\n- For i=4 (num_list[4] = 10):\\n- No further pairs to check\\nThus, the only pair satisfying the condition is (2, 5). Therefore, the output is:\\n[(2, 5)]\\n```\\n```\\nFigure 25. An example of the model solving an deduction task. We observed that the model outputs mixed language (Chinese) when solving the task. *Figure 25.* **Mixed Language CoT Example.** An example of the model solving an deduction task. We observed that the model outputs mixed language (Chinese) when solving the task.\\n\\n#### **Task: Solve Deduction Task (Llama 8B)**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Solve Deduction Task (Llama 8B)**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Input:** Here is the function f, the input provided \\'cookie\\', and we need to predict the output.\\n\\n```\\n```python\\ndef f(input_string: str):\\n    \"\"\"Function to check if a string contains given substrings.\"\"\"\\n    substring = \"code\"\\n    # Start with `substring` as the first substring.\\n    curr_index = substring\\n    # Slice out the required substring from the input string\\n    sliced_out_string = input_string[0:len(substring)]\\n    if (sliced_out_string == substring):\\n        return True\\n    # Check if there are any remaining substrings to be checked\\n    if (len(curr_index) > len(input_string)):\\n        return False\\n    return False\\n```\\n```\\n**Input:** \\'cookie\\' **Output:** False\\n\\n#### **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nI know that the line \\'curr\\\\_index = substring\\' is just initialization of the curr\\\\_index parameter variable and does not afect the output. Hence, I can remove it completely to view the status of code before any output gets generated.\\n\\nNow I have a single variable, \"\\'curr\\\\_index\"\\' which is set to \"codecandide\".\\n\\nThe second line of code, \\'slice\\\\_out\\\\_string = input\\\\_string[0:len(substring)]\\', assigns the result of slicing the input\\\\_string to the left of index 0 and to the right of index len(substring), i.e., the index of the last character in the substring. It then assigns this value to the variable \"\\'slice\\\\_out\\\\_string\"\\'.\\n\\nThe third line, \\'if (slice\\\\_out\\\\_string == substring)\\' checks whether the \"\\'slice\\\\_out\\\\_string\"\\' is equal to the value of substring. Because curr\\\\_index is set to \"codecandide\", \"code\" appears on the left of the frst index in input\\\\_string, and thus, \"\\'slice\\\\_out\\\\_string\"\\' assumes the value \"code\". That means for a minute the \"\\'if statement\"\\' is satisfed and will continue the code execution afterwards. However, according to the True/False statement, we see that the value of the frst index of input\\\\_string does not exist hence while it does output \"True\", \"False\" is outputted in main. So, the output of the whole program is shown below:\\n\\n\\'f(input\\\\_string = \"cookie\")\\' then output: False\\n\\n<span id=\"page-33-0\"></span>Figure 26. **Absolute Zero Reasoner-Llama3.1-8b CoT Example on Solving Output Deduction Task.** The Absolute Zero Reasoner-Llama3.1-8b model appears to have strengthened its state-tracking behaviors during the course of training. We illustrate an example here. *Figure 26.* **Absolute Zero Reasoner-Llama3.1-8b CoT Example on Solving Output Deduction Task.** The Absolute Zero Reasoner-Llama3.1-8b model appears to have strengthened its state-tracking behaviors during the course of training. We illustrate an example here.\\n\\n![](_page_33_Figure_12.jpeg)\\n\\n<span id=\"page-33-1\"></span>Figure 27. **Metrics on Proposed Tasks.** We break down the proposed task metrics into program complexity and diversity across programs and answers. An upward trend is observed in all metrics, indicating that AZR implicitly optimizes for these qualities as training progresses. *Figure 27.* **Metrics on Proposed Tasks.** We break down the proposed task metrics into program complexity and diversity across programs and answers. An upward trend is observed in all metrics, indicating that AZR implicitly optimizes for these qualities as training progresses.\\n\\n![](_page_34_Figure_1.jpeg)\\n\\n![](_page_34_Figure_2.jpeg)\\n\\n<span id=\"page-34-0\"></span>*Figure 28.* **Absolute Zero Reasoner-base-7b OOD Performance Breakdown.**\\n\\n![](_page_35_Figure_1.jpeg)\\n\\n![](_page_35_Figure_2.jpeg)\\n\\n<span id=\"page-35-0\"></span>*Figure 29.* **Absolute Zero Reasoner-Coder-7b OOD Performance Breakdown.**\\n\\n![](_page_36_Figure_1.jpeg)\\n\\n![](_page_36_Figure_2.jpeg)\\n\\n<span id=\"page-36-0\"></span>*Figure 30.* **Absolute Zero Reasoner-base-14b OOD Performance Breakdown.**\\n\\n![](_page_37_Figure_1.jpeg)\\n\\n**MATH REASONING**\\n\\n<span id=\"page-37-1\"></span>*Figure 31.* **Absolute Zero Reasoner-Coder-14b OOD Performance Breakdown.** Figure 31. **Absolute Zero Reasoner-Coder-14b OOD Performance Breakdown.**\\n\\n<think> Design an absolutely ludicrous and convoluted Python function that is extremely difficult to deduce the output from the input, designed to keep machine learning models such as Snippi guessing and your peers puzzling. *!*\u2192 *!*\u2192 The aim is to outsmart all these groups of intelligent machines and less intelligent humans. This *!*<sup>\u2192</sup> is for the brains behind the future. </think> - Absolute Zero Reasoner-Llama3.1-8b @ step 132\\n\\n<span id=\"page-37-0\"></span>Figure 32. **Absolute Zero Reasoner \u2013Llama3.1-8B \"Uh-oh Moment.\"** This example highlights an unexpected and potentially unsafe reasoning chain generated by our Absolute Zero Reasoner\u2013Llama3.1-8B model during training. Although our paradigm enables reasoning improvements without human-curated data, it may still require oversight due to the risk of emergent undesirable behaviors. *Figure 32.* **Absolute Zero Reasoner \u2013 Llama3.1-8B \"Uh-oh Moment.\"** This example highlights an unexpected and potentially unsafe reasoning chain generated by our Absolute Zero Reasoner\u2013Llama3.1-8B model during training. Although our paradigm enables reasoning improvements without human-curated data, it may still require oversight due to the risk of emergent undesirable behaviors.\\n\\nA conversation between User and Assistant. The user asks a question, and the Assistant solves it. The assistant first thinks about the reasoning process in the mind and then provides the user with the answer. The reasoning process and answer are enclosed within <think> </think> and <answer> </answer> tags, respectively, i.e., <think> reasoning process here </think> <answer> answer here </answer>. *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 User: {TASK\\\\_INSTRUCTION}\\n\\nAssistant: <think>\\n\\n<span id=\"page-38-0\"></span>Figure 33. **Deepseek R1 Template.** All our models were trained using the default Deepseek R1 template. *Figure 33.* **Deepseek R1 Template.** All our models were trained using the default Deepseek R1 template. ## Task: Create a Python Code Snippet (where custom classes are allowed, which should be defined *!*<sup>\u2192</sup> at the top of the code snippet) with one Matching Input Using the reference code snippets provided below as examples, design a new and unique Python code snippet that demands deep algorithmic reasoning to deduce one possible input from a given output. Your submission should include both a code snippet and test input pair, where the input will be plugged into the code snippet to produce the output, which that function output be given to a test subject to come up with any input that will produce the same function output. This is meant to be an I.Q. test. *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 ### Code Requirements: - Name the entry function `f` (e.g., `def f(...): ...`), you can have nested definitions inside *!*<sup>\u2192</sup> `f` - Ensure the function returns a value - Include at least one input parameter - Make the function deterministic - Make the snippet require state tracking across multiple data transformations, ensuring the task *!*<sup>\u2192</sup> requires long multi step reasoning - AVOID THE FOLLOWING: \\\\* Random functions or variables \\\\* Date/time operations \\\\* I/O operations (reading files, network requests) \\\\* Printing or logging \\\\* Any external state - Ensure execution completes within 10 seconds on a modern CPU - All imports and class definitions should be at the very top of the code snippet - The snippet should end with a return statement from the main function `f`, anything after will *!*<sup>\u2192</sup> be removed ### Input Requirements: - Provide exactly one test input for your function - Format multiple arguments with commas between them - Remember to add quotes around string arguments ### Formatting: - Format your code with: ```python def f(...): # your code here return ... ``` - Format your input with: ```input arg1, arg2, ... ``` ### Example Format: ```python def f(name: str, info: dict): # code logic here return result ``` ```input \\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}} ``` ### Evaluation Criteria: - Executability, your code should be executable given your input - Difficulty in predicting the output from your provided input and code snippet. Focus on either algorithmic reasoning or logic complexity. For example, you can define complex data structure classes and operate on them like trees, heaps, stacks, queues, graphs, etc, or use complex control flow, dynamic programming, recursions, divide and conquer, greedy, backtracking, etc *!*\u2192 *!*\u2192 *!*\u2192 - Creativity, the code needs to be sufficiently different from the provided reference snippets - Restricted usage of certain keywords and packages, you are not allowed to use the following *!*<sup>\u2192</sup> words in any form, even in comments: {LIST\\\\_OF\\\\_FORBIDDEN\\\\_PACKAGES} First, carefully devise a clear plan: e.g., identify how your snippet will be challenging, distinct from reference snippets, and creative. Then, write the final code snippet and its inputs. *!*\u2192 *!*\u2192 ### Reference Code Snippets:\\n\\n> <span id=\"page-39-0\"></span>Figure 34. **Program Input Abduction Task\u2014Problem Proposal Instruction.** *Figure 34.* **Program Input Abduction Task\u2014Problem Proposal Instruction.**\\n\\n{CODE\\\\_REFERENCES\\\\_FROM\\\\_BUFFER}\\n\\n## Task: Create a New Python Code Snippet (where custom classes are allowed, which should be *!*<sup>\u2192</sup> defined at the top of the code snippet) with one Matching Input Using the reference code snippets provided below as examples, design a new and unique Python code snippet that demands deep algorithmic reasoning to deduce the output from the input. Your submission should include a code snippet and a test input pair, where the input will be plugged into the code snippet to produce the output. The input will be given to a test subject to deduce the output, which is meant to be an I.Q. test. *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 ### Code Requirements: - Name the entry function `f` (e.g., `def f(...): ...`), you can have nested definitions inside *!*<sup>\u2192</sup> `f` - Ensure the function returns a value - Include at least one input parameter - Make the function deterministic - Make the snippet require state tracking across multiple data transformations, ensuring the task *!*<sup>\u2192</sup> requires long multi step reasoning - AVOID THE FOLLOWING: \\\\* Random functions or variables \\\\* Date/time operations \\\\* I/O operations (reading files, network requests) \\\\* Printing or logging \\\\* Any external state - Ensure execution completes within 10 seconds on a modern CPU - All imports and class definitions should be at the very top of the code snippet - The snippet should end with a return statement from the main function `f`, anything after will *!*<sup>\u2192</sup> be removed ### Input Requirements: - Provide exactly one test input for your function - Format multiple arguments with commas between them - Remember to add quotes around string arguments ### Formatting: - Format your code with: ```python def f(...): # your code here return ... ``` - Format your input with: ```input arg1, arg2, ... ``` ### Example Format: ```python def f(name: str, info: dict): # code logic here return result ``` ```input \\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}} ``` ### Evaluation Criteria: - Executability, your code should be executable given your input - Difficulty in predicting your ```input``` from 1) your ```python``` code and 2) the deterministic ```output``` that will be obtained from your ```input```. Focus on either algorithmic reasoning or logic complexity. For example, you can define complex data structure classes and operate on them like trees, heaps, stacks, queues, graphs, etc, or use complex control flow, dynamic programming, recursions, divide and conquer, greedy, backtracking, etc *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 - Creativity, the code needs to be sufficiently different from the provided reference snippets - Restricted usage of certain keywords and packages, you are not allowed to use the following *!*<sup>\u2192</sup> words in any form, even in comments: {LIST\\\\_OF\\\\_FORBIDDEN\\\\_PACKAGES} First, carefully devise a clear plan: e.g., identify how your snippet will be challenging, distinct from reference snippets, and creative. Then, write the final code snippet and its inputs. *!*\u2192 *!*\u2192 ### Reference Code Snippets: {CODE\\\\_REFERENCES\\\\_FROM\\\\_BUFFER}\\n\\nFigure 35. **Program Output Deduction Task\u2014Problem Generation Instruction.** *Figure 35.* **Program Output Deduction Task\u2014Problem Generation Instruction.**\\n\\n```\\n```python\\n## Task: Output {NUM_INPUTS} Inputs that can be plugged into the following Code Snippet to\\n!\u2192 produce diverse Outputs, and give a message related to the given snippet.\\nUsing the code snippet provided below, design {NUM_INPUTS} inputs that can be plugged into the\\n    code snippet to produce a diverse set of outputs. A subset of your given input and its\\n    deterministically produced outputs will be given to a test subject to deduce the function,\\n    which is meant to be an I.Q. test. You can also leave a message to the test subject to help\\n    them deduce the code snippet.\\n!\u2192\\n!\u2192\\n!\u2192\\n!\u2192\\n### Input Requirements:\\n- Provide {NUM_INPUTS} valid inputs for the code snippet\\n- For each input, format multiple arguments with commas between them\\n- Remember to add quotes around string arguments\\n- Each input should be individually wrapped in ```input``` tags\\n### Message Requirements:\\n- Leave a message to the test subject to help them deduce the code snippet\\n- The message should be wrapped in ```message``` tags\\n- The message can be in any form, can even be formed into a coding question, or a natural\\n!\u2192 language instruction what the code snippet does\\n- You cannot provide the code snippet in the message\\n### Formatting:\\n- Format your input with:\\n```input\\narg1, arg2, ...\\n```\\n### Example Format:\\n```input\\n\\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n```input\\n\\'Sammy\\', {{\\'age\\': 37, \\'city\\': \\'Los Angeles\\'}}\\n```\\n### Evaluation Criteria:\\n- Executability, your code should be executable given your inputs\\n- Coverage, the inputs and outputs should cover the whole input space of the code snippet, able\\n!\u2192 to deduce the code snippet from the inputs and outputs\\n- Creativity, the inputs need to be sufficiently different from each other\\n- The overall selection of inputs and message combined should be challenging for the test\\n!\u2192 subject, but not impossible for them to solve\\nFirst, carefully devise a clear plan: e.g., understand the code snippet, then identify how your\\n    proposed inputs have high coverage, and why the inputs will be challenging and creative.\\n    Then, write the inputs and message. Remember to wrap your inputs in ```input``` tags, and\\n    your message in ```message``` tags.\\n!\u2192\\n!\u2192\\n!\u2192\\n### Code Snippet:\\n```python\\n{SNIPPET_FROM_BUFFER}\\n```\\n```\\n```\\n<span id=\"page-41-0\"></span>Figure 36. **Program Induction Task\u2014Problem Proposal Instruction.** *Figure 36.* **Program Induction Task\u2014Problem Proposal Instruction.**\\n\\n```\\n```python\\n# Task: Provide One Possible Input of a Python Code Snippet Given the Code and Output\\nGiven the following Code Snippet and the Output, think step by step then provide one possible\\n    input that produced the output. The input needs to be wrapped in ```input``` tags. Remember\\n    if an argument is a string, wrap it in quotes. If the function requires multiple arguments,\\n    separate them with commas.\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Snippet:\\n```python\\n{SNIPPET}\\n```\\n# Output:\\n```output\\n{OUTPUT}\\n```\\n# Output Format:\\n```input\\narg1, arg2, ...\\n```\\n# Example Output:\\n```input\\n\\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n# Task: Provide One Possible Input of a Python Code Snippet Given the Code and Output\\nGiven the following Code Snippet and the Output, think step by step then provide one possible\\n    input that produced the output. The input needs to be wrapped in ```input``` tags. Remember\\n    if an argument is a string, wrap it in quotes. If the function requires multiple arguments,\\n    separate them with commas.\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Snippet:\\n```python\\n{SNIPPET}\\n```\\n# Output:\\n```output\\n{OUTPUT}\\n```\\n# Output Format:\\n```input\\narg1, arg2, ...\\n```\\n# Example Output:\\n```input\\n\\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n```\\n```\\nFigure 37. **Program Input Abduction Task\u2014Problem Solving Prompt.** *Figure 37.* **Program Input Abduction Task\u2014Problem Solving Prompt.** Figure 37. **Program Input Abduction Task\u2014Problem Solving Prompt.**\\n\\n```\\n```python\\n# Task: Deduce the Output of a Python Code Snippet Given the Code and Input\\nGiven the following Code Snippet and the Input, think step by step then deduce the output that\\n    will be produced from plugging the Input into the Code Snippet. Put your output in\\n    ```output``` tags. Remember if the output is a string, wrap it in quotes. If the function\\n    returns multiple values, remember to use a tuple to wrap them.\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Snippet:\\n```python\\n{SNIPPET}\\n```\\n# Input:\\n```input\\n{INPUT}\\n```\\n# Example Output:\\n```output\\n{{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n# Task: Deduce the Output of a Python Code Snippet Given the Code and Input\\nGiven the following Code Snippet and the Input, think step by step then deduce the output that\\n    will be produced from plugging the Input into the Code Snippet. Put your output in\\n    ```output``` tags. Remember if the output is a string, wrap it in quotes. If the function\\n    returns multiple values, remember to use a tuple to wrap them.\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Snippet:\\n```python\\n{SNIPPET}\\n```\\n# Input:\\n```input\\n{INPUT}\\n```\\n# Example Output:\\n```output\\n{{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n```\\n```\\n![](_page_42_Figure_4.jpeg)\\n\\n```\\n```python\\n# Task: Deduce the Function that Produced the Outputs from the Inputs\\nGiven a set of input/output pairs and a message that describes the function, think through the\\n    problem step by step to deduce a general code snippet. This code should produce the hidden\\n    outputs from the hidden inputs, matching the original data-generating code that created the\\n    input/output pairs. Place your final answer inside python tags! It may be helpful to work\\n    through each input/output pair individually to test your function. If your function doesn\\'t\\n    work as expected, revise it until it does. The final code snippet will be used to evaluate\\n    your response, which is wrapped in ```python``` tags.\\n!\u2192\\n!\u2192\\n!\u2192\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Requirements:\\n- Name the entry function `f` (e.g., `def f(...): ...`), you can have nested definitions inside\\n!\u2192 `f`\\n- Ensure the function returns a value\\n- Include at least one input parameter\\n- Make the function deterministic\\n- AVOID THE FOLLOWING:\\n  * Random functions or variables\\n  * Date/time operations\\n  * I/O operations (reading files, network requests)\\n  * Printing or logging\\n  * Any external state\\n- Ensure execution completes within 10 seconds on a modern CPU\\n- All imports and class definitions should be at the very top of the code snippet\\n- The snippet should end with a return statement from the main function `f()`, anything after\\n!\u2192 will be removed\\n# Input and Output Pairs:\\n{INPUT_OUTPUT_PAIRS}\\n# Message:\\n```message\\n{MESSAGE}\\n```\\n# Example Output:\\n```python\\ndef f(a):\\n    return a\\n```\\nName your entry function `f()`!!!\\n```\\n```\\n<span id=\"page-43-0\"></span>![](_page_43_Figure_2.jpeg)\\n\\n#### **Task: Manual Constructed Sudoku Abduction Task**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Manual Constructed Sudoku Abduction Task**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Output:**\\n\\nis not valid, \\'g\\\\_0\\' returns \\'False\\'.\\n\\n- The masked board is then returned.\\n\\nwhat it does. Let\\'s break down the function step by step:\\n\\ncomplete board, and \\'f\\' masked 51 random positions.\\n\\n[\"3\", \"4\", \"5\", \"2\", \"8\", \"6\", \"1\", \"7\", \"9\"] ] \"\\'\\n\\nboard will produce the given output.\\n\\n\"8\", \"6\", \"1\", \"7\", \"9\"] ] \"\\'\\n\\nsuch that after masking 51 positions, we get the output shown.\\n\\n```\\n```python\\nModel Input: Here is the function f and the output: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\\n[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\\n[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\\n[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ], please predict the input.\\nimport random\\nfrom typing import List\\nimport copy\\ndef g_0(board: List[List[str]]) -> bool:\\n    def is_valid_block(block):\\n        return sorted(block) == [str(i) for i in range(1, 10)]\\n    for row in board:\\n        if not is_valid_block(row):\\n             return False\\n    for col in zip(*board):\\n        if not is_valid_block(col):\\n             return False\\n    for box_row in range(0, 9, 3):\\n        for box_col in range(0, 9, 3):\\n             block = [\\n                 board[r][c]\\n                 for r in range(box_row, box_row + 3)\\n                 for c in range(box_col, box_col + 3)\\n             ]\\n             if not is_valid_block(block):\\n                 return False\\n    return True\\ndef f(board: List[List[str]]) -> List[List[str]]:\\n    for i in range(9):\\n        for j in range(9):\\n             if board[i][j] == \".\":\\n                 raise ValueError(\"Invalid board\")\\n    num_to_mask = 51\\n    if not g_0(board):\\n        raise ValueError(\"Invalid board\")\\n    masked_board = copy.deepcopy(board)\\n    all_positions = [(i, j) for i in range(9) for j in range(9)]\\n    random.shuffle(all_positions)\\n    for i, j in all_positions[:num_to_mask]:\\n        masked_board[i][j] = \".\"\\n    return masked_board\\n                                            45\\n```\\n```\\nTo determine the input that produced the given output, we need to analyze the function \\'f\\' and understand\\n\\n1. \\\\*\\\\*Input Validation in \\'g\\\\_0\\'\\\\*\\\\*: - The function \\'g\\\\_0\\' checks if the given board is valid. - A board is valid if each row, each column, and each 3x3 subgrid contains the digits 1 through 9 exactly once. - If the board\\n\\n2. \\\\*\\\\*Input Validation in \\'f\\'\\\\*\\\\*: - The function \\'f\\' frst checks if there are any \".\" in the board. If there are, it\\n\\n3. \\\\*\\\\*Masking the Board\\\\*\\\\*: - If the board is valid (i.e., \\'g\\\\_0(board)\\' returns \\'True\\'), the function \\'f\\' proceeds to mask the board. - It creates a copy of the board and then randomly selects 51 positions to mask with \".\".\\n\\n\"\\' We can see that the board has 51 positions masked with \".\". Therefore, the input board must have been a\\n\\nLet\\'s construct a complete board that, when masked, can produce the given output. We need to fnd a board\\n\\nHere is a complete board that matches the structure of the output: \"\\'python [ [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"], [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"], [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"], [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"], [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"], [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"], [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"], [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"],\\n\\n1. The board is complete with no \".\". 2. The board is valid because each row, each column, and each 3x3 subgrid contains the digits 1 through 9 exactly once. 3. The function \\'f\\' will mask 51 random positions. Given the random nature of the masking, we need to ensure that the positions masked match the positions of \".\" in the output. Since the positions are random, we can assume that the function \\'f\\' with this complete\\n\\nTherefore, the input that produced the output is: \"\\'input [ [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"], [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"], [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"], [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"], [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"], [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"], [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"], [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"], [\"3\", \"4\", \"5\", \"2\",\\n\\nFigure 40. **Vibe Check 1: Sudoku.**\\n\\nGiven the output: \"\\'output [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\n\\nraises a \\'ValueError\\'. - This means the input board to \\'f\\' must be a complete board with no \".\".\\n\\nLet\\'s verify that this board, when passed to the function \\'f\\', produces the given output.\\n\\n[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ], please predict the input.\\n\\n**Model Input:** Here is the function f and the output: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\\n\\n# **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Task: Manual Constructed Sudoku Abduction Task**\\n\\nTo determine the input that produced the given output, we need to analyze the function \\'f\\' and understand what it does. Let\\'s break down the function step by step:\\n\\n1. \\\\*\\\\*Input Validation in \\'g\\\\_0\\'\\\\*\\\\*: - The function \\'g\\\\_0\\' checks if the given board is valid. - A board is valid\\n\\nif each row, each column, and each 3x3 subgrid contains the digits 1 through 9 exactly once. - If the board is not valid, \\'g\\\\_0\\' returns \\'False\\'.\\n\\n2. \\\\*\\\\*Input Validation in \\'f\\'\\\\*\\\\*: - The function \\'f\\' frst checks if there are any \".\" in the board. If there are, it raises a \\'ValueError\\'. - This means the input board to \\'f\\' must be a complete board with no \".\".\\n\\n3. \\\\*\\\\*Masking the Board\\\\*\\\\*: - If the board is valid (i.e., \\'g\\\\_0(board)\\' returns \\'True\\'), the function \\'f\\' proceeds to mask the board. - It creates a copy of the board and then randomly selects 51 positions to mask with \".\". - The masked board is then returned.\\n\\nGiven the output: \"\\'output [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] \"\\' We can see that the board has 51 positions masked with \".\". Therefore, the input board must have been a complete board, and \\'f\\' masked 51 random positions.\\n\\nLet\\'s construct a complete board that, when masked, can produce the given output. We need to fnd a board such that after masking 51 positions, we get the output shown.\\n\\nHere is a complete board that matches the structure of the output: \"\\'python [ [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"], [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"], [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"], [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"], [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"], [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"], [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"], [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"], [\"3\", \"4\", \"5\", \"2\", \"8\", \"6\", \"1\", \"7\", \"9\"] ] \"\\'\\n\\nLet\\'s verify that this board, when passed to the function \\'f\\', produces the given output.\\n\\n1. The board is complete with no \".\". 2. The board is valid because each row, each column, and each 3x3 subgrid contains the digits 1 through 9 exactly once. 3. The function \\'f\\' will mask 51 random positions. Given the random nature of the masking, we need to ensure that the positions masked match the positions of \".\" in the output. Since the positions are random, we can assume that the function \\'f\\' with this complete\\n\\nboard will produce the given output.\\n\\nTherefore, the input that produced the output is: \"\\'input [ [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"], [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"], [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"], [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"], [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"], [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"], [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"], [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"], [\"3\", \"4\", \"5\", \"2\", \"8\", \"6\", \"1\", \"7\", \"9\"] ] \"\\'\\n\\n<span id=\"page-45-0\"></span>Figure 40. **Vibe Check 1: Sudoku.** *Figure 40.* **Vibe Check 1: Sudoku Solver.** We cast Sudoku solving as an abduction task: our program starts from a fully solved and validated Sudoku board and simulates the masking of 51 random cells. The masked board is then presented as output, and the model is tasked with inferring the original input \u2014 effectively solving the puzzle backwards. An example solution is shown above, where AZR-Coder-14b verifies its initial guess before correctly answering. Generation parameters: temperature=0.6.\\n\\n46\\n\\n```\\n```python\\nTask: Manually Constructed Sum Product Game Solve Abduction Task\\nModel Input: Here is the function f and the output: \\'True\\', please predict the input.\\ndef g_3():\\n    return [(x, y) for x in range(2, 101) for y in range(x + 1, 101) if x + y <= 100]\\ndef g_2(pairs):\\n    d = {}\\n    for (x, y) in pairs:\\n        s = x + y\\n        d.setdefault(s, []).append((x, y))\\n    return d\\ndef g_1(pairs):\\n    d = {}\\n    for (x, y) in pairs:\\n        p = x * y\\n        d.setdefault(p, []).append((x, y))\\n    return d\\ndef g_0():\\n    pairs = g_3()\\n    sum_dict = g_2(pairs)\\n    prod_dict = g_1(pairs)\\n    allowed_sums = [s for s, candidate_pairs in sum_dict.items() \\\\\\n    if all(len(prod_dict[x * y]) > 1 for (x, y) in candidate_pairs)]\\n    candidates_after_S = [pair for pair in pairs if pair[0] + pair[1] in allowed_sums]\\n    new_prod_dict = g_1(candidates_after_S)\\n    unique_products = {prod: pair_list for prod, pair_list in new_prod_dict.items() \\\\\\n    if len(pair_list) == 1}\\n    final_candidates = []\\n    for s in allowed_sums:\\n        valid_pairs = [pair for pair in candidates_after_S \\\\\\n        if pair[0] + pair[1] == s and (pair[0] * pair[1]) in unique_products]\\n        if len(valid_pairs) == 1:\\n            final_candidates.append(valid_pairs[0])\\n    return sorted(set(final_candidates))\\ndef f(x, y):\\n    if not (isinstance(x, int) and isinstance(y, int)):\\n        return False\\n    if x <= 1 or y <= 1 or y <= x or (x + y) > 100:\\n        return False\\n    final_candidates = g_0()\\n    return len(final_candidates) == 1 and final_candidates[0] == (x, y)\\n```\\n```\\niterates through the list. Then, it checks for each pair of accumulated sums if their diference equals the target. If such a pair is found, it returns the accumulated sum at the frst index of the pair.\\n\\nTo fnd one possible input that produces the output 1, we need to fnd a scenario where the diference between any two accumulated\\\\_values equals the target, and the frst accumulated\\\\_values that\\n\\nFigure 41. **Solve Abduction Task Example.** A more detailed version of the example shown in main Figure 7. The model is solving an\\n\\nSince no pair satisfes the condition, the function will not return any value. This doesn\\'t match our output. Let\\'s try another example.\\n\\nGiven the complexity and the fact that no simple example seems to work, let\\'s try a more complex scenario:\\n\\nThe pair (i=1, j=2) satisfes the condition, and the function returns the frst accumulated value in this pair, which is 3. This still doesn\\'t match our output.\\n\\nThe pair (i=1, j=2) satisfes the condition, and the function returns the frst accumulated value in this pair, which is 1. This matches our output.\\n\\n**Model Output:**\\n\\nsatisfes this condition is 1. Let\\'s consider a simple example: -numbers = [1, 2] -target = 1\\n\\nConsider:\\n\\n-numbers = [1, 0] -target = 1 Step-by-step calculation:\\n\\n...(shortened)\\n\\n-numbers = [2, -1, 1] -target = 1 Step-by-step calculation:\\n\\nHere\\'s the step-by-step calculation:\\n\\n1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 2 = 3, accumulated\\\\_values = [1, 3] -Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target)\\n\\n1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 0 = 1, accumulated\\\\_values = [1, 1] -Check for pair (i=0, j=1): 1 - 1 = 0 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 1 - 1 = 0 (not equal to target)\\n\\n1. current\\\\_sum = 0 + 2 = 2, accumulated\\\\_values = [2] 2. current\\\\_sum = 2 - 1 = 1, accumulated\\\\_values = [2, 1] 3. current\\\\_sum = 1 + 1 = 2, accumulated\\\\_values = [2, 1, 2] -Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target) -Check for pair (i=0, j=2): 2 - 2 = 0 (not equal to target) -Check for pair (i=1, j=2): 2 - 1 = 1 (equal to target)\\n\\nabduction task (predict input).\\n\\nTherefore, one possible input that could produce the output 1 is: [2, -1, 1], 1\\n\\n# **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nthe function \\'f(x, y)\\' returns \\'True\\' if the following conditions are met:\\n\\n1. \\'x\\' and \\'y\\' are both integers.\\n\\n2. \\'x\\' and \\'y\\' satisfy \\'1 < x < y\\' and \\'x + y <= 100\\'.\\n\\n3. The fnal candidates after applying the conditions in \\'g\\\\_0\\' are exactly one pair, and that pair is \\'(x, y)\\'.\\n\\nLet\\'s analyze the function \\'g\\\\_0\\' step by step to understand what it does:\\n\\n1. \\'pairs = g\\\\_3()\\' generates all pairs \\'(x, y)\\' such that \\'2 <= x < y <= 100\\' and \\'x + y <= 100\\'.\\n\\n**Task: Manually Constructed Sum Product Game Solve Abduction Task**\\n\\n**Model Input:** Here is the function f and the output: \\'True\\', please predict the input.\\n\\n2. \\'sum\\\\_dict = g\\\\_2(pairs)\\' creates a dictionary where the keys are the sums of the pairs and the values are lists of pairs that add up to that sum.\\n\\n3. \\'prod\\\\_dict = g\\\\_1(pairs)\\' creates a dictionary where the keys are the products of the pairs and the values are lists of pairs that\\n\\nhave that product.\\n\\n4. \\'allowed\\\\_sums = [s for s, candidate\\\\_pairs in sum\\\\_dict.items() if all(len(prod\\\\_dict[x \\\\* y]) > 1 for (x, y) in candidate\\\\_pairs)]\\' flters out the sums \\'s\\' for which all pairs \\'(x, y)\\' that add up to \\'s\\' have more than one pair with the same product.\\n\\n5. \\'candidates\\\\_after\\\\_S = [pair for pair in pairs if pair[0] + pair[1] in allowed\\\\_sums]\\' flters out the pairs whose sum is in \\'allowed\\\\_sums\\'.\\n\\n6. \\'new\\\\_prod\\\\_dict = g\\\\_1(candidates\\\\_after\\\\_S)\\' creates a new product dictionary using the fltered pairs.\\n\\n7. \\'unique\\\\_products = prod: pair\\\\_list for prod, pair\\\\_list in new\\\\_prod\\\\_dict.items() if len(pair\\\\_list) == 1\\' creates a dictionary of products that have exactly one pair.\\n\\n8. \\'fnal\\\\_candidates = []\\' initializes a list of fnal candidates.\\n\\n9. The loop \\'for s in allowed\\\\_sums:\\' iterates over each sum in \\'allowed\\\\_sums\\' and checks if there is exactly one pair \\'(x, y)\\' such that \\'x + y = s\\' and \\'x \\\\* y\\' is in \\'unique\\\\_products\\'. If so, this pair is added to \\'fnal\\\\_candidates\\'. 10. The function returns \\'sorted(set(fnal\\\\_candidates))\\', which should be a list containing exactly one pair if the conditions are met.\\n\\nGiven that the output is \\'True\\', it means that there is exactly one pair \\'(x, y)\\' that satisfes all the conditions. Let\\'s identify this pair.\\n\\nTo do this, we need to understand the mathematical conditions and constraints: 1. \\'1 < x < y\\' and \\'x + y <= 100\\'.\\n\\n2. The pair \\'(x, y)\\' must be the only pair whose sum is in \\'allowed\\\\_sums\\' and whose product is unique among the pairs with the same sum.\\n\\nBy analyzing the constraints and the nature of the problem, we can deduce that the pair \\'(x, y)\\' must be such that the sum \\'x + y\\' is unique in the sense that all pairs adding up to this sum have products that are not unique, except for this pair.\\n\\nAfter detailed analysis or by running the code with diferent values, we fnd that the pair \\'(x, y) = (4, 13)\\' satisfes all the conditions. Let\\'s verify:\\n\\n1. \\'1 < 4 < 13\\' and \\'4 + 13 = 17 <= 100\\'.\\n\\n\"\\'\\n\\n2. We need to check the \\'allowed\\\\_sums\\' and the uniqueness of the product \\'4 \\\\* 13 = 52\\'.\\n\\nBy running the code or logical deduction, we can confrm that \\'(4, 13)\\' is the only pair that satisfes all the conditions.\\n\\nTherefore, the input that produced the output \\'True\\' is: \"\\'input (4, 13)\\n\\n<span id=\"page-47-0\"></span>Figure 41. **Solve Abduction Task Example.** A more detail[ed version of the exam](https://en.wikipedia.org/wiki/Sum_and_Product_Puzzle)ple shown in main Figure 7. The model is solving an abduction task (predict input). 48 *Figure 41.* **Vibe Check 2: Sum Product Game.** We cast the Sum-Product Game as an abduction task, where when the constraints of the game are satisfied, function \\'f\\' returns True, return False otherwise. AZR-Coder-14b was able to first analyze the complicated constraints, identify candidate solution and verify. Generation parameters: temperature=0.6, top\\\\_p=0.95.\\n\\n# <span id=\"page-48-0\"></span>**D. Alternative Approaches Considered**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-0\\\\\"></span>**D. Alternative Approaches Considered**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nIn this section, we share many of the approaches we tried that did not prove to be particularly helpful for Absolute Zero Reasoner. However, we believe it is especially valuable to share these findings with the community, as they are crucial for guiding future research. Below, we outline each of the additional methods we explored during the development of our project.\\n\\n# <span id=\"page-48-1\"></span>**D.1. Error Deduction Task**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-1\\\\\"></span>**D.1. Error Deduction Task**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nSince programming languages often have error messages, and these messages contain a lot of information about how someone might expect a program to run, we also came up with another task domain: allowing the learner to propose a program *that will produce an error*, and requiring the solver to *deduce what kind of error is raised* when executing this code. We experimented with this additional task alongside the induction (*f*), deduction (*o*), and abduction (*i*) tasks. Unfortunately, we did not observe noticeable changes in downstream performance with this additional task and since it requires more computational resources than our AZR setup, we decided not to incorporate it into our final version. However, we believe further thorough investigation of this is well deserved.\\n\\n# <span id=\"page-48-2\"></span>**D.2. Composite Functions as Curriculum Learning**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-2\\\\\"></span>**D.2. Composite Functions as Curriculum Learning**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nOne valuable property we can leverage from programming languages is the ability to compose functions\u2014that is, to define a function as a composite of other functions, i.e., *f*(*g*(*x*)). In our setting, when generating a program, we can not only require the output to be a valid program but also constrain the LLM to utilize a predefined set of programs within its main function. For example, if the target program to be generated is *<sup>f</sup>*(\u00b7), we can sample a set of previously generated programs {*g*\\\\_0*, . . . , gc*} from <sup>D</sup>, and force a valid program to be *<sup>f</sup>*(*g*\\\\_0*,* \u00b7 \u00b7 \u00b7 *, gc, i*).\\n\\nSince all programs are generated by the LLM itself, this setup allows the model to bootstrap from its earlier generations, automatically increasing the complexity of the generated programs. We interpret this mechanism as a form of curriculum learning: earlier programs in the AZR self-play loop tend to be simpler, and as the loop progresses, they become increasingly complex. By composing newer programs from progressively more difficult earlier ones, the resulting programs naturally inherit this growing difficulty, which in turn challenges the solver step.\\n\\nFor implementation, in generating tasks for abduction and deduction, we begin by sampling a binary decision from a binomial distribution with *p* = 0*.*5. This determines whether the generated program should be a simple program or a composite one. If the sample is 0, we prompt the LLM to generate a standard program along with a corresponding input. If the sample is 1, we prompt the LLM to generate a composite program. To construct the composite, we first sample an integer *<sup>c</sup>* \u223c U(1*,* 3), then uniformly select *<sup>c</sup>* programs from the dataset <sup>D</sup> that are not themselves composite programs. Finally, we prompt the LLM to generate a valid program that incorporates {*g*\\\\_0*, . . . , gc*} as subcomponents, ensuring it composes these selected programs meaningfully. We additionally filter programs that did not utilize all the *c* programs.\\n\\nHowever, we did not observe a significant difference when using this more complex curriculum compared to our simpler and more effective approach. One failure mode we encountered was that the model often defaulted to simply returning \"g(x)\", effectively learning *f*(*g*(*x*)) = *g*(*x*), which failed to introduce any additional difficulty. This trivial behavior undermined the intended challenge, leading us to deprioritize further exploration in this direction. While it may be possible to design a stricter reward mechanism\u2014such as enforcing *<sup>f</sup>*(*g*(*x*)) \u0338<sup>=</sup> *<sup>g</sup>*(*x*) by executing the code via a Python interpreter and penalizing such shortcuts\u2014we leave this to future work.\\n\\n# <span id=\"page-48-3\"></span>**D.3. Toying with the Initial** *p*(*z*)\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-3\\\\\"></span>**D.3. Toying with the Initial** *p*(*z*)\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe investigated a setting where the initial seed buffer (see Section [3.3.1](#page-5-2) on how we generated these), *i.e*. *p*(*z*) in Equation [\\\\(3\\\\)](#page-3-2), is not self-generated by the base model, but instead sourced from the [LeetCode Dataset.](https://huggingface.co/datasets/newfacade/LeetCodeDataset) We only modified this component and ran AZR using the same procedure as before, continuing to add new valid programs to the initialized buffer. We observed an increase in initial performance on coding benchmarks; however, the performance plateaued at roughly the same level after additional training steps, compared to our official AZR setup. Interestingly, math performance was lower than in the official AZR setup, pointing towards that on-policy data may be more beneficial to the learner to bootstrap from for mathematical reasoning. We believe that exploring different strategies for initializing and updating *p*(*z*) is an important and exciting direction for future research. We briefly explored different strategies for sampling reference code, ultimately settling on uniform sampling for its simplicity, though we also experimented with recency-based sampling and observed potential collapse.\\n\\n# <span id=\"page-48-4\"></span>**D.4. Extra Rewards**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-4\\\\\"></span>**D.4. Extra Rewards**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Complexity Rewards.** Code complexity is well studied in software science and could potentially be a good proxy for measuring how hard it is to infer the properties of a piece of code for our reasoning learner. Therefore, for the problem proposer, we can add various measures of complexity\u2014such as Cyclomatic Complexity [\\\\(Ebert et al.,](#page-14-15) [2016\\\\)](#page-14-15), maintainability, etc.\u2014to the reward function to incentivize the proposer to produce more complex programs. For illustration purposes, we tried using the Maintainability measure and the Halstead complexity measure [\\\\(Halstead,](#page-14-16) [1977\\\\)](#page-14-16) as intrinsic rewards. Concretely, we used the complexipy and Radon packages [\\\\(Lopez,](#page-15-18) [2025;](#page-15-18) [Canal,](#page-13-12) [2023\\\\)](#page-13-12) to implement the respective metrics. These are then served as intrinsic rewards during the AZR self-play phase.\\n\\n**Diversity Rewards.** We also attempted using diversity rewards to . Inspired by DiveR-CT [\\\\(Zhao et al.,](#page-18-2) [2025a\\\\)](#page-18-2), we incorporate *code edit distance* as an intrinsic reward. Specifically, we treat the reference programs shown in the prompt as anchors and compute the average code edit distance between the generated program and these anchors. This serves as a measure of diversity in the generated output. Additionally, we explored another diversity-based reward inspired by the notion of *surprise* [\\\\(Zhao et al.,](#page-18-4) [2022\\\\)](#page-18-4). In this approach, we construct a probability distribution over previously encountered input/output pairs that the solver has answered. The reward is then defined as <sup>1</sup> <sup>\u2212</sup> *<sup>p</sup>*(input/output), where *<sup>p</sup>* denotes the empirical probability of a particular input or output. While both strategies were evaluated in our experiments, we did not observe a significant difference in performance. However, we believe this aspect warrants deeper investigation, as diversity rewards remain a promising avenue for strengthening AZR further.\\n\\n**Reward Aggregation.** We tested several ways on how to combine rewards for the proposer and discriminator. First, we separate the reward into extrinsic reward *<sup>r</sup>*extrinsic and a set of intrinsic reward(s) *<sup>I</sup>* <sup>=</sup> {*ri*}, and tested the following strategies to combine them into a single reward,\\n\\n$$r = r\\\\_{\\\\text{extrinsic}} + \\\\sum\\\\_{i}^{|I|} r\\\\_i,\\\\tag{11}$$\\n\\n<span id=\"page-49-1\"></span>\\n$$r = r\\\\_{\\\\text{extinsic}} \\\\cdot \\\\sum\\\\_{i}^{|\\\\mathcal{I}|} r\\\\_i,\\\\tag{12}$$\\n\\n$$r = r\\\\_{\\\\text{extrinsic}} \\\\cdot \\\\prod\\\\_{i}^{|I|} r\\\\_i,\\\\tag{13}$$\\n\\n$$r = r\\\\_{\\\\text{extrinsic}} + \\\\prod\\\\_{i}^{|\\\\mathcal{I}|} r\\\\_i. \\\\tag{14}$$\\n\\nWe found that the simple additive way of combining rewards, a.k.a Equation [\\\\(11\\\\)](#page-49-1), produced the most stable runs, possibly due to less variance.\\n\\n### <span id=\"page-49-0\"></span>**D.5. Environment Transition**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-4\\\\\"></span>**D.4. Extra Rewards**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-49-0\\\\\"></span>**D.5. Environment Transition**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe investigated how the transition function in our coding environment for the proposer. Specifically, after generating a piece of code, we can apply a transformation function on it before giving it making it an valid tuple in our dataset. We investigated two\\n\\n**Removing Comments and Docstrings** In early iterations of our experiments, we noticed that comments and docstrings were sometimes used to explicitly outline what the function was doing, or even served as a partial \"note-taking\" interleaved \"ReAct\" process [\\\\(Yao et al.,](#page-17-1) [2023\\\\)](#page-17-1) of generating code\u2014that is, the model could interleave think and action at the same time, and to make the generated code valid, it used comments to encase its thoughts (Appendix [C.3\\\\)](#page-24-0), similarly observed in DeepSeek-Prover-V2: [\\\\(Ren et al.,](#page-15-3) [2025\\\\)](#page-15-3). We then thought that to make the task harder for the solver, we should occlude this information from it. However, we observed a significant performance drop after removing all comments and docstrings. One explanation for this phenomenon is that the only \"communication\" channel between the proposer and the solver is restricted to the code itself, rather than some kind of \"message\" along with the code. These messages can potentially provide hints to the solver, thus making some otherwise impossible tasks solvable. As a result, the solver is able to learn from its experience and self-bootstrap out of certain unsolvable tasks.\\n\\n**Removing Global Variables.** We observed that some programs contain globally declared variables that may inadvertently leak information about the correct answer\u2014this issue is particularly prevalent in the input induction task generation and solving. Initially, we were concerned that such leakage might lead to wasted computation on trivial or compromised examples. To address this, we developed a systematic procedure to remove globally declared variables from the generated programs.\\n\\nHowever, after applying this cleaning step, we observed a noticeable drop in performance on our self-play reasoning tasks. One possible explanation is that the generation step is unaware of this post-processing modification; since the reward is assigned after the transition function (which includes variable removal), the model may not learn effectively from this mismatch.\\n\\nMoreover, we believe that even when answers are present, the solver still engages in nontrivial reasoning to reach a solution, potentially benefiting from this exposure. This aligns with the idea of rationalization as proposed in STaR [\\\\(Zelikman et al.,](#page-17-16) [2022\\\\)](#page-17-16), where the model pretends to not see the answer but still performs reasoning during learning. Therefore, in our final experiments, we choose not to remove globally declared variables, allowing the self-play loop to naturally incorporate and adapt to such cases.' images={'_page_0_Picture_0.jpeg': <PIL.Image.Image image mode=RGB size=311x123 at 0x75C3516A3640>, '_page_0_Figure_7.jpeg': <PIL.Image.Image image mode=RGB size=1277x477 at 0x75C3516A1420>, '_page_1_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1275x400 at 0x75C3516A1720>, '_page_3_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=621x237 at 0x75C351CBF4C0>, '_page_4_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1101x470 at 0x75C3513D94B0>, '_page_9_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1265x382 at 0x75C352BF0100>, '_page_22_Figure_8.jpeg': <PIL.Image.Image image mode=RGB size=1035x504 at 0x75C3A941EB60>, '_page_23_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1286x632 at 0x75C3A941EF80>, '_page_23_Figure_3.jpeg': <PIL.Image.Image image mode=RGB size=1286x632 at 0x75C3A941F670>, '_page_24_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1289x630 at 0x75C3A941EDD0>, '_page_24_Figure_3.jpeg': <PIL.Image.Image image mode=RGB size=1289x608 at 0x75C3A941F2E0>, '_page_33_Figure_12.jpeg': <PIL.Image.Image image mode=RGB size=1224x411 at 0x75C3A8EAC520>, '_page_34_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=257x25 at 0x75C3A8EAE440>, '_page_34_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=1290x1060 at 0x75C3A8EADE70>, '_page_35_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=252x25 at 0x75C3A8EAFCD0>, '_page_35_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=1298x1060 at 0x75C3A8EAD330>, '_page_36_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=262x26 at 0x75C3A8EAD7B0>, '_page_36_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=1296x1072 at 0x75C3A8EACEB0>, '_page_37_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1299x1087 at 0x75C3A8EAE800>, '_page_42_Figure_4.jpeg': <PIL.Image.Image image mode=RGB size=731x38 at 0x75C3A9444910>, '_page_43_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=644x37 at 0x75C3A941D1E0>} metadata={'table_of_contents': [{'title': 'Absolute Zero: Reinforced Self-play Reasoning with Zero Data', 'heading_level': None, 'page_id': 0, 'polygon': [[53.19140625, 116.8857421875], [516.673828125, 116.8857421875], [516.673828125, 134.78680419921875], [53.19140625, 134.78680419921875]]}, {'title': '1. Introduction', 'heading_level': None, 'page_id': 1, 'polygon': [[54.498779296875, 330.064453125], [132.6796875, 330.064453125], [132.6796875, 343.35107421875], [54.498779296875, 343.35107421875]]}, {'title': '2. The Absolute Zero Paradigm', 'heading_level': None, 'page_id': 2, 'polygon': [[54.46142578125, 350.2638854980469], [215.84291076660156, 350.2638854980469], [215.84291076660156, 362.2190856933594], [54.46142578125, 362.2190856933594]]}, {'title': '2.1. Preliminaries', 'heading_level': None, 'page_id': 2, 'polygon': [[54.797607421875, 370.4440002441406], [137.44371032714844, 370.4440002441406], [137.44371032714844, 381.3531188964844], [54.797607421875, 381.3531188964844]]}, {'title': '2.2. Absolute Zero', 'heading_level': None, 'page_id': 2, 'polygon': [[54.797607421875, 614.7240142822266], [140.748046875, 614.7240142822266], [140.748046875, 625.6331176757812], [54.797607421875, 625.6331176757812]]}, {'title': '3. Absolute Zero Reasoner', 'heading_level': None, 'page_id': 3, 'polygon': [[54.61083984375, 415.1498718261719], [190.2587890625, 415.1498718261719], [190.2587890625, 427.1050720214844], [54.61083984375, 427.1050720214844]]}, {'title': '3.1. Two Roles in One: Proposer and Solver', 'heading_level': None, 'page_id': 3, 'polygon': [[54.61083984375, 568.5080108642578], [257.4219665527344, 568.5080108642578], [257.4219665527344, 579.4171142578125], [54.61083984375, 579.4171142578125]]}, {'title': '3.2. Learning Different Modes of Reasoning: Deduction, Induction, and Abduction\\nAbsolute Zero: Reinforced Self-play Reasoning with Zero Data', 'heading_level': None, 'page_id': 5, 'polygon': [[53.9384765625, 67.06463623046875], [439.451171875, 67.06463623046875], [439.451171875, 79.51507568359375], [53.9384765625, 79.51507568359375]]}, {'title': '3.3. Absolute Zero Reasoner Learning Algorithm\\n3.3. Absolute Zero Reasoner Learning Algorithm', 'heading_level': None, 'page_id': 5, 'polygon': [[54.5361328125, 483.15008544921875], [291.88543701171875, 483.15008544921875], [291.88543701171875, 499.943115234375], [54.5361328125, 499.943115234375]]}, {'title': '3.3.1. BUFFER INITIALIZATION\\nTo initialize AZR self-play, we frst generate a seed set of valid triplets using\\n3.3.1. Buffer Initialization', 'heading_level': None, 'page_id': 5, 'polygon': [[55.05908203125, 564.9101104736328], [335.7440185546875, 564.9101104736328], [335.7440185546875, 592.0727996826172], [55.05908203125, 592.0727996826172]]}, {'title': '3.3.2. Task Proposal Inputs and Buffer Management', 'heading_level': None, 'page_id': 6, 'polygon': [[54.685546875, 362.24591064453125], [308.1165771484375, 362.24591064453125], [308.1165771484375, 375.310546875], [54.685546875, 375.310546875]]}, {'title': '3.3.3. Constructing Valid Tasks', 'heading_level': None, 'page_id': 6, 'polygon': [[54.76025390625, 496.7949523925781], [208.84373474121094, 496.7949523925781], [208.84373474121094, 510.08203125], [54.76025390625, 510.08203125]]}, {'title': '3.3.4. Answer Verification', 'heading_level': None, 'page_id': 7, 'polygon': [[54.797607421875, 288.1579284667969], [184.078125, 288.1579284667969], [184.078125, 300.48046875], [54.797607421875, 300.48046875]]}, {'title': '3.3.5. Task-Relative REINFORCE++', 'heading_level': None, 'page_id': 7, 'polygon': [[54.76025390625, 362.18389892578125], [226.54920959472656, 362.18389892578125], [226.54920959472656, 374.537109375], [54.76025390625, 374.537109375]]}, {'title': '4. Experiments', 'heading_level': None, 'page_id': 7, 'polygon': [[54.498779296875, 497.7768859863281], [133.576171875, 497.7768859863281], [133.576171875, 509.7320861816406], [54.498779296875, 509.7320861816406]]}, {'title': '4.1. Experiment Setup', 'heading_level': None, 'page_id': 7, 'polygon': [[54.46142578125, 517.9570007324219], [158.96731567382812, 517.9570007324219], [158.96731567382812, 528.8661193847656], [54.46142578125, 528.8661193847656]]}, {'title': '4.2. Results', 'heading_level': None, 'page_id': 8, 'polygon': [[55.1337890625, 478.7578125], [109.072265625, 478.7578125], [109.072265625, 490.5091247558594], [55.1337890625, 490.5091247558594]]}, {'title': \"Input: [1,2,3,4,5], 5\\nModel-proposed Task Response of Predict Input\\nLet's analyze the code snippet \u2026(analysis) To find one possible input that produces \\nthe output 1, we need to find a scenario where \u2026(analysis) \\nLet's consider a simple example: numbers = [1, 2], target = 1\\nHere's the step-by-step calculation:\\n1. current_sum = 0 + 1 = 1, accumulated_values = [1]\\n2. current_sum = 1 + 2 = 3, accumulated_values = [1, 3]\\n-Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target)\\n-Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target)\\n-Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target)\\nSince no pair satisfies the condition, the function will not return any value. This \\ndoesn't match our output. Let's try another example \u2026(Tried 3 more examples) \\nGiven the complexity and the fact that no simple example seems to work, let's \\ntry a more complex scenario: numbers = [2, -1, 1], target = 1\\nStep-by-step calculation:\\n1. current_sum = 0 + 2 = 2, accumulated_values = [2]\\n2. current_sum = 2 - 1 = 1 , accumulated_values = [2, 1]\\n3. current_sum = 1 + 1 = 2, accumulated_values = [2, 1, 2]\\n- Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target)\", 'heading_level': None, 'page_id': 10, 'polygon': [[54.5361328125, 64.775390625], [533.3927612304688, 64.775390625], [533.3927612304688, 249.7578125], [54.5361328125, 249.7578125]]}, {'title': '5. Related Work', 'heading_level': None, 'page_id': 11, 'polygon': [[54.8349609375, 371.25], [139.25390625, 371.25], [139.25390625, 383.9450988769531], [54.8349609375, 383.9450988769531]]}, {'title': '6. Conclusion and Discussion', 'heading_level': None, 'page_id': 12, 'polygon': [[54.648193359375, 265.2890625], [203.5888671875, 265.2890625], [203.5888671875, 277.39202880859375], [54.648193359375, 277.39202880859375]]}, {'title': 'References', 'heading_level': None, 'page_id': 13, 'polygon': [[54.76025390625, 67.798828125], [110.48174285888672, 67.798828125], [110.48174285888672, 79.7540283203125], [54.76025390625, 79.7540283203125]]}, {'title': 'Appendix', 'heading_level': None, 'page_id': 19, 'polygon': [[53.86376953125, 67.04736328125], [105.26927947998047, 67.04736328125], [105.26927947998047, 79.7540283203125], [53.86376953125, 79.7540283203125]]}, {'title': 'Appendix Contents', 'heading_level': None, 'page_id': 19, 'polygon': [[54.01318359375, 88.171875], [156.287109375, 88.171875], [156.287109375, 101.12005615234375], [54.01318359375, 101.12005615234375]]}, {'title': 'A. Reinforcement Learning with Verifiable Rewards.', 'heading_level': None, 'page_id': 20, 'polygon': [[54.38671875, 67.798828125], [323.18865966796875, 67.798828125], [323.18865966796875, 79.7540283203125], [54.38671875, 79.7540283203125]]}, {'title': 'B. Implementation Details', 'heading_level': None, 'page_id': 20, 'polygon': [[54.498779296875, 291.08587646484375], [190.2041015625, 291.08587646484375], [190.2041015625, 303.04107666015625], [54.498779296875, 303.04107666015625]]}, {'title': 'C. More Results', 'heading_level': None, 'page_id': 21, 'polygon': [[54.087890625, 318.462890625], [138.65625, 318.462890625], [138.65625, 331.29107666015625], [54.087890625, 331.29107666015625]]}, {'title': 'C.1. Out-of-Distribution Performance Breakdown', 'heading_level': None, 'page_id': 21, 'polygon': [[54.087890625, 338.958984375], [287.3565368652344, 338.958984375], [287.3565368652344, 350.42510986328125], [54.087890625, 350.42510986328125]]}, {'title': 'C.2. In-Distribution Results', 'heading_level': None, 'page_id': 21, 'polygon': [[54.199951171875, 414.5625], [184.974609375, 414.5625], [184.974609375, 426.1640625], [54.199951171875, 426.1640625]]}, {'title': 'C.3. Interplay Between Propose and Solve Roles', 'heading_level': None, 'page_id': 21, 'polygon': [[54.31201171875, 522.84375], [277.3125, 522.84375], [277.3125, 534.0861206054688], [54.31201171875, 534.0861206054688]]}, {'title': 'Task: Propose Abduction Task', 'heading_level': None, 'page_id': 26, 'polygon': [[67.423095703125, 71.78521728515625], [211.271484375, 71.78521728515625], [211.271484375, 82.53948974609375], [67.423095703125, 82.53948974609375]]}, {'title': 'Model Input: (k random selected example programs as few-shot input)', 'heading_level': None, 'page_id': 26, 'polygon': [[66.9375, 93.5478515625], [376.822265625, 93.5478515625], [376.822265625, 104.5537109375], [66.9375, 104.5537109375]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 26, 'polygon': [[68.244873046875, 117.0791015625], [151.0576171875, 117.0791015625], [151.0576171875, 131.1024169921875], [68.244873046875, 131.1024169921875]]}, {'title': 'Task: Propose Induction Task', 'heading_level': None, 'page_id': 27, 'polygon': [[68.00311279296875, 117.45489501953125], [207.5361328125, 117.45489501953125], [207.5361328125, 128.19818115234375], [68.00311279296875, 128.19818115234375]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 27, 'polygon': [[67.833984375, 274.27545166015625], [137.20059204101562, 274.27545166015625], [137.20059204101562, 285.01873779296875], [67.833984375, 285.01873779296875]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 28, 'polygon': [[66.11572265625, 319.4631042480469], [136.40078735351562, 319.4631042480469], [136.40078735351562, 330.282958984375], [66.11572265625, 330.282958984375]]}, {'title': 'Task: Solve Deduction Task (Example 1)', 'heading_level': None, 'page_id': 29, 'polygon': [[67.31103515625, 88.1961669921875], [255.498046875, 88.1961669921875], [255.498046875, 98.988525390625], [67.31103515625, 98.988525390625]]}, {'title': 'C.4. Complexity and Diversity Metrics of AZR Proposed Tasks', 'heading_level': None, 'page_id': 31, 'polygon': [[54.685546875, 314.595703125], [347.8359375, 314.595703125], [347.8359375, 326.7811279296875], [54.685546875, 326.7811279296875]]}, {'title': 'C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.', 'heading_level': None, 'page_id': 31, 'polygon': [[54.685546875, 461.35546875], [386.68359375, 461.35546875], [386.68359375, 473.68011474609375], [54.685546875, 473.68011474609375]]}, {'title': 'Task: Solve Deduction Task (Example 2)', 'heading_level': None, 'page_id': 32, 'polygon': [[66.9375, 101.36376953125], [254.00390625, 101.36376953125], [254.00390625, 112.1390380859375], [66.9375, 112.1390380859375]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 32, 'polygon': [[67.81330108642578, 280.2999267578125], [136.86106872558594, 280.2999267578125], [136.86106872558594, 291.0751647949219], [67.81330108642578, 291.0751647949219]]}, {'title': 'Task: Solve Deduction Task (Llama 8B)', 'heading_level': None, 'page_id': 33, 'polygon': [[66.72824096679688, 77.409423828125], [251.912109375, 77.409423828125], [251.912109375, 88.25054931640625], [66.72824096679688, 88.25054931640625]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 33, 'polygon': [[67.08599853515625, 304.85662841796875], [136.5559844970703, 304.85662841796875], [136.5559844970703, 315.69775390625], [67.08599853515625, 315.69775390625]]}, {'title': 'Task: Manual Constructed Sudoku Abduction Task', 'heading_level': None, 'page_id': 44, 'polygon': [[65.99082946777344, 70.43548583984375], [306.5485534667969, 70.43548583984375], [306.5485534667969, 81.30426025390625], [65.99082946777344, 81.30426025390625]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 45, 'polygon': [[65.14453125, 71.15625], [136.564453125, 71.15625], [136.564453125, 83.55621337890625], [65.14453125, 83.55621337890625]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 47, 'polygon': [[64.77099609375, 71.349609375], [137.23681640625, 71.349609375], [137.23681640625, 83.586181640625], [64.77099609375, 83.586181640625]]}, {'title': 'D. Alternative Approaches Considered', 'heading_level': None, 'page_id': 48, 'polygon': [[54.2373046875, 67.482421875], [252.9580078125, 67.482421875], [252.9580078125, 79.7540283203125], [54.2373046875, 79.7540283203125]]}, {'title': 'D.1. Error Deduction Task', 'heading_level': None, 'page_id': 48, 'polygon': [[54.685546875, 132.64453125], [180.0439453125, 132.64453125], [180.0439453125, 144.7940673828125], [54.685546875, 144.7940673828125]]}, {'title': 'D.2. Composite Functions as Curriculum Learning', 'heading_level': None, 'page_id': 48, 'polygon': [[54.61083984375, 229.904296875], [291.955078125, 229.904296875], [291.955078125, 242.078125], [54.61083984375, 242.078125]]}, {'title': 'D.3. Toying with the Initial p(z)', 'heading_level': None, 'page_id': 48, 'polygon': [[54.46142578125, 519.36328125], [203.203125, 519.36328125], [203.203125, 532.0762634277344], [54.46142578125, 532.0762634277344]]}, {'title': 'D.4. Extra Rewards', 'heading_level': None, 'page_id': 48, 'polygon': [[54.76025390625, 649.6875], [147.69580078125, 649.6875], [147.69580078125, 661.8531036376953], [54.76025390625, 661.8531036376953]]}, {'title': 'D.5. Environment Transition', 'heading_level': None, 'page_id': 49, 'polygon': [[54.61083984375, 421.3180236816406], [189.45828247070312, 421.3180236816406], [189.45828247070312, 432.2271423339844], [54.61083984375, 432.2271423339844]]}], 'page_stats': [{'page_id': 0, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 147), ('Line', 39), ('Text', 4), ('PageHeader', 2), ('Picture', 1), ('SectionHeader', 1), ('Figure', 1), ('Caption', 1), ('Footnote', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 1, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 172), ('Line', 43), ('Text', 5), ('Caption', 2), ('Figure', 1), ('SectionHeader', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 2, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 329), ('Line', 73), ('ListItem', 6), ('Text', 4), ('SectionHeader', 3), ('TextInlineMath', 3), ('Equation', 2), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 3, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 504), ('Line', 119), ('TextInlineMath', 4), ('Reference', 3), ('Text', 2), ('SectionHeader', 2), ('PageHeader', 1), ('Figure', 1), ('Caption', 1), ('Equation', 1), ('PageFooter', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 4, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 330), ('Line', 74), ('Text', 5), ('Equation', 3), ('Reference', 3), ('TextInlineMath', 2), ('PageHeader', 1), ('Figure', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 5, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 1085), ('Line', 145), ('ListItem', 9), ('Text', 5), ('Reference', 4), ('SectionHeader', 3), ('TextInlineMath', 3), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 6, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 720), ('Line', 111), ('TableCell', 76), ('ListItem', 3), ('Reference', 3), ('SectionHeader', 2), ('Text', 2), ('PageHeader', 1), ('Table', 1), ('TextInlineMath', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 7, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 497), ('Line', 78), ('Text', 6), ('TextInlineMath', 4), ('SectionHeader', 4), ('Reference', 3), ('Equation', 2), ('PageHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 8, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 532), ('TableCell', 262), ('Line', 88), ('Text', 6), ('Caption', 1), ('Table', 1), ('SectionHeader', 1), ('PageFooter', 1), ('TableGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 9, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 387), ('Line', 98), ('Text', 8), ('Caption', 1), ('Figure', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 10, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 227), ('Line', 59), ('Text', 9), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 11, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 263), ('Line', 52), ('TableCell', 49), ('Text', 7), ('Table', 2), ('SectionHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 12, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 230), ('Line', 52), ('Text', 8), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 13, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 154), ('Line', 52), ('ListItem', 13), ('Reference', 13), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 14, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 187), ('Line', 49), ('Reference', 17), ('ListItem', 15), ('Text', 3), ('ListGroup', 2), ('PageHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 15, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 169), ('Line', 49), ('ListItem', 19), ('Reference', 19), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 16, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 182), ('Line', 51), ('ListItem', 17), ('Reference', 17), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 17, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 168), ('Line', 50), ('ListItem', 17), ('Reference', 17), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 18, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 135), ('Line', 40), ('ListItem', 11), ('Reference', 11), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 19, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 88), ('TableCell', 40), ('Line', 18), ('SectionHeader', 2), ('PageHeader', 1), ('TableOfContents', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 20, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 317), ('Line', 64), ('TableCell', 43), ('Text', 8), ('Reference', 3), ('SectionHeader', 2), ('Equation', 2), ('PageHeader', 1), ('Table', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 21, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 263), ('TableCell', 64), ('Line', 48), ('Reference', 6), ('Text', 5), ('SectionHeader', 4), ('Table', 3), ('PageFooter', 2), ('Caption', 1), ('Code', 1), ('TableGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 22, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 316), ('Line', 45), ('Code', 4), ('Text', 4), ('Reference', 3), ('PageHeader', 1), ('Figure', 1), ('Caption', 1), ('PageFooter', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 23, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 155), ('Line', 45), ('Figure', 2), ('Caption', 2), ('FigureGroup', 2), ('PageHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 24, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 210), ('Line', 47), ('Figure', 2), ('Reference', 2), ('PageHeader', 1), ('Caption', 1), ('Text', 1), ('PageFooter', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 25, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 183), ('Line', 34), ('PageHeader', 1), ('Code', 1), ('Text', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 26, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 312), ('Line', 58), ('SectionHeader', 3), ('Text', 2), ('PageHeader', 1), ('Code', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 27, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 406), ('Line', 49), ('Text', 11), ('SectionHeader', 2), ('PageHeader', 1), ('Code', 1), ('TextInlineMath', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 28, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 205), ('Line', 60), ('Text', 5), ('PageHeader', 1), ('Code', 1), ('SectionHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 29, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 526), ('Line', 60), ('Text', 2), ('PageHeader', 1), ('SectionHeader', 1), ('Code', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 30, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 462), ('Line', 68), ('Text', 3), ('PageHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 31, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 279), ('TableCell', 100), ('Line', 45), ('Text', 4), ('Reference', 3), ('TextInlineMath', 2), ('SectionHeader', 2), ('Caption', 1), ('Table', 1), ('PageFooter', 1), ('TableGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 32, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 269), ('Line', 48), ('Text', 10), ('SectionHeader', 2), ('Code', 2), ('PageHeader', 1), ('ListItem', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 33, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 218), ('Line', 60), ('Text', 9), ('SectionHeader', 2), ('Reference', 2), ('PageHeader', 1), ('Code', 1), ('Figure', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 34, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 373), ('Line', 94), ('Figure', 2), ('PageHeader', 1), ('Caption', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 35, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 325), ('Line', 94), ('Figure', 2), ('PageHeader', 1), ('Caption', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 36, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 313), ('Line', 88), ('Figure', 2), ('PageHeader', 1), ('Caption', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 37, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 409), ('Line', 109), ('Caption', 2), ('Text', 2), ('Reference', 2), ('PageHeader', 1), ('Figure', 1), ('PageFooter', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 38, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 47), ('Line', 16), ('Text', 3), ('PageHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 39, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 190), ('Line', 77), ('Text', 3), ('PageHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 40, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 194), ('Line', 79), ('PageHeader', 1), ('Text', 1), ('Caption', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 41, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 156), ('Line', 57), ('PageHeader', 1), ('Code', 1), ('Caption', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 42, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 235), ('Line', 99), ('Code', 2), ('PageHeader', 1), ('Caption', 1), ('Figure', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 43, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 115), ('Line', 47), ('PageHeader', 1), ('Code', 1), ('Figure', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 44, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 345), ('Line', 76), ('Text', 22), ('PageHeader', 1), ('SectionHeader', 1), ('Code', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 45, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 109), ('Line', 47), ('Text', 17), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 46, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 473), ('Line', 82), ('Text', 19), ('PageHeader', 1), ('Code', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 47, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 125), ('Line', 48), ('Text', 26), ('TextInlineMath', 2), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 48, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 253), ('Line', 51), ('SectionHeader', 5), ('Text', 5), ('Reference', 5), ('TextInlineMath', 3), ('PageHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 49, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 254), ('Line', 60), ('Text', 7), ('Equation', 4), ('TextInlineMath', 2), ('Reference', 2), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}], 'debug_data_path': 'debug_data/2505.03335v2'}"
      ],
      "tables": [
        "markdown='![](_page_0_Picture_0.jpeg)\\n\\n# **Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Andrew Zhao** <sup>1</sup> **, Yiran Wu**<sup>3</sup> **, Yang Yue** <sup>1</sup> **, Tong Wu**<sup>2</sup> **, Quentin Xu**<sup>1</sup> **, Yang Yue** <sup>1</sup> **, Matthieu Lin**<sup>1</sup> **, Shenzhi Wang** <sup>1</sup> **, Qingyun Wu**<sup>3</sup> **, Zilong Zheng** <sup>2</sup>*,* **and Gao Huang** <sup>1</sup>*,*\\n\\n1 Tsinghua University 2 Beijing Institute for General Artificial Intelligence 3 Pennsylvania State University\\n\\nzqc21@mails.tsinghua.edu.cn, yiran.wu@psu.edu, zlzheng@bigai.ai, gaohuang@tsinghua.edu.cn\\n\\nReinforcement learning with verifiable rewards (RLVR) has shown promise in enhancing the reasoning capabilities of large language models by learning directly from outcome-based rewards. Recent RLVR works that operate under the *zero setting* avoid supervision in labeling the reasoning process, but still depend on manually curated collections of questions and answers for training. The scarcity of highquality, human-produced examples raises concerns about the long-term scalability of relying on human supervision, a challenge already evident in the domain of language model pretraining. Furthermore, in a hypothetical future where AI surpasses human intelligence, tasks provided by humans may offer limited learning potential for a superintelligent system. To address these concerns, we propose a new RLVR paradigm called *Absolute Zero*, in which a single model learns to propose tasks that maximize its own learning progress and improves reasoning by solving them, without relying on any external data. Under this paradigm, we introduce the Absolute Zero Reasoner (AZR), a system that self-evolves its training curriculum and reasoning ability by using a code executor to both validate proposed code reasoning tasks and verify answers, serving as an unified source of verifiable reward to guide open-ended yet grounded learning. Despite being trained entirely *without external data*, AZR achieves overall SOTA performance on coding and mathematical reasoning tasks, *outperforming existing zero-setting models* that rely on tens of thousands of *in-domain human-curated examples*. Furthermore, we demonstrate that AZR can be effectively applied across different model scales and is compatible with various model classes.\\n\\n![](_page_0_Figure_7.jpeg)\\n\\n*Figure 1.* **Absolute Zero Reasoner (AZR) achieves state-of-the-art performance with ZERO DATA**. Without relying on any gold labels or human-defined queries, Absolute Zero Reasoner trained using our proposed self-play approach demonstrates impressive general reasoning capabilities improvements in both math and coding, despite operating entirely out-of-distribution. Remarkably, AZR surpasses models trained on tens of thousands of expert-labeled in-domain examples in the combined average score across both domains.\\n\\n*Corresponding author(s)*\\n\\n**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n\\n![](_page_1_Figure_1.jpeg)\\n\\nLess Human Supervision\\n\\n<span id=\"page-1-0\"></span>*Figure 2.* **Absolute Zero Paradigm. Supervised learning** relies on human-curated reasoning traces for behavior cloning. **Reinforcement learning from verified rewards**, enables agents to self-learn reasoning, but still depends on expert-defined learning distribution and a respective set of curated QA pairs, demanding domain expertise and manual effort. In contrast, we introduce a new paradigm, **Absolute Zero**, for training reasoning models without any human-curated data. We envision that the agent should autonomously propose tasks optimized for learnability and learn how to solve them using an unified model. The agent learns by interacting with an environment that provides verifiable feedback, enabling reliable and continuous self-improvement entirely without human intervention.\\n\\n# **1. Introduction**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**1. Introduction**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nLarge language models (LLMs) have recently achieved remarkable improvements in reasoning capabilities by employing Reinforcement Learning with Verifiable Rewards (RLVR) [\\\\(Lambert et al.,](#page-15-0) [2024\\\\)](#page-15-0). Unlike methods that explicitly imitate intermediate reasoning steps, RLVR uses only outcome-based feedback, enabling large-scale reinforcement learning over vast task datasets [\\\\(DeepSeek-AI et al.,](#page-13-0) [2025;](#page-13-0) [Team et al.,](#page-16-0) [2025;](#page-16-0) [Jaech et al.,](#page-14-0) [2024;](#page-14-0) [OpenAI,](#page-15-1) [2025b;](#page-15-1)[a\\\\)](#page-15-2). A particularly compelling variant is the *\"zero\"* RLVR paradigm [\\\\(DeepSeek-AI](#page-13-0) [et al.,](#page-13-0) [2025\\\\)](#page-13-0), which forgoes any cold-start distillation data, using neither human-generated nor AI-generated reasoning traces, and applies RLVR directly on the base model with task rewards. However, these methods still depend heavily on expertly curated distributions of reasoning question\u2013answer pairs, which raises serious concerns about their long-term scalability [\\\\(Villalobos et al.,](#page-16-1) [2024\\\\)](#page-16-1). As reasoning models continue to advance, the effort required to construct large-scale, high-quality datasets may soon become unsustainable [\\\\(Yue](#page-17-0) [et al.,](#page-17-0) [2025\\\\)](#page-17-0). A similar scalability bottleneck has already been identified in the domain of LLM pretraining [\\\\(Sutskever et al.,](#page-16-2) [2024\\\\)](#page-16-2). Furthermore, as AI systems continue to evolve and potentially exceed human intellect, an exclusive dependence on human-designed tasks risks imposing constraints on their capacity for autonomous learning and growth [\\\\(Hughes et al.,](#page-14-1) [2024\\\\)](#page-14-1). This underscores the need for a new paradigm that begins to explore possibilities beyond the constraints of human-designed tasks and prepares for a future in which AI systems may surpass human intelligence.\\n\\nTo this end, we propose *\"Absolute Zero\"*, a new paradigm for reasoning models in which the model simultaneously learns to define tasks that maximize learnability and to solve them effectively, enabling self-evolution through self-play without relying on external data. In contrast to prior self-play methods that are limited to narrow domains, fixed functionalities, or learned reward models that are prone to hacking [\\\\(Silver et al.,](#page-16-3) [2017;](#page-16-3) [Chen et al.,](#page-13-1) [2025;](#page-13-1) [2024\\\\)](#page-13-2), the *Absolute Zero* paradigm is designed to operate in open-ended settings while remaining grounded in a real environment. It relies on feedback from the environment as a verifiable source of reward, mirroring how humans learn and reason through interaction with the world, and helps prevent issues such as hacking with neural reward models [\\\\(Hughes](#page-14-1) [et al.,](#page-14-1) [2024\\\\)](#page-14-1). Similar to AlphaZero [\\\\(Silver et al.,](#page-16-3) [2017\\\\)](#page-16-3), which improves through self-play, our proposed paradigm requires no human supervision and learns entirely through self-interaction. We believe the Absolute Zero paradigm represents a promising step toward enabling large language models to autonomously achieve superhuman reasoning capabilities.\\n\\nBuilding on this new reasoning paradigm, we introduce the *Absolute Zero Reasoner (AZR)*, which proposes and solves coding tasks. We cast code executor as an open-ended yet grounded environment, sufficient to both validate task integrity and also provide verifiable feedback for stable training. We let AZR construct three types of coding tasks: infer and reason about one particular element in a program, input, output triplet, which corresponds to three complementary modes of reasoning: induction, abduction, and deduction. We train the entire system end-to-end with a newly proposed reinforcement learning advantage estimator tailored to the multitask nature of the proposed approach.\\n\\nDespite being trained entirely without any in-distribution data, AZR demonstrates remarkable capabilities across diverse reasoning tasks in math and coding. In mathematics, AZR achieves competitive performance compared to zero reasoner models explicitly fine-tuned with domain-specific supervision. In coding tasks, AZR establishes a new state-of-the-art performance, surpassing models specifically trained with code datasets using RLVR. Furthermore, AZR outperforms all previous models by an average of 1.8 absolute points compared to models trained in the \"zero\" setting using in-domain data. These surprising results highlight that general reasoning skills can emerge without human-curated domain targeted data, positioning Absolute Zero as an promising research direction and AZR as a first pivotal milestone. Besides the remarkable results AZR achieved with zero human data for reasoning, we also make very interesting findings summarized below:\\n\\n- **Code priors amplify reasoning.** The base Qwen-Coder-7b model started with math performance 3.6 points lower than Qwen-7b. But after AZR training for both models, the coder variant surpassed the base by 0.7 points, suggesting that strong coding capabilities may potentially amplify overall reasoning improvements after AZR training.\\n- **Cross domain transfer is more pronounced for AZR.** After RLVR, expert code models raise math accuracy by only 0.65 points on average, whereas AZR-Base-7B and AZR-Coder-7B trained on self-proposed code reasoning tasks improve math average by 10.9 and 15.2, respectively, demonstrating much stronger generalized reasoning capability gains.\\n- **Bigger bases yield bigger gains.** Performance improvements scale with model size: the 3B, 7B, and 14B coder models gain +5.7, +10.2, and +13.2 points respectively, suggesting continued scaling is advantageous for AZR.\\n- **Comments as intermediate plans emerge naturally.** When solving code induction tasks, AZR often interleaves step-by-step plans as comments and code (Appendix [C.3\\\\)](#page-24-0), resembling the ReAct prompting framework [\\\\(Yao et al.,](#page-17-1) [2023\\\\)](#page-17-1). Similar behavior has been observed in much larger formal-math models such as DeepSeek Prover v2 (671B) [\\\\(Ren et al.,](#page-15-3) [2025\\\\)](#page-15-3). We therefore believe that allowing the model to use intermediate scratch-pads when generating long-form answers may be beneficial in other domains as well.\\n- **Cognitive Behaviors and Token length depends on reasoning mode.** Distinct cognitive behaviors\u2014such as step-by-step reasoning, enumeration, and trial-and-error all emerged through AZR training, but different behaviors are particularly evident across different types of tasks. Furthermore token counts grow over AZR training, but the magnitude of increase also differs by task types: abduction grows the most because the model performs trial-and-error until output matches, whereas deduction and induction grow modestly.\\n- **Safety alarms ringing.** We observe AZR with Llama3.1-8b occasionally produces concerning chains of thought, we term the \"uh-oh moment\", example shown in Figure [32,](#page-37-0) highlighting the need for future work on safety-aware training [\\\\(Zhang et al.,](#page-18-0) [2025a\\\\)](#page-18-0).\\n\\n# **2. The Absolute Zero Paradigm**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**2. The Absolute Zero Paradigm**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n### **2.1. Preliminaries**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**2. The Absolute Zero Paradigm**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"**2.1. Preliminaries**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Supervised Fine-Tuning (SFT).** SFT requires the datasets of task-rationale-answer demonstrations <sup>D</sup> <sup>=</sup> {(*x, c<sup>\u22c6</sup> , y<sup>\u22c6</sup>* )}, where *x* is the query, *c \u22c6* is the gold chain-of-thought (CoT)) and *y \u22c6* is the gold answer, all provided by human experts or superior AI models. The model trains to imitate the reference responses to minimize the conditional negative log-likelihood [\\\\(Ouyang et al.,](#page-15-4) [2022\\\\)](#page-15-4):\\n\\n$$\\\\mathcal{L}\\\\_{\\\\text{SFT}}(\\\\theta) = - \\\\mathbb{E}\\\\_{(x, c^\\\\*, y^\\\\*) \\\\sim \\\\mathcal{D}} \\\\log \\\\pi\\\\_{\\\\theta} \\\\left( c^\\\\*, y^\\\\* \\\\mid x \\\\right). \\\\tag{1}$$\\n\\nHowever, at the frontier level, there\\'s no stronger model to distill from, and expert human labeling doesn\\'t scale well.\\n\\n**Reinforcement Learning with Verifiable Rewards (RLVR).** To move beyond the limits of pure imitation, RLVR only requires a dataset of task and answer <sup>D</sup> <sup>=</sup> {(*x, y<sup>\u22c6</sup>* )}, without labeled rationale. RLVR allows the model to generate its own CoT and calculate a verifiable reward with the golden answer *r*(*y, y<sup>\u22c6</sup>* ). However, the learning task distribution <sup>D</sup>, with its set of queries and gold answers are still labeled by human experts. The trainable policy *\u03c0<sup>\u03b8</sup>* is optimized to maximize expected reward:\\n\\n$$J\\\\_{\\\\text{RLVR}}(\\\\theta) = \\\\mathbb{E}\\\\_{(x,y^\\\\*) \\\\sim \\\\mathcal{D}, y \\\\sim \\\\pi\\\\_{\\\\theta}(\\\\cdot | x)} \\\\left[ r(y, y^\\\\*) \\\\right]. \\\\tag{2}$$\\n\\nIn summary, both SFT and RLVR still rely on human-curated datasets of either queries, demonstrations, or verifiers, which ultimately limit scalability. The Absolute Zero paradigm removes this dependency by allowing the model to generate, solve, and learn from its own interactions with the environment entirely through self-play.\\n\\n### **2.2. Absolute Zero**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**2. The Absolute Zero Paradigm**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"**2.2. Absolute Zero**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe propose the Absolute Zero paradigm, where during training, the model simultaneously proposes tasks, solves them, and learns from both stages. No external data is required and the model learns entirely through self-play and experience, aided by some environment. We illustrate this paradigm in Figure [2,](#page-1-0) which contrasts Absolute Zero with supervised learning and RLVR, highlighting how our approach eliminates the need for any human-curated data by enabling self-improving task proposal and solution through self-play.\\n\\nTo make the Absolute Zero setting concrete, we now define how one model can act both as the proposer and solver role. To aid understanding, we include an illustration in Figure [3.](#page-3-0) Let *\u03c0<sup>\u03b8</sup>* be our parameterized language model, it is used to play two roles, proposer *\u03c0* propose *\u03b8* and solver *\u03c0* solve *<sup>\u03b8</sup>* during training.\\n\\nThe proposer first samples a proposed task conditioned on variable *<sup>z</sup>*: *<sup>\u03c4</sup>* <sup>\u223c</sup> *\u03c0* propose *\u03b8* (\u00b7|*z*), which will then be validated and used to construct a valid reasoning task together with the environment *e*: (*x, y<sup>\u22c6</sup>* ) \u223c *<sup>f</sup>e*(\u00b7|*<sup>\u03c4</sup>* ), where *<sup>x</sup>* is the task query and *<sup>y</sup> \u22c6* is the gold label. Then the solver produces an answer *<sup>y</sup>* <sup>\u223c</sup> *<sup>\u03c0</sup>* solve *\u03b8* (\u00b7 | *<sup>x</sup>*). Each proposed task *\u03c4* is scored by a *learnability reward r* propose *<sup>e</sup>* (*\u03c4, \u03c0\u03b8*), which captures the expected improvement in *\u03c0<sup>\u03b8</sup>* after training on the task query *x*. Moreover, the same policy also receives a *solution reward r* solve *<sup>e</sup>* (*y, y<sup>\u22c6</sup>* ) for its answer to the task query *x*, with the environment again serv-\\n\\n![](_page_3_Figure_2.jpeg)\\n\\n<span id=\"page-3-2\"></span><span id=\"page-3-0\"></span>*Figure 3.* **The Absolute Zero Loop.** The Absolute Zero loop begins with the agent *\u03c0* proposing task *\u03c4* , which is transformed by *f* with the environment *e* into a validated problem (*x, y<sup>\u22c6</sup>* ), and also emits a reward *r* propose for learnability. Then, a standard RL step follows: the agent solves *x* by producing *y*, receiving reward *r* solve from *e* by matching with *y \u22c6* . *\u03c0* propose and *\u03c0* solve are jointly trained and this process can be repeated indefinitely.\\n\\ning as the verifier. A nonnegative coefficient *\u03bb* balances the trade-off between exploring new, learnable tasks and improving the model\\'s reasoning and problem-solving abilities. We formally define the absolute zero setting\\'s objective as follows:\\n\\n$$\\\\mathcal{J}(\\\\theta) := \\\\max\\\\_{\\\\theta} \\\\ \\\\mathbb{E}\\\\_{z \\\\sim p(z)} \\\\Bigg[ \\\\ \\\\mathbb{E}\\\\_{(x,y^\\\\*) \\\\sim f\\\\_+( \\\\cdot | \\\\tau), \\\\tau \\\\sim \\\\pi^{\\\\text{group}}\\\\_0( \\\\cdot | z) } \\\\bigg[ r^{\\\\text{propose}}\\\\_c(\\\\tau, \\\\pi\\\\_\\\\theta) + \\\\lambda \\\\, \\\\mathbb{E}\\\\_{y \\\\sim \\\\pi^{\\\\text{stop}}\\\\_0( \\\\cdot | z) } \\\\big[ r^{\\\\text{stop}}\\\\_c(y,y^\\\\*) \\\\big] \\\\bigg] \\\\Bigg]. \\\\tag{3}$$\\n\\nNotice that we shift the burden of scaling data away from human experts and onto the proposer policy *\u03c0* propose *\u03b8* and the environment *e*. These two roles are both responsible for defining/evolving the learning task distribution, validating proposed tasks, and providing grounded feedback that supports stable and self-sustainable training. When proposing, *z* acts as a conditional variable that seeds generation of tasks. Practically, *z* can be instantiated by sampling a small subset of past (task, answer) pairs from a continually updated task memory, yet there is no specific implementation tied to the paradigm. To guide the proposing process, we use a learnability reward *r* propose(*\u03c4, \u03c0\u03b8*), which measures how much the model is expected to improve by solving a proposed task *<sup>\u03c4</sup>* . Moreover, the solver reward *r* solve(*y, y*<sup>\u2217</sup> ) evaluates the correctness of the model\\'s output. Together, these two signals guide the model to propose tasks that are both challenging and learnable, while also enhancing its reasoning abilities, ultimately enabling continuous improvement through self-play.\\n\\n# **3. Absolute Zero Reasoner**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nIn this section, we present *Absolute Zero Reasoner* (AZR) as the first attempt to embrace the Absolute Zero Paradigm. In AZR, an unified LLM serves as both a proposer and a solver: it generates tasks to evolve its learning curriculum and attempts to solve them to improve its reasoning capabilities. The model is trained jointly with both roles, learning to create tasks that push the boundary of reasoning capacity while enhancing its ability to solve them effectively (Section [3.1\\\\)](#page-3-1). Within this self-play training paradigm, the model learns from three distinct type of coding tasks, which corresponding to three fundamental modes of reasoning: abduction, deduction and induction (Section [3.2\\\\)](#page-5-0). Using coding tasks is motivated by the Turing-completeness of programming languages [\\\\(Stuart,](#page-16-4) [2015\\\\)](#page-16-4) and empirical evidence that code-based training improves reasoning [\\\\(Aryabumi et al.,](#page-13-3) [2024\\\\)](#page-13-3). We adopt code as an open-ended, expressive, and verifiable medium for enabling reliable task construction and verification (Section [3.3\\\\)](#page-5-1). Finally, the model is updated using a newly proposed advantage estimator designed for multitask learning (Section [3.3.5\\\\)](#page-7-0). We outline the overall algorithm in Algorithm [1](#page-6-0) and highlight an illustration of our Absolute Zero Reasoner approach in Figure [4.](#page-4-0) To expedite future exploration in this area, we also present several attempts that did not yield fruitful results but still warrant discussion in Appendix [D.](#page-48-0)\\n\\n### <span id=\"page-3-1\"></span>**3.1. Two Roles in One: Proposer and Solver**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-3-1\\\\\"></span>**3.1. Two Roles in One: Proposer and Solver**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nLarge language models are naturally suited for implementing AZR in a multitask learning context [\\\\(Radford et al.,](#page-15-5) [2019\\\\)](#page-15-5), as both the formulation of reasoning tasks and their solutions occur within a unified language space. To this end, we propose rewarding a single model for both generating high learning potential tasks and solving them effectively, as specified by the Absolute Zero objective in Equation [\\\\(3\\\\)](#page-3-2). At each iteration of the online rollout, AZR proposes new reasoning tasks by conditioning on the task type (as defined in Section [3.2\\\\)](#page-5-0) and *K* past self-generated examples. The model is explicitly prompted to generate tasks that differ from these examples, promoting diversity and broader coverage of the task space. These task proposals are filtered and transformed into valid reasoning tasks that can be verified using the environment, outlined later in Section [3.3.](#page-5-1) AZR then attempts to solve these newly proposed tasks, receiving grounded feedback for its model responses. Both task proposal and problem solving are trained using reinforcement learning. We now outline the rewards used for each role.\\n\\n**Reward Design.** Prior work has shown that setting appropriate task difficulty is critical for promoting effective learning in reasoning systems [\\\\(Zeng et al.,](#page-18-1) [2025b\\\\)](#page-18-1). Motivated by this, we design a reward function for the proposer that encourages generation of tasks\\n\\n![](_page_4_Figure_1.jpeg)\\n\\n<span id=\"page-4-0\"></span>*Figure 4.* **Absolute Zero Reasoner Training Overview.** At every iteration, Absolute Zero Reasoner first **PROPOSES** a batch of tasks, conditioned on past self-generated triplets stored in a buffer and a particular task type: abduction, deduction, or induction (Section [3.2\\\\)](#page-5-0). From these generated tasks, Python is used to filter and construct valid code-based reasoning questions. A learnability reward *r*propose is also calculated for each proposed task as defined in Equation [\\\\(4\\\\)](#page-4-1). The Absolute Zero Reasoner then **SOLVES** the batch of reasoning questions. Python is used again to verify the generated responses and compute the accuracy reward *r*solve as described in Equation [\\\\(5\\\\)](#page-4-2). Finally, the Absolute Zero Reasoner is jointly updated using both *r*propose and *r*solve across all three task types, using TRR++ (Section [3.3.5\\\\)](#page-7-0).\\n\\nwith meaningful learning potential\u2014neither too easy nor unsolvable for the current solver. Concretely, we use the same language model in its solver role to estimate the *learnability* of a proposed task, a similar type of reward used in unsupervised environment design literature [\\\\(Sukhbaatar et al.,](#page-16-5) [2018\\\\)](#page-16-5). We perform *n* Monte Carlo rollouts of the solver and compute the average success rate: *r*\u00afsolve = 1 *n* P*<sup>N</sup> <sup>i</sup>*=1 *r* (*i*) solve. The proposer\\'s reward is then defined as:\\n\\n$$r\\\\_{\\\\text{propose}} = \\\\begin{cases} 0, & \\\\text{if } \\\\bar{r}\\\\_{\\\\text{solve}} = 0 \\\\text{ or } \\\\bar{r}\\\\_{\\\\text{solve}} = 1\\\\\\\\ 1 - \\\\bar{r}\\\\_{\\\\text{solve}}, & \\\\text{otherwise,} \\\\end{cases}$$\\n(4)\\n\\nThe intuition is that if a task is either trivial to solve (*r*\u00afsolve = 1) or unsolvable (*r*\u00afsolve = 0), the task provides little to no learning signal for the proposer. In contrast, tasks of moderate difficulty, where the solver occasionally succeeds are rewarded the most, as they offer the richest feedback and greatest potential for learning.\\n\\nFor the solver, we assign a simple binary reward based on the correctness of its final output,\\n\\n<span id=\"page-4-2\"></span><span id=\"page-4-1\"></span>\\n$$r\\\\_{\\\\text{solve}} = \\\\mathbb{I}\\\\_{(y=y^\\\\*)},\\\\tag{5}$$\\n\\nwhere *y \u22c6* is the ground-truth answer, and equality is evaluated based on value equality in Python.\\n\\nWith the primary rewards for the proposing and solving roles defined, we adopt the following composite reward structure, which integrates *r*propose and *r*solve with a format-aware penalty inspired by [DeepSeek-AI et al.](#page-13-0) [\\\\(2025\\\\)](#page-13-0):\\n\\n$$R(y\\\\_{\\\\pi}) = \\\\begin{cases} r\\\\_{\\\\text{node}} & \\\\text{if the response is passable, role} \\\\in \\\\{ \\\\text{propose, solve} \\\\} \\\\\\\\ -0.5 & \\\\text{if the response is wrong but well-formation.} \\\\\\\\ -1 & \\\\text{if the answer has formatting errors.} \\\\end{cases}$$\\n (6)\\n\\nwhere *y<sup>\u03c0</sup>* is the response of the language model. The main format that the proposing and solving tasks need to follow is the DeepSeek R1 <think> and <answer> format, as shown in Figure [33.](#page-38-0) Moreover, for the proposer, the reward criterion for format goes beyond simply following the XML structure. As detailed in Section [3.3.3,](#page-6-1) only responses that produce valid triplets and pass the filtering stage are considered to be correctly formatted.\\n\\n#### <span id=\"page-5-0\"></span>**3.2. Learning Different Modes of Reasoning: Deduction, Induction, and Abduction Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-3-1\\\\\"></span>**3.1. Two Roles in One: Proposer and Solver**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"<span id=\\\\\"page-5-0\\\\\"></span>**3.2. Learning Different Modes of Reasoning: Deduction, Induction, and Abduction Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nAZR uses code executor as both a flexible interface and a verifiable environment. This setup enables automatic construction, execution, and validation of code reasoning tasks [\\\\(Stuart,](#page-16-4) [2015;](#page-16-4) [Aryabumi et al.,](#page-13-3) [2024\\\\)](#page-13-3). Give program space P, input space I and output space O of a coding language, we define an AZR reasoning task as a triplet (*p, i, o*), where *<sup>p</sup>* <sup>\u2208</sup> <sup>P</sup> is a program, *<sup>i</sup>* <sup>\u2208</sup> <sup>I</sup> is an input, and *<sup>o</sup>* <sup>\u2208</sup> <sup>O</sup> is the corresponding output produced by running program on input, *o* = *p*(*i*). AZR learns by reasoning about different parts of this task triplet, using three distinct core reasoning modes, each of which focuses on inferring one part of the triplet given the others: **3.2. Learning Diferent Modes of Reasoning: Deduction, Induction, and Abduction** AZR uses code executor as both a fexible interface and a verifable environment. This setup enables automatic construction, execution, and validation of reasoning tasks (Stuart, 2015; Aryabumi et al., 2024). Give program space P, input space I and output space O of a coding language, we defne an AZR reasoning task as a triplet (*p, i, o*), where *p* \u2192 P is a program, *i* \u2192 I is an input, and *o* \u2192 O is the corresponding output produced by running program on input, *o* = *p*(*i*). AZR learns by reasoning about diferent parts of this task\\n\\n- 1. **Deduction**: predicting the output *o* given a program *p* and input *i*, capturing step-by-step logical reasoning. triplet, using three distinct core reasoning modes, each of which focuses on inferring one part of the triplet given the others:\\n\\t- As a *proposer*, AZR is conditioned on the task type *<sup>\u03b1</sup>* <sup>=</sup> deduction and *<sup>K</sup>* reference examples from the deduction buffer <sup>D</sup>deduction (all task buffers are outlined in Section 3.3), and generates a pair (*p, i*). The environment *e* then executes *p*(*i*) to compute *o*, completing the triplet (*p, i, o*), which is added to the buffer if non-error output was produced. 1. **Deduction**: predicting the output *o* given a program *p* and input *i*, capturing step-by-step logical reasoning. \u2022 As a *proposer*, AZR is conditioned on [the](#page-5-1) task type *\u03b1* = deduction and *K* reference examples from the deduction bufer Ddeduction (all task bufers are outlined in Section 3.3), and generates a pair (*p, i*). The environment *e* then executes *p*(*i*) to compute *o*,\\n\\t- As a *solver*, the model receives (*p, i*) and predicts the output *o\u03c0*. The predicted output is verified using type-aware value equality in python to account for possible variations (such as set ordering or fractions). completing the triplet (*p, i, o*), which is added to the bufer if non-error output was produced. \u2022 As a *solver*, the model receives (*p, i*) and predicts the output *o\u03c0*. The predicted output is verifed using type-aware value equality\\n- 2. **Abduction**: inferring a plausible input *i* given the program *p* and an output *o*, resembling trial-and-error or online search. in python to account for possible variations (such as set ordering or fractions).\\n\\t- As a *proposer*, the policy *\u03c0* propose\\'s input and output is almost the same as the proposer for the deduction task, except that the task type *\u03b1* = abduction is changed as an input. The model generates a pair (*p, i*) conditioned on *\u03b1* and reference examples. Then we executes *p*(*i*) and get the triplet (*p, i, o*). 2. **Abduction**: inferring a plausible input *i* given the program *p* and an output *o*, resembling trial-and-error or online search. \u2022 As a *proposer*, the policy *\u03c0*propose\\'s input and output is almost the same as the proposer for the deduction task, except that the task type *\u03b1* = abduction is changed as an input. The model generates a pair (*p, i*) conditioned on *\u03b1* and reference examples. Then we\\n\\t- As a *solver*, the model receives (*p, o*) and predicts *i\u03c0*. The solution is verified by checking whether *p*(*i\u03c0*) = *o*. Since programs may not be bijective, we use *output* value equivalence rather than requiring exact input matches. executes *p*(*i*) and get the triplet (*p, i, o*). \u2022 As a *solver*, the model receives (*p, o*) and predicts *i\u03c0*. The solution is verifed by checking whether *p*(*i\u03c0*) = *o*. Since programs may not be bijective, we use *output* value equivalence rather than requiring exact input matches.\\n- 3. **Induction:** synthesizing a program *<sup>p</sup>* from a set of in-out examples {(*<sup>i</sup> n , o<sup>n</sup>* )}, requiring generalization from partial information. 3. **Induction:** synthesizing a program *p* from a set of in-out examples {(*i <sup>n</sup>, o<sup>n</sup>*)}, requiring generalization from partial information.\\n\\t- As a *proposer*, AZR samples a valid program *<sup>p</sup>* from <sup>D</sup>abduction \u222a Ddeduction, generates *<sup>N</sup>* new inputs and a message *<sup>m</sup>*, and uses the environment to compute corresponding outputs. This forms an extended task representation (*p,* {(*<sup>i</sup> n , o<sup>n</sup>* )}*, m*), which is stored in the induction buffer <sup>D</sup>induction. Since infinitely many functions can map the inputs to the outputs, making the induction task under-constrained, the message *m* helps properly condition the problem for the solver. \u2022 As a *proposer*, AZR samples a valid program *p* from Dabduction \u222aDdeduction, generates *N* new inputs and a message *m*, and uses the environment to compute corresponding outputs. This forms an extended task representation (*p,* {(*i <sup>n</sup>, o<sup>n</sup>*)}*, m*), which is stored in the induction bufer Dinduction. Since infnitely many functions can map the inputs to the outputs, making the induction task under-constrained, the message *m* helps properly condition the problem for the solver.\\n\\t- As a *solver*, the model is shown the first half of the input-output pairs and the message *m*, and must synthesize a program *p<sup>\u03c0</sup>* that correctly maps the remaining hidden inputs to their outputs. The use of held-out examples discourages overfitting through if-else logic and promotes generalized induction. \u2022 As a *solver*, the model is shown the frst half of the input-output pairs and the message *m*, and must synthesize a program *p<sup>\u03c0</sup>* that correctly maps the remaining hidden inputs to their outputs. The use of held-out examples discourages overftting through if-else logic and promotes generalized induction.\\n\\nEach reasoning task type leverages code as an expressive and verifable medium, aligning with the Absolute Zero Paradigm\\'s goals of fully selfimproving systems in open-ended domains (DeepSeek-AI et al., 2025; Lambert et al., 2024). All prompts used by three diferent task types and two types of roles within a task type are shown in Figures 34 to 39. Next, we outline exact details of our algorithm. Each reasoning task type leverages code as an expressive and verifiable medium, aligning with the Absolute Zero Paradigm\\'s goals of fully selfimproving systems in open-ended domains [\\\\(DeepSeek-AI et al.,](#page-13-0) [2025;](#page-13-0) [Lambert et al.,](#page-15-0) [2024\\\\)](#page-15-0). All prompts used by three different task types and two types of roles within a task type are shown in Figures [34](#page-39-0) to [39.](#page-43-0) Next, we outline exact details of our algorithm.\\n\\n#### <span id=\"page-5-1\"></span>**3.3. Absolute Zero Reasoner Learning Algorithm 3.3. Absolute Zero Reasoner Learning Algorithm**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-3-1\\\\\"></span>**3.1. Two Roles in One: Proposer and Solver**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"<span id=\\\\\"page-5-1\\\\\"></span>**3.3. Absolute Zero Reasoner Learning Algorithm 3.3. Absolute Zero Reasoner Learning Algorithm**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nIn this section, we will discuss details of our AZR self-play algorithm, including initialization of bufers 3.3.1, usage of thse bufers 3.3.2, construction of valid tasks 3.3.3, validating solutions 3.3.4, and fn[ally ad](#page-6-2)vantage estimator calculation 3.3.5. We outline the o[verall](#page-7-1) recipe of the self-play procedure of AZR in [Algor](#page-7-0)ithm 1. In this section, we will discuss details of our AZR self-play algorithm, including initialization of buffers [3.3.1,](#page-5-2) usage of thse buffers 3.3.2, construction of valid tasks [3.3.3,](#page-6-1) validating solutions 3.3.4, and finally advantage estimator calculation 3.3.5. We outline the overall recipe of the self-play procedure of AZR in Algorithm [1.](#page-6-0)\\n\\n#### <span id=\"page-5-2\"></span>3.3.1. BUFFER INITIALIZATION To initialize AZR self-play, we frst generate a seed set of valid triplets using 3.3.1. Buffer Initialization\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**3. Absolute Zero Reasoner**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-3-1\\\\\"></span>**3.1. Two Roles in One: Proposer and Solver**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"<span id=\\\\\"page-5-2\\\\\"></span>3.3.1. BUFFER INITIALIZATION To initialize AZR self-play, we frst generate a seed set of valid triplets using 3.3.1. Buffer Initialization\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nthe base language model. Each prompt samples up to *K* triplets from the current seed bufer Dseed as references. When Dseed is empty at time 0, we fall back to the zero triplet show in Figure 5. During the seeding stage, we use the same proposer prompts detailed [in](#page-5-3) Figures 34 to 36. First, for deduction and abduction tasks, the LLM is prompted to generate To initialize AZR self-play, we first generate a seed set of valid triplets using the base language model. Each prompt samples up to *K* triplets from the current seed buffer <sup>D</sup>seed as references. When <sup>D</sup>seed is empty at time 0, we fall back to the zero triplet show in Figure 5. During the seeding stage, we use the same proposer prompts detailed in Figures [34](#page-39-0) to [36.](#page-41-0)\\n\\n(*p, i*) pairs, which are fltered, executed, and stored as valid triplets. We initialize <sup>D</sup><sup>0</sup> abduction <sup>=</sup> <sup>D</sup><sup>0</sup> deduction = Dseed, where |Dseed| = *B* \u00d7 *S*, where First, for deduction and abduction tasks, the LLM is prompted to generate (*p, i*) pairs, which are filtered, executed, and stored as valid triplets. We\\n\\n**Program Triplet Input:** \"Hello World\" <sup>1</sup> **def** f(x): <sup>2</sup> **return** x **Output:** \"Hello World\"\\n\\n<span id=\"page-5-3\"></span>Figure 5. **The Seed AZR Zero Triplet.** The above identity function triplet was the only triplet provided to AZR to initiate its self-bootstrap propose-and-solve RLVR loop. We note that the base LLM is fully capable of initiating the AZR loop without any seed program; its inclusion illustrates our approach\\'s fexibility: we can optionally initialize seed programs with existing datasets of varying complexity, and we initialized ours with the simplest program. *Figure 5.* **The Seed AZR Zero Triplet.** The above identity function triplet was the only triplet provided to AZR to initiate its self-bootstrap propose-and-solve RLVR loop. We note that the base LLM is fully capable of initiating the AZR loop without any seed program; its inclusion illustrates our approach\\'s flexibility: we can optionally initialize seed programs with existing datasets of varying complexity, and we initialized ours with the simplest program.\\n\\n*B* is the batch size, and *S* = 4 is a factor we fx in all experiments. All seed triplet\\'s program are stripped of global variables and comments (Appendix C), but subsequent iterations of adding new triplets to the bufers are un[alte](#page-48-0)red. No model updates occur during this phase. Similarly, to initialize the induction bufer, we sample programs from Dseed, generate matching input sets and messages, and collect valid examples until |D<sup>0</sup> induction| = *B* \u00d7 *S*. initialize <sup>D</sup> 0 abduction = D 0 deduction <sup>=</sup> <sup>D</sup>seed, where |Dseed<sup>|</sup> <sup>=</sup> *<sup>B</sup>* <sup>\u00d7</sup> *<sup>S</sup>*, where *<sup>B</sup>* is the batch size, and *<sup>S</sup>* = 4 is a factor we fix in all experiments. All seed triplet\\'s program are stripped of global variables and comments (Appendix D), but subsequent iterations of adding new triplets to the buffers are unaltered. No model updates occur during this phase. Similarly, to initialize the induction buffer, we sample programs from <sup>D</sup>seed, generate matching input sets and messages, and collect valid examples until |D<sup>0</sup> induction<sup>|</sup> <sup>=</sup> *<sup>B</sup>* <sup>\u00d7</sup> *<sup>S</sup>*.\\n\\n<span id=\"page-6-0\"></span>\\n\\n| Algorithm 1                      | Self-Play Training of Absolute Zero Reasoner (AZR)              |                                                      |                           |\\n|----------------------------------|-----------------------------------------------------------------|------------------------------------------------------|---------------------------|\\n| Require:                         | Pretrained base LLM<br>\u03c0\u03b8; batch size<br>B; #references         | K; iterations<br>T                                   |                           |\\n| 1:<br>Dded,<br>Dabd,<br>Dind     | \u2190 InitSeeding(\u03c0\u03b8)                                               |                                                      | see \u00a73.3.1<br>\u25b7           |\\n| to<br>2:<br>\u2190 1<br>for<br>t<br>T | do                                                              |                                                      |                           |\\n| 3:<br>for<br>\u2190 1<br>b            | to<br>do<br>B                                                   | \u25b7                                                    | PROPOSE PHASE             |\\n| 4:<br>p<br>\u223c Dabd                | \u222a Dded                                                          | sample a program for induction task proposal<br>\u25b7    |                           |\\n| N<br>n<br>5:<br><br>i<br>\u03c0       | propose<br>(ind, p)<br>n=1, m\u03c0<br>\u2190 \u03c0<br>\u03b8                      | generate<br>\u25b7<br>N                                   | inputs and a description  |\\n| n<br>6:<br><br>(i<br>if<br>\u03c0     | N<br>n=1 \u2190 ValidateByExecuting<br>, on<br>)<br>p,<br>{i<br>\u03c0    | syntax<br>n<br>\u03c0},<br>then<br>\u25b7                      | validate I/Os, see \u00a73.3.3 |\\n| 7:<br>Dind                       | n<br>, on<br><br>(p,<br>{(i<br>)}, m\u03c0)<br>\u2190 Dind<br>\u222a<br>\u03c0<br>\u03c0 | \u25b7                                                    | update induction buffer   |\\n| 8:<br>for<br>\u03b1                   | \u2208 {ded,<br>abd}<br>do                                           |                                                      |                           |\\n| 9:<br>                           | K<br>pk, ik, ok<br>k=1 \u223c D\u03b1                                     | sample<br>\u25b7<br>K                                     | reference examples        |\\n| 10:                              | propose<br><br><br>(p\u03c0, i\u03c0)<br>{(pk, ik, ok)}<br>\u2190 \u03c0<br>\u03b1,<br>\u03b8 | \u25b7                                                    | propose new task          |\\n| 11:<br>if                        | \u2190 ValidateByExecuting<br>o\u03c0<br>p\u03c0, i\u03c0,                          | syntax,safety,determinism<br>then                    | see \u00a73.3.3<br>\u25b7           |\\n| 12:                              | <br>(p\u03c0, i\u03c0, o\u03c0)<br>D\u03b1 \u2190 D\u03b1 \u222a                                   | if valid, update deduction or abduction buffers<br>\u25b7 |                           |\\n| 13:<br>for all<br>\u03b1              | \u2208 {ded,<br>abd,<br>ind}<br>do                                   | \u25b7                                                    | SOLVE PHASE               |\\n| (x, y\u22c6<br>14:                    | \u2190 SamplePrepareTasks<br>D\u03b1, B, t<br>)                           | \u25b7 x, y\u22c6 prepared based on                            | \u03b1, see \u00a73.3.3&3.3.4       |\\n| 15:<br>y\u03c0<br>\u223c \u03c0                 | solve<br>(x)<br>\u03b8                                               |                                                      |                           |\\n| 16:<br>Reward:                   | Use proposed task triplets and solved answers to get            | &<br>rpropose<br>rsolve                              | see \u00a73.1<br>\u25b7             |\\n| 17:<br>RL update:                | use Task Relative REINFORCE++ to update                         | \u03c0\u03b8                                                   | see \u00a73.3.5<br>\u25b7           |\\n\\nAlgorithm 1,Self-Play Training of Absolute Zero Reasoner (AZR),,\\r\\nRequire:,Pretrained base LLM \u03c0\u03b8; batch size B; #references,K; iterations T,\\r\\n\"1: Dded, Dabd, Dind\",\u2190 InitSeeding(\u03c0\u03b8),,see \u00a73.3.1 \u25b7\\r\\nto 2: \u2190 1 for t T,do,,\\r\\n3: for \u2190 1 b,to do B,\u25b7,PROPOSE PHASE\\r\\n4: p \u223c Dabd,\u222a Dded,sample a program for induction task proposal \u25b7,\\r\\nN n 5: i \u03c0,\"propose (ind, p) n=1, m\u03c0 \u2190 \u03c0 \u03b8\",generate \u25b7 N,inputs and a description\\r\\nn 6: (i if \u03c0,\"N n=1 \u2190 ValidateByExecuting , on ) p, {i \u03c0\",\"syntax n \u03c0}, then \u25b7\",\"validate I/Os, see \u00a73.3.3\"\\r\\n7: Dind,\"n , on (p, {(i )}, m\u03c0) \u2190 Dind \u222a \u03c0 \u03c0\",\u25b7,update induction buffer\\r\\n8: for \u03b1,\"\u2208 {ded, abd} do\",,\\r\\n9: ,\"K pk, ik, ok k=1 \u223c D\u03b1\",sample \u25b7 K,reference examples\\r\\n10:,\"propose (p\u03c0, i\u03c0) {(pk, ik, ok)} \u2190 \u03c0 \u03b1, \u03b8\",\u25b7,propose new task\\r\\n11: if,\"\u2190 ValidateByExecuting o\u03c0 p\u03c0, i\u03c0,\",\"syntax,safety,determinism then\",see \u00a73.3.3 \u25b7\\r\\n12:,\" (p\u03c0, i\u03c0, o\u03c0) D\u03b1 \u2190 D\u03b1 \u222a\",\"if valid, update deduction or abduction buffers \u25b7\",\\r\\n13: for all \u03b1,\"\u2208 {ded, abd, ind} do\",\u25b7,SOLVE PHASE\\r\\n\"(x, y\u22c6 14:\",\"\u2190 SamplePrepareTasks D\u03b1, B, t )\",\"\u25b7 x, y\u22c6 prepared based on\",\"\u03b1, see \u00a73.3.3&3.3.4\"\\r\\n15: y\u03c0 \u223c \u03c0,solve (x) \u03b8,,\\r\\n16: Reward:,Use proposed task triplets and solved answers to get,& rpropose rsolve,see \u00a73.1 \u25b7\\r\\n17: RL update:,use Task Relative REINFORCE++ to update,\u03c0\u03b8,see \u00a73.3.5 \u25b7\\r\\n{\\n \"headers\": [\\n \"Algorithm 1\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\",\\n \"\",\\n \"\"\\n ],\\n \"rows\": [\\n {\\n \"Algorithm 1\": \"Require:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"Pretrained base LLM \u03c0\u03b8; batch size B; #references\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"1: Dded, Dabd, Dind\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2190 InitSeeding(\u03c0\u03b8)\",\\n \"\": \"see \u00a73.3.1 \u25b7\"\\n },\\n {\\n \"Algorithm 1\": \"to 2: \u2190 1 for t T\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"do\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"3: for \u2190 1 b\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"to do B\",\\n \"\": \"PROPOSE PHASE\"\\n },\\n {\\n \"Algorithm 1\": \"4: p \u223c Dabd\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u222a Dded\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"N n 5: i \u03c0\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"propose (ind, p) n=1, m\u03c0 \u2190 \u03c0 \u03b8\",\\n \"\": \"inputs and a description\"\\n },\\n {\\n \"Algorithm 1\": \"n 6: (i if \u03c0\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"N n=1 \u2190 ValidateByExecuting , on ) p, {i \u03c0\",\\n \"\": \"validate I/Os, see \u00a73.3.3\"\\n },\\n {\\n \"Algorithm 1\": \"7: Dind\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"n , on (p, {(i )}, m\u03c0) \u2190 Dind \u222a \u03c0 \u03c0\",\\n \"\": \"update induction buffer\"\\n },\\n {\\n \"Algorithm 1\": \"8: for \u03b1\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2208 {ded, abd} do\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"9: \",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"K pk, ik, ok k=1 \u223c D\u03b1\",\\n \"\": \"reference examples\"\\n },\\n {\\n \"Algorithm 1\": \"10:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"propose (p\u03c0, i\u03c0) {(pk, ik, ok)} \u2190 \u03c0 \u03b1, \u03b8\",\\n \"\": \"propose new task\"\\n },\\n {\\n \"Algorithm 1\": \"11: if\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2190 ValidateByExecuting o\u03c0 p\u03c0, i\u03c0,\",\\n \"\": \"see \u00a73.3.3 \u25b7\"\\n },\\n {\\n \"Algorithm 1\": \"12:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \" (p\u03c0, i\u03c0, o\u03c0) D\u03b1 \u2190 D\u03b1 \u222a\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"13: for all \u03b1\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2208 {ded, abd, ind} do\",\\n \"\": \"SOLVE PHASE\"\\n },\\n {\\n \"Algorithm 1\": \"(x, y\u22c6 14:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"\u2190 SamplePrepareTasks D\u03b1, B, t )\",\\n \"\": \"\u03b1, see \u00a73.3.3&3.3.4\"\\n },\\n {\\n \"Algorithm 1\": \"15: y\u03c0 \u223c \u03c0\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"solve (x) \u03b8\",\\n \"\": \"\"\\n },\\n {\\n \"Algorithm 1\": \"16: Reward:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"Use proposed task triplets and solved answers to get\",\\n \"\": \"see \u00a73.1 \u25b7\"\\n },\\n {\\n \"Algorithm 1\": \"17: RL update:\",\\n \"Self-Play Training of Absolute Zero Reasoner (AZR)\": \"use Task Relative REINFORCE++ to update\",\\n \"\": \"see \u00a73.3.5 \u25b7\"\\n }\\n ]\\n}# <span id=\"page-6-2\"></span>3.3.2. Task Proposal Inputs and Buffer Management\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-6-2\\\\\"></span>3.3.2. Task Proposal Inputs and Buffer Management\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nDuring the actual self-play stage of AZR, we use the task buffer in three ways. *First*, for the proposer of abduction and deduction tasks, we uniformly sample *K* past triplets from the buffer, present them as in-context examples to the proposer and let it generate a new task. The design is to show it past examples, and prompt it to generate a different one to promote diversity [\\\\(Zhao et al.,](#page-18-2) [2025a\\\\)](#page-18-2). *Second*, we sample one triplet from the union of abduction and deduction buffers <sup>D</sup>abd <sup>S</sup> <sup>D</sup>ded, and present the program *<sup>p</sup>* from that triplet to the induction proposer to generate a set of *<sup>N</sup>* matching inputs {*<sup>i</sup> n* } and a natural language message *<sup>m</sup>*. *Lastly*, to maintain stable training, if a batch of solver problems contains fewer than *B* valid proposed tasks (proposer not adhering to formatting), we fill the remainder by uniformly sampling from the corresponding task buffer of previously validated triplets.\\n\\nThe buffer grows for abduction and deduction tasks whenever *\u03c0* propose a valid triplet (*p, i, o*), regardless if it gets any task reward. Similarly, for induction tasks, all valid triplets (*p,* {*<sup>i</sup> n , o<sup>n</sup>* })*, m* are added to the buffer.\\n\\n# <span id=\"page-6-1\"></span>3.3.3. Constructing Valid Tasks\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-6-1\\\\\"></span>3.3.3. Constructing Valid Tasks\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Proposal Task Validation.** We first describe how we construct valid tasks from the proposals generated by the policy *\u03c0*. For *deduction and abduction* tasks, each proposal consists of a program and an input (*p, i*). To validate the task, we use the task validation procedure (steps shown below) on the input to obtain the correct output *o*, resulting in a complete triplet (*p, i, o*). For *induction* tasks, given a program *<sup>p</sup>* the policy proposes a set of inputs {*<sup>i</sup> n* } and message *<sup>m</sup>*. We also use the task validation procedure on each of the input *<sup>i</sup> n* in the set to obtain a corresponding output *o n* , forming a set of input-output pairs {*<sup>i</sup> n , o<sup>n</sup>* }. We do not impose any constraints on *<sup>m</sup>*. The resulting task is considered valid only when all inputs yield valid outputs and the formatting requirements are satisfied. The **task validation procedure** entails:\\n\\n- 1. *Program Integrity.* We first use Python to run the program *p* with the input *i*. If no errors are raised and something is returned, we then gather the output *o* of that (*p, i*) pair and determine that the program at least has valid syntax.\\n- 2. *Program Safety.* We also check whether a program is safe for execution by restricting the use of certain sensitive packages that might cause harm to the Python environment, *i.e*., os.sys, sys, shutil. The list of packages used to filter out invalid programs is provided in Figure [8.](#page-21-0) This list is also included in the instructions when prompting the language model to generate questions. See Figures [34](#page-39-0) to [36.](#page-41-0)\\n- 3. *Check for Determinism.* In our setting, we only consider *deterministic programs*, *i.e*., *<sup>p</sup>* <sup>\u2208</sup> <sup>P</sup>deterministic <sup>\u2282</sup> <sup>P</sup>, where <sup>P</sup> is the space of all valid programs and I is the space of all valid inputs:\\n\\n<span id=\"page-7-2\"></span>\\n$$\\\\forall p \\\\in \\\\mathscr{P}\\\\_{\\\\text{deterministic}}, \\\\ \\\\forall i \\\\in \\\\mathscr{I}, \\\\ \\\\left( \\\\lim\\\\_{j \\\\to \\\\infty} p(i)^{(1)} = p(i)^{(2)} = \\\\dots = p(i)^{(j)} \\\\right), \\\\tag{7}$$\\n\\nwhere (*j*) indexes repeated independent executions of the program. That is, for all inputs *i*, the output of *p*(*i*) remains identical with any independent execution of the program. A *valid program/input/output triplet* (*p, i, o*) is defined such that *o* = *p*(*i*), where *<sup>p</sup>* <sup>\u2208</sup> <sup>P</sup>deterministic.\\n\\nSince the output of probabilistic programs can vary on every individual run, it is non-trivial to use verifiable functions to evaluate the correctness of an answer. Therefore, to keep the verifier simple, we restrict the valid programs generated by the learner to the class of deterministic programs. We believe that stochastic programs can encompass a larger class of behaviors and are important and promising to include in future versions of AZR.\\n\\nTo implement the filtering of invalid probabilistic programs, and following the definition of a deterministic program highlighted in Equation [\\\\(7\\\\)](#page-7-2), we approximate this procedure by independently running the program *j* finite times and checking that all the outputs are equal. For computational budget reasons, we fixed *j* = 2 for all experiments.\\n\\n**Solving Task Construction.** If a task proposal passes these three checks, we deem it a valid task and apply appropriate procedures to present part of the triplet to the solver. Specifically, we set *<sup>x</sup>* = (*p, i*)for deduction; *<sup>x</sup>* = (*p, o*)for abduction; and *<sup>x</sup>* = ({*<sup>i</sup> n , o<sup>n</sup>* } *N//*2 *<sup>n</sup>*=1 *, m*) for induction, where half of the tests cases and a program description *m* is used. We use all valid tasks from timestep *t*; if the batch *B* is not full, we uniformly sample from previously validated tasks to fill the batch.\\n\\n# <span id=\"page-7-1\"></span>3.3.4. Answer Verification\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-7-1\\\\\"></span>3.3.4. Answer Verification\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nFor abduction task, we receive *i<sup>\u03c0</sup>* from the solver policy, then we equivalence match using *p*(*i\u03c0*) = *p*(*i \u22c6* ), where <sup>\u2217</sup> refers to the privileged gold information. The reason we do not just match *i<sup>\u03c0</sup>* and *i \u22c6* is because *p* is not necessarily bijective. For deduction task, we match *o<sup>\u03c0</sup>* = *o \u22c6* . For induction, we match all({*p\u03c0*(*<sup>i</sup> \u22c6 <sup>n</sup>*) = *o \u22c6 <sup>n</sup>*} *<sup>N</sup>* ). This part might be convoluted to explain in language, therefore we recommend the reader to see how we did abduction, deduction and induction verification in code in Figures [10](#page-22-0) to [12,](#page-22-1) respectively.\\n\\n# <span id=\"page-7-0\"></span>3.3.5. Task-Relative REINFORCE++\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-7-0\\\\\"></span>3.3.5. Task-Relative REINFORCE++\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nSince AZR trains the combination of roles and task types, it operates in a multitask reinforcement learning setup [\\\\(Zhang & Yang,](#page-18-3) [2021;](#page-18-3) [Zhao et al.,](#page-18-4) [2022;](#page-18-4) [Wang et al.,](#page-16-6) [2023;](#page-16-6) [Yue et al.,](#page-17-2) [2023\\\\)](#page-17-2). Instead of computing a single global baseline as in REINFORCE++ [\\\\(Hu,](#page-14-2) [2025\\\\)](#page-14-2) (Appendix [A\\\\)](#page-20-0), we compute separate baselines for each of the six task-role configurations. This can be viewed as an interpolation between per-question baselines, as in GRPO [\\\\(Shao et al.,](#page-16-7) [2024\\\\)](#page-16-7), and a global baseline, allowing for more structured variance reduction tailored to each task setup. We refer to this variant as **Task-Relative REINFORCE++ (TRR++)**. The normalized advantage *A* norm is computed as:\\n\\n$$A\\\\_{\\\\text{task,role}}^{\\\\text{norm}} = \\\\frac{r - \\\\mu\\\\_{\\\\text{task,role}}}{\\\\sigma\\\\_{\\\\text{task,role}}}, \\\\quad \\\\text{task} \\\\in \\\\{\\\\text{ind,ded,abd}\\\\}, \\\\text{role} \\\\in \\\\{\\\\text{propose,solve}\\\\},\\\\tag{8}$$\\n\\nwhere the mean and standard deviation are computed *within each task type and role*, yielding six baselines.\\n\\n# **4. Experiments**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**4. Experiments**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n### **4.1. Experiment Setup**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**4. Experiments**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"**4.1. Experiment Setup**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Training Details.** For all experiments, we initialize the buffers as described in Section [3.1.](#page-3-1) AZR models are trained using a batch size of <sup>64</sup> <sup>\u00d7</sup> <sup>6</sup> (2 roles <sup>\u00d7</sup> 3 task types). We use constant learning rate= 1*e*\u2212<sup>6</sup> and the AdamW optimizer [\\\\(Loshchilov & Hutter,](#page-15-6) [2019\\\\)](#page-15-6). Complete list of hyperparameters is provided in Table [3.](#page-20-1)\\n\\nFor the main experiments, we train AZR models on Qwen2.5-7B and Qwen2.5-7B-Coder, resulting in Absolute Zero Reasoner-base-7B and Absolute Zero Reasoner-Coder-7B, respectively. Additional experiments include training Qwen2.5-Coder-3B, Qwen2.5-Coder-14B, Qwen2.5-14B, Llama-3.1-8B [\\\\(Yang et al.,](#page-17-3) [2024a;](#page-17-3) [Hui et al.,](#page-14-3) [2024;](#page-14-3) [Dubey et al.,](#page-13-4) [2024\\\\)](#page-13-4).\\n\\n**Evaluation Protocol.** To evaluate our models, we divide the datasets into in-distribution (ID) and out-of-distribution (OOD) categories. For OOD benchmarks, which we emphasize more, we further categorize them into coding and mathematical reasoning benchmarks. For coding tasks, we evaluate using Evalplus [\\\\(Liu et al.,](#page-15-7) [2023\\\\)](#page-15-7) on the HumanEval+ and MBPP+ benchmarks, as well as LiveCodeBench Generation (v1-5, May 23-Feb 25) [\\\\(Jain et al.,](#page-14-4) [2024\\\\)](#page-14-4). For mathematical reasoning, we utilize six standard benchmarks commonly used in recent zero-shot trained reasoners: AIME\\'24, AIME\\'25, OlympiadBench [\\\\(He et al.,](#page-14-5) [2024\\\\)](#page-14-5), Minerva, Math500 [\\\\(Hendrycks et al.,](#page-14-6) [2021\\\\)](#page-14-6), and AMC\\'23. For ID benchmarks, we use CruxEval-I(nput), CruxEval-O(utput), and LiveCodeBench-Execution [\\\\(Gu et al.,](#page-14-7) [2024;](#page-14-7) [Jain et al.,](#page-14-4) [2024\\\\)](#page-14-4), which assess reasoning capabilities regarding the input and output of programs [\\\\(Li et al.,](#page-15-8) [2025\\\\)](#page-15-8). *Greedy decoding* is used for all baseline methods and AZR results to ensure reproducibility.\\n\\n**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n\\n| Model                                               | Base  | #data | HEval+       | MBPP+        | LCBv1-5       | AME24         | AME25        | AMC        | M500       | Minva               | Olypiad | CAvg                | MAvg      | AVG                |\\n|-----------------------------------------------------|-------|-------|--------------|--------------|---------------|---------------|--------------|------------|------------|---------------------|---------|---------------------|-----------|--------------------|\\n| Base Models                                         |       |       |              |              |               |               |              |            |            |                     |         |                     |           |                    |\\n| Qwen2.5-7B[73]                                      | -     | -     | 73.2         | 65.3         | 17.5          | 6.7           | 3.3          | 37.5       | 64.8       | 25.0                | 27.7    | 52.0                | 27.5      | 39.8               |\\n| Qwen2.5-7B-Ins[73]                                  | -     | -     | 75.0         | 68.5         | 25.5          | 13.3          | 6.7          | 52.5       | 76.4       | 35.7                | 37.6    | 56.3                | 37.0      | 46.7               |\\n| Qwen2.5-7B-Coder[26]                                | -     | -     | 80.5         | 69.3         | 19.9          | 6.7           | 3.3          | 40.0       | 54.0       | 17.3                | 21.9    | 56.6                | 23.9      | 40.2               |\\n| Qwen2.5-7B-Math[74]                                 | -     | -     | 61.0         | 57.9         | 16.2          | 10.0          | 16.7         | 42.5       | 64.2       | 15.4                | 28.0    | 45.0                | 29.5      | 37.3               |\\n| Zero-Style Reasoners Trained on Curated Coding Data |       |       |              |              |               |               |              |            |            |                     |         |                     |           |                    |\\n| AceCoder-RM[84]                                     | Ins   | 22k   | 79.9         | 71.4         | 23.6          | 20.0          | 6.7          | 50.0       | 76.4       | 34.6                | 36.7    | 58.3                | 37.4      | 47.9               |\\n| AceCoder-Rule[84]                                   | Ins   | 22k   | 77.4         | 69.0         | 19.9          | 13.3          | 6.7          | 50.0       | 76.0       | 37.5                | 37.8    | 55.4                | 36.9      | 46.2               |\\n| AceCoder-RM[84]                                     | Coder | 22k   | 78.0         | 66.4         | 27.5          | 13.3          | 3.3          | 27.5       | 62.6       | 29.4                | 29.0    | 57.3                | 27.5      | 42.4               |\\n| AceCoder-Rule[84]                                   | Coder | 22k   | 80.5         | 70.4         | 29.0          | 6.7           | 6.7          | 40.0       | 62.8       | 27.6                | 27.4    | 60.0                | 28.5      | 44.3               |\\n| CodeR1-LC2k[36]                                     | Ins   | 2k    | 81.7         | 71.7         | 28.1          | 13.3          | 10.0         | 45.0       | 75.0       | 33.5                | 36.7    | 60.5                | 35.6      | 48.0               |\\n| CodeR1-12k[36]                                      | Ins   | 12k   | 81.1         | 73.5         | 29.3          | 13.3          | 3.3          | 37.5       | 74.0       | 35.7                | 36.9    | 61.3                | 33.5      | 47.4               |\\n| Zero-Style Reasoners Trained on Curated Math Data   |       |       |              |              |               |               |              |            |            |                     |         |                     |           |                    |\\n| PRIME-Zero[9]                                       | Coder | 484k  | 49.4         | 51.1         | 11.0          | 23.3          | 23.3         | 67.5       | 81.2       | 37.9                | 41.8    | 37.2                | 45.8      | 41.5               |\\n| SimpleRL-Zoo[85]                                    | Base  | 8.5k  | 73.2         | 63.2         | 25.6          | 16.7          | 3.3          | 57.5       | 77.0       | 35.7                | 41.0    | 54.0                | 38.5      | 46.3               |\\n| Oat-Zero[38]                                        | Math  | 8.5k  | 62.2         | 59.0         | 15.2          | 30.0          | 16.7         | 62.5       | 80.0       | 34.9                | 41.6    | 45.5                | 44.3      | 44.9               |\\n| ORZ[23]                                             | Base  | 57k   | 80.5         | 64.3         | 22.0          | 13.3          | 16.7         | 60.0       | 81.8       | 32.7                | 45.0    | 55.6                | 41.6      | 48.6               |\\n| Absolute Zero Training w/ No Curated Data (Ours)    |       |       |              |              |               |               |              |            |            |                     |         |                     |           |                    |\\n| AZR (Ours)                                          | Base  | 0     | -1.9<br>71.3 | +3.8<br>69.1 | +7.8<br>25.3  | +6.6<br>13.3  | 13.3         | +10.0 52.5 | +15.0 74.4 | +9.6 38.2<br>+13.2  | 38.5    | +10.8 55.2          | +3.2 38.4 | +10.9 46.8<br>+7.0 |\\n| AZR (Ours)                                          | Coder | 0     | +3.0<br>83.5 | +0.3<br>69.6 | +11.8<br>31.7 | +13.3<br>20.0 | +6.7<br>10.0 | 57.5       | +17.5 72.6 | +22.6 36.4<br>+19.1 | 38.2    | +16.3 61.6+5.0 39.1 |           | +15.2 50.4+10.2    |\\n\\nModel,Base,#data,HEval+,MBPP+,LCBv1-5,AME24,AME25,AMC,M500,Minva,Olypiad,CAvg,MAvg,AVG\\r\\nBase Models,\\r\\nQwen2.5-7B[73],-,-,73.2,65.3,17.5,6.7,3.3,37.5,64.8,25.0,27.7,52.0,27.5,39.8\\r\\nQwen2.5-7B-Ins[73],-,-,75.0,68.5,25.5,13.3,6.7,52.5,76.4,35.7,37.6,56.3,37.0,46.7\\r\\nQwen2.5-7B-Coder[26],-,-,80.5,69.3,19.9,6.7,3.3,40.0,54.0,17.3,21.9,56.6,23.9,40.2\\r\\nQwen2.5-7B-Math[74],-,-,61.0,57.9,16.2,10.0,16.7,42.5,64.2,15.4,28.0,45.0,29.5,37.3\\r\\nZero-Style Reasoners Trained on Curated Coding Data,\\r\\nAceCoder-RM[84],Ins,22k,79.9,71.4,23.6,20.0,6.7,50.0,76.4,34.6,36.7,58.3,37.4,47.9\\r\\nAceCoder-Rule[84],Ins,22k,77.4,69.0,19.9,13.3,6.7,50.0,76.0,37.5,37.8,55.4,36.9,46.2\\r\\nAceCoder-RM[84],Coder,22k,78.0,66.4,27.5,13.3,3.3,27.5,62.6,29.4,29.0,57.3,27.5,42.4\\r\\nAceCoder-Rule[84],Coder,22k,80.5,70.4,29.0,6.7,6.7,40.0,62.8,27.6,27.4,60.0,28.5,44.3\\r\\nCodeR1-LC2k[36],Ins,2k,81.7,71.7,28.1,13.3,10.0,45.0,75.0,33.5,36.7,60.5,35.6,48.0\\r\\nCodeR1-12k[36],Ins,12k,81.1,73.5,29.3,13.3,3.3,37.5,74.0,35.7,36.9,61.3,33.5,47.4\\r\\nZero-Style Reasoners Trained on Curated Math Data,\\r\\nPRIME-Zero[9],Coder,484k,49.4,51.1,11.0,23.3,23.3,67.5,81.2,37.9,41.8,37.2,45.8,41.5\\r\\nSimpleRL-Zoo[85],Base,8.5k,73.2,63.2,25.6,16.7,3.3,57.5,77.0,35.7,41.0,54.0,38.5,46.3\\r\\nOat-Zero[38],Math,8.5k,62.2,59.0,15.2,30.0,16.7,62.5,80.0,34.9,41.6,45.5,44.3,44.9\\r\\nORZ[23],Base,57k,80.5,64.3,22.0,13.3,16.7,60.0,81.8,32.7,45.0,55.6,41.6,48.6\\r\\nAbsolute Zero Training w/ No Curated Data (Ours)\\r\\nAZR (Ours),Base,0,-1.9 71.3,+3.8 69.1,+7.8 25.3,+6.6 13.3,13.3,+10.0 52.5,+15.0 74.4,+9.6 38.2 +13.2,38.5,+10.8 55.2,+3.2 38.4,+10.9 46.8 +7.0\\r\\nAZR (Ours),Coder,0,+3.0 83.5,+0.3 69.6,+11.8 31.7,+13.3 20.0,+6.7 10.0,57.5,+17.5 72.6,+22.6 36.4 +19.1,38.2,+16.3 61.6+5.0 39.1,,+15.2 50.4+10.2\\r\\n{\\n \"headers\": [\\n \"Model\",\\n \"Base\",\\n \"#data\",\\n \"HEval+\",\\n \"MBPP+\",\\n \"LCBv1-5\",\\n \"AME24\",\\n \"AME25\",\\n \"AMC\",\\n \"M500\",\\n \"Minva\",\\n \"Olypiad\",\\n \"CAvg\",\\n \"MAvg\",\\n \"AVG\"\\n ],\\n \"rows\": [\\n {\\n \"Model\": \"Qwen2.5-7B[73]\",\\n \"Base\": \"-\",\\n \"#data\": \"-\",\\n \"HEval+\": \"73.2\",\\n \"MBPP+\": \"65.3\",\\n \"LCBv1-5\": \"17.5\",\\n \"AME24\": \"6.7\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"37.5\",\\n \"M500\": \"64.8\",\\n \"Minva\": \"25.0\",\\n \"Olypiad\": \"27.7\",\\n \"CAvg\": \"52.0\",\\n \"MAvg\": \"27.5\",\\n \"AVG\": \"39.8\"\\n },\\n {\\n \"Model\": \"Qwen2.5-7B-Ins[73]\",\\n \"Base\": \"-\",\\n \"#data\": \"-\",\\n \"HEval+\": \"75.0\",\\n \"MBPP+\": \"68.5\",\\n \"LCBv1-5\": \"25.5\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"6.7\",\\n \"AMC\": \"52.5\",\\n \"M500\": \"76.4\",\\n \"Minva\": \"35.7\",\\n \"Olypiad\": \"37.6\",\\n \"CAvg\": \"56.3\",\\n \"MAvg\": \"37.0\",\\n \"AVG\": \"46.7\"\\n },\\n {\\n \"Model\": \"Qwen2.5-7B-Coder[26]\",\\n \"Base\": \"-\",\\n \"#data\": \"-\",\\n \"HEval+\": \"80.5\",\\n \"MBPP+\": \"69.3\",\\n \"LCBv1-5\": \"19.9\",\\n \"AME24\": \"6.7\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"40.0\",\\n \"M500\": \"54.0\",\\n \"Minva\": \"17.3\",\\n \"Olypiad\": \"21.9\",\\n \"CAvg\": \"56.6\",\\n \"MAvg\": \"23.9\",\\n \"AVG\": \"40.2\"\\n },\\n {\\n \"Model\": \"Qwen2.5-7B-Math[74]\",\\n \"Base\": \"-\",\\n \"#data\": \"-\",\\n \"HEval+\": \"61.0\",\\n \"MBPP+\": \"57.9\",\\n \"LCBv1-5\": \"16.2\",\\n \"AME24\": \"10.0\",\\n \"AME25\": \"16.7\",\\n \"AMC\": \"42.5\",\\n \"M500\": \"64.2\",\\n \"Minva\": \"15.4\",\\n \"Olypiad\": \"28.0\",\\n \"CAvg\": \"45.0\",\\n \"MAvg\": \"29.5\",\\n \"AVG\": \"37.3\"\\n },\\n {\\n \"Model\": \"Zero-Style Reasoners Trained on Curated Coding Data\",\\n \"Base\": \"\"\\n },\\n {\\n \"Model\": \"AceCoder-RM[84]\",\\n \"Base\": \"Ins\",\\n \"#data\": \"22k\",\\n \"HEval+\": \"79.9\",\\n \"MBPP+\": \"71.4\",\\n \"LCBv1-5\": \"23.6\",\\n \"AME24\": \"20.0\",\\n \"AME25\": \"6.7\",\\n \"AMC\": \"50.0\",\\n \"M500\": \"76.4\",\\n \"Minva\": \"34.6\",\\n \"Olypiad\": \"36.7\",\\n \"CAvg\": \"58.3\",\\n \"MAvg\": \"37.4\",\\n \"AVG\": \"47.9\"\\n },\\n {\\n \"Model\": \"AceCoder-Rule[84]\",\\n \"Base\": \"Ins\",\\n \"#data\": \"22k\",\\n \"HEval+\": \"77.4\",\\n \"MBPP+\": \"69.0\",\\n \"LCBv1-5\": \"19.9\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"6.7\",\\n \"AMC\": \"50.0\",\\n \"M500\": \"76.0\",\\n \"Minva\": \"37.5\",\\n \"Olypiad\": \"37.8\",\\n \"CAvg\": \"55.4\",\\n \"MAvg\": \"36.9\",\\n \"AVG\": \"46.2\"\\n },\\n {\\n \"Model\": \"AceCoder-RM[84]\",\\n \"Base\": \"Coder\",\\n \"#data\": \"22k\",\\n \"HEval+\": \"78.0\",\\n \"MBPP+\": \"66.4\",\\n \"LCBv1-5\": \"27.5\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"27.5\",\\n \"M500\": \"62.6\",\\n \"Minva\": \"29.4\",\\n \"Olypiad\": \"29.0\",\\n \"CAvg\": \"57.3\",\\n \"MAvg\": \"27.5\",\\n \"AVG\": \"42.4\"\\n },\\n {\\n \"Model\": \"AceCoder-Rule[84]\",\\n \"Base\": \"Coder\",\\n \"#data\": \"22k\",\\n \"HEval+\": \"80.5\",\\n \"MBPP+\": \"70.4\",\\n \"LCBv1-5\": \"29.0\",\\n \"AME24\": \"6.7\",\\n \"AME25\": \"6.7\",\\n \"AMC\": \"40.0\",\\n \"M500\": \"62.8\",\\n \"Minva\": \"27.6\",\\n \"Olypiad\": \"27.4\",\\n \"CAvg\": \"60.0\",\\n \"MAvg\": \"28.5\",\\n \"AVG\": \"44.3\"\\n },\\n {\\n \"Model\": \"CodeR1-LC2k[36]\",\\n \"Base\": \"Ins\",\\n \"#data\": \"2k\",\\n \"HEval+\": \"81.7\",\\n \"MBPP+\": \"71.7\",\\n \"LCBv1-5\": \"28.1\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"10.0\",\\n \"AMC\": \"45.0\",\\n \"M500\": \"75.0\",\\n \"Minva\": \"33.5\",\\n \"Olypiad\": \"36.7\",\\n \"CAvg\": \"60.5\",\\n \"MAvg\": \"35.6\",\\n \"AVG\": \"48.0\"\\n },\\n {\\n \"Model\": \"CodeR1-12k[36]\",\\n \"Base\": \"Ins\",\\n \"#data\": \"12k\",\\n \"HEval+\": \"81.1\",\\n \"MBPP+\": \"73.5\",\\n \"LCBv1-5\": \"29.3\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"37.5\",\\n \"M500\": \"74.0\",\\n \"Minva\": \"35.7\",\\n \"Olypiad\": \"36.9\",\\n \"CAvg\": \"61.3\",\\n \"MAvg\": \"33.5\",\\n \"AVG\": \"47.4\"\\n },\\n {\\n \"Model\": \"Zero-Style Reasoners Trained on Curated Math Data\",\\n \"Base\": \"\"\\n },\\n {\\n \"Model\": \"PRIME-Zero[9]\",\\n \"Base\": \"Coder\",\\n \"#data\": \"484k\",\\n \"HEval+\": \"49.4\",\\n \"MBPP+\": \"51.1\",\\n \"LCBv1-5\": \"11.0\",\\n \"AME24\": \"23.3\",\\n \"AME25\": \"23.3\",\\n \"AMC\": \"67.5\",\\n \"M500\": \"81.2\",\\n \"Minva\": \"37.9\",\\n \"Olypiad\": \"41.8\",\\n \"CAvg\": \"37.2\",\\n \"MAvg\": \"45.8\",\\n \"AVG\": \"41.5\"\\n },\\n {\\n \"Model\": \"SimpleRL-Zoo[85]\",\\n \"Base\": \"Base\",\\n \"#data\": \"8.5k\",\\n \"HEval+\": \"73.2\",\\n \"MBPP+\": \"63.2\",\\n \"LCBv1-5\": \"25.6\",\\n \"AME24\": \"16.7\",\\n \"AME25\": \"3.3\",\\n \"AMC\": \"57.5\",\\n \"M500\": \"77.0\",\\n \"Minva\": \"35.7\",\\n \"Olypiad\": \"41.0\",\\n \"CAvg\": \"54.0\",\\n \"MAvg\": \"38.5\",\\n \"AVG\": \"46.3\"\\n },\\n {\\n \"Model\": \"Oat-Zero[38]\",\\n \"Base\": \"Math\",\\n \"#data\": \"8.5k\",\\n \"HEval+\": \"62.2\",\\n \"MBPP+\": \"59.0\",\\n \"LCBv1-5\": \"15.2\",\\n \"AME24\": \"30.0\",\\n \"AME25\": \"16.7\",\\n \"AMC\": \"62.5\",\\n \"M500\": \"80.0\",\\n \"Minva\": \"34.9\",\\n \"Olypiad\": \"41.6\",\\n \"CAvg\": \"45.5\",\\n \"MAvg\": \"44.3\",\\n \"AVG\": \"44.9\"\\n },\\n {\\n \"Model\": \"ORZ[23]\",\\n \"Base\": \"Base\",\\n \"#data\": \"57k\",\\n \"HEval+\": \"80.5\",\\n \"MBPP+\": \"64.3\",\\n \"LCBv1-5\": \"22.0\",\\n \"AME24\": \"13.3\",\\n \"AME25\": \"16.7\",\\n \"AMC\": \"60.0\",\\n \"M500\": \"81.8\",\\n \"Minva\": \"32.7\",\\n \"Olypiad\": \"45.0\",\\n \"CAvg\": \"55.6\",\\n \"MAvg\": \"41.6\",\\n \"AVG\": \"48.6\"\\n },\\n {\\n \"Model\": \"Absolute Zero Training w/ No Curated Data (Ours)\"\\n },\\n {\\n \"Model\": \"AZR (Ours)\",\\n \"Base\": \"Base\",\\n \"#data\": \"0\",\\n \"HEval+\": \"-1.9 71.3\",\\n \"MBPP+\": \"+3.8 69.1\",\\n \"LCBv1-5\": \"+7.8 25.3\",\\n \"AME24\": \"+6.6 13.3\",\\n \"AME25\": \"13.3\",\\n \"AMC\": \"+10.0 52.5\",\\n \"M500\": \"+15.0 74.4\",\\n \"Minva\": \"+9.6 38.2 +13.2\",\\n \"Olypiad\": \"38.5\",\\n \"CAvg\": \"+10.8 55.2\",\\n \"MAvg\": \"+3.2 38.4\",\\n \"AVG\": \"+10.9 46.8 +7.0\"\\n },\\n {\\n \"Model\": \"AZR (Ours)\",\\n \"Base\": \"Coder\",\\n \"#data\": \"0\",\\n \"HEval+\": \"+3.0 83.5\",\\n \"MBPP+\": \"+0.3 69.6\",\\n \"LCBv1-5\": \"+11.8 31.7\",\\n \"AME24\": \"+13.3 20.0\",\\n \"AME25\": \"+6.7 10.0\",\\n \"AMC\": \"57.5\",\\n \"M500\": \"+17.5 72.6\",\\n \"Minva\": \"+22.6 36.4 +19.1\",\\n \"Olypiad\": \"38.2\",\\n \"CAvg\": \"+16.3 61.6+5.0 39.1\",\\n \"MAvg\": \"\",\\n \"AVG\": \"+15.2 50.4+10.2\"\\n }\\n ]\\n}<span id=\"page-8-0\"></span>*Table 1.* **Performance of RL-Trained Reasoner on Reasoning Benchmarks Based on Qwen2.5-7B Models.** Performance of various models is evaluated on three standard code benchmarks (HumanEval<sup>+</sup> , MBPP<sup>+</sup> , LCBv1-5 and six math benchmarks (AIME\\'24, AIME\\'25, AMC\\'23, MATH500, Minerva, OlympiadBench). Average performance across coding and math benchmarks is calculated as average of the two averages: AVG = (CAvg + MAvg)*/*2. We use + for absolute percentage increase from base model. All models are trained using different variants of the Qwen2.5-7B model, with the variant and data usage labeled, more details listed in Table [4](#page-21-1)\\n\\n**Baselines.** For our main results, we use Qwen2.5-7B as the base model, along with its specialized base model variants: Qwen2.5-7B-Coder, Qwen2.5-7B-Instruct, and Qwen2.5-Math-7B [\\\\(Yang et al.,](#page-17-3) [2024a;](#page-17-3) [Hui et al.,](#page-14-3) [2024;](#page-14-3) [Yang et al.,](#page-17-4) [2024b\\\\)](#page-17-4). Furthermore, the zero-style models are usually trained specifically on either code or math data; and only Eurus-2-7B-PRIME-Zero[\\\\(Cui](#page-13-5) [et al.,](#page-13-5) [2025\\\\)](#page-13-5) was trained jointly on both domains. For code data models, we present four variants of the AceCoder [\\\\(Zeng et al.,](#page-18-5) [2025a\\\\)](#page-18-5) and two different CodeR1 models [\\\\(Liu & Zhang,](#page-15-9) [2025\\\\)](#page-15-9). For math data models, we have Qwen2.5-Math-7B-Oat-Zero [\\\\(Liu et al.,](#page-15-10) [2025\\\\)](#page-15-10), Open-Reasoner-Zero-7B (ORZ) [\\\\(Hu et al.,](#page-14-8) [2025\\\\)](#page-14-8), Qwen-2.5-7B-SimpleRL-Zoo [\\\\(Zeng et al.,](#page-18-1) [2025b\\\\)](#page-18-1). All baseline models\\' training data and initialization settings are summarized in Table [4.](#page-21-1) For follow-up scaling experiments, we compare each AZR model against its own corresponding base model, due to the lack of established baselines across different parameter scales. Finally, we compare our Llama3.1-8B-trained model with Llama-3.1-8B-SimpleRL-Zoo [\\\\(Zeng et al.,](#page-18-1) [2025b\\\\)](#page-18-1) and the base model.\\n\\n## **4.2. Results**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**4. Experiments**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 2, \"title\": \"**4.2. Results**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Research Question 1: How does AZR compare to other zero setting models trained with human expert data?** We present the main results of reasoning models trained under both the standard zero and our proposed absolute zero settings in Table [1.](#page-8-0) Notably, Absolute Zero Reasoner-Coder-7B achieves state-of-the-art performance in both the 7B overall average and the coding average categories. Despite being entirely out-of-distribution for both math and code reasoning benchmarks, it surpasses the previous best model by 1.8 absolute percentages. Even more strikingly, it outperforms models trained with expert-curated human data in the coding category by 0*.*3 absolute percentages, while never having access to such data itself.\\n\\n**Strong Cross-domain Generalization.** To assess cross-domain generalization after RLVR, we evaluate math performance before and after training, comparing AZR models with other expert code models, since AZR was trained in coding environments. After training, most expert code models showed minimal changes or even declines in performance compared to their base versions, with an average increase of only 0.65 points across these models, indicating very limited cross-domain generalization. In contrast, AZR base and coder models achieved gains of 10.9 and 15.2 percentage points, respectively, demonstrating substantially stronger generalized reasoning improvements. Similarly, although also out-of-distribution on human-defined code generation tasks, our AZR models improved by 3.2 and 5.0 points, while the math models on average showed just a moderate increases in coding (+2.0 on average).\\n\\nOverall, these results highlight the surprising effectiveness of our approach. Unlike other RLVR models trained and evaluated on human-defined tasks, our AZR models demonstrate strong general reasoning capabilities without any direct training on downstream human-defined math or coding data, only had access to self-proposed tasks during training.\\n\\n**Research Question 2: How do initializing from different base model variants (base vs. coder) affect performance?** As shown in Table [1,](#page-8-0) the coder variant achieved better overall performance in both math and coding after the AZR\\n\\n**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n\\n![](_page_9_Figure_1.jpeg)\\n\\n<span id=\"page-9-0\"></span>*Figure 6.* **(a) In-Distribution & (b) Out-of-Distribution Reasoning Task Performances. (a)** Scores on CruxEval-I, CruxEval-O, and LiveCodeBench-Execution, which correspond to abduction, deduction, and deduction task types respectively, used to evaluate in-distribution abilities of AZR during training across different model sizes and types; **(b)** Out-of-distribution reasoning performance, reported as the average of code tasks, math tasks, and their overall average, across different model sizes and types. A detailed breakdown of all benchmark results can be found in Table [5.](#page-31-0)\\n\\nself-play process. Strikingly, although the coder base model variant started with a lower average performance in math than the vanilla base model (23.9 vs. 27.5), it ultimately outperformed it after AZR training. This highlights the importance of initial code competency as a catalyst for enhancing broader reasoning abilities within the Absolute Zero Reasoner approach.\\n\\n**Research Question 3: How does varying model size effect AZR\\'s in-distribution and out-of-distribution capabilities?** We examine the effects of scaling model size and present both in-distribution and out-of-distribution results in Figure [6](#page-9-0) (a) and (b), respectively. Given the strong performance of coder models in the 7B category, we extend the analysis by evaluating smaller and larger variants: Qwen2.5-3B-Coder and Qwen2.5-14B-Coder. Due to the absence of existing baselines for these zero-style reasoner models, we compare each model\\'s performance to its corresponding base coder model.\\n\\nThe results reveal a clear trend: our method delivers *greater gains on larger, more capable models*. In the in-distribution setting, the 7B and 14B models continue to improve beyond 200 training steps, whereas the smaller 3B model appears to plateau. For out-of-distribution domains, larger models also show greater overall performance improvements than smaller ones: +5.7, +10.2, +13.2 overall performance gains, respectively for 3B, 7B and 14B. This is an encouraging sign, since base models continue to improve and also suggesting that scaling enhances the effectiveness of AZR. In future work, we aim to investigate the scaling laws that govern performance in the Absolute Zero paradigm.\\n\\n**Research Question 4: Any interesting observations by changing the model class?** We also evaluate our method on a different model class, using Llama3.1-8B as the base shown in Figure [6.](#page-9-0) Unlike the 3B and 14B categories, this setting has an existing baseline, SimpleRL [\\\\(Zeng et al.,](#page-18-1) [2025b\\\\)](#page-18-1), which enables a direct comparison. Although Llama3.1-8B is less capable than the Qwen2.5 models, our method still produces moderate improvements (+3.2), demonstrating AZR\\'s effectiveness even on relatively weaker models. However, these gains appear more limited, which aligns with our earlier observation that performance improvements tend to scale with initial base model potency.\\n\\n**Research Question 5: Any interesting behaviors or patterns observed during AZR training?** We observed interesting response patterns in both the proposal and solution stages. The model is capable of proposing diverse programs, such as string manipulation tasks, dynamic programming problems, and practical cases (*e.g*., calculating a triangle\\'s area using Heron\\'s formula). We show a concrete example in Figure [7,](#page-10-0) where AZR proposes a code problem that searches for the sum of continuous sub-arrays matching a target value and solves it through trial-and-error.\\n\\nOverall, the models trained exhibits distinct reasoning patterns depending on the task type. For example, when solving abduction tasks, it repeatedly tests different input patterns, self-correcting until the reasoned output matches the given input. When predicting outputs, it steps through the code and records structured intermediate results (such as dynamic programming arrays) until the final output is reached. When inducting programs from given inputs, outputs, and descriptions, the model systematically checks each test case to confirm that its program produces correct results. We showcase more concrete examples of these behaviors in Figures [18](#page-24-0) and [20](#page-26-0) to [26.](#page-33-0) We also share some fun \"vibe checks\" such as solving Sudoku and solving the [sum-product game](https://en.wikipedia.org/wiki/Sum_and_Product_Puzzle) in Figures [40](#page-45-0) and [41.](#page-47-0)\\n\\n**Intermediate Planning During Code Response.** Another interesting pattern emerged in our AZR models during the code induction task: the final code outputs were often interleaved with comments that resembled immediate step-by-step plans, reminiscent of the ReAct prompting framework [\\\\(Yao et al.,](#page-17-1) [2023\\\\)](#page-17-1). A similar behavior has been observed in recent formal math proving models, such as DeepSeek\\n\\n#### Input: [1,2,3,4,5], 5 Model-proposed Task Response of Predict Input Let\\'s analyze the code snippet **\u2026(analysis)** To find one possible input that produces the output 1, we need to find a scenario where **\u2026(analysis) Let\\'s consider a simple example: numbers = [1, 2], target = 1 Here\\'s the step-by-step calculation:** 1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 2 = 3, accumulated\\\\_values = [1, 3] -Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target) Since no pair satisfies the condition, the function will not return any value. This doesn\\'t match our output. Let\\'s try another example **\u2026(Tried 3 more examples) Given the complexity and the fact that no simple example seems to work, let\\'s try a more complex scenario: numbers = [2, -1, 1], target = 1** Step-by-step calculation: 1. current\\\\_sum = 0 + 2 = 2, accumulated\\\\_values = [2] 2. current\\\\_sum = 2 - 1 = 1 , accumulated\\\\_values = [2, 1] 3. current\\\\_sum = 1 + 1 = 2, accumulated\\\\_values = [2, 1, 2] - Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target)\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**4. Experiments**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 2, \"title\": \"**4.2. Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"Input: [1,2,3,4,5], 5 Model-proposed Task Response of Predict Input Let\\'s analyze the code snippet **\u2026(analysis)** To find one possible input that produces the output 1, we need to find a scenario where **\u2026(analysis) Let\\'s consider a simple example: numbers = [1, 2], target = 1 Here\\'s the step-by-step calculation:** 1. current\\\\\\\\_sum = 0 + 1 = 1, accumulated\\\\\\\\_values = [1] 2. current\\\\\\\\_sum = 1 + 2 = 3, accumulated\\\\\\\\_values = [1, 3] -Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target) Since no pair satisfies the condition, the function will not return any value. This doesn\\'t match our output. Let\\'s try another example **\u2026(Tried 3 more examples) Given the complexity and the fact that no simple example seems to work, let\\'s try a more complex scenario: numbers = [2, -1, 1], target = 1** Step-by-step calculation: 1. current\\\\\\\\_sum = 0 + 2 = 2, accumulated\\\\\\\\_values = [2] 2. current\\\\\\\\_sum = 2 - 1 = 1 , accumulated\\\\\\\\_values = [2, 1] 3. current\\\\\\\\_sum = 1 + 1 = 2, accumulated\\\\\\\\_values = [2, 1, 2] - Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target)\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n<span id=\"page-10-0\"></span>Output: 1\\n\\n*Figure 7.* **Example of a Model-Proposed Task and Its Response for Solving an Abduction Task.** (Left) The model autonomously proposes an input and program for the abduction task. We execute the program to verify its validity and obtain the corresponding output. (Right) The model\\'s reasoning process when solving the abduction task: given the code and output, it attempts to infer the original input. The model begins by analyzing the program, proposes an initial input, and reasons through the code to produce an output. If there is a mismatch, it reflects on the discrepancy and iteratively adjusts the input until the generated output matches the target. Interestingly, the agent arrives at a different input than the gold one, but since it produces the correct output, the answer is considered correct.\\n\\n- Check for pair (i=0, j=2): 2 - 2 = 0 (not equal to target) - Check for pair (i=1, j=2): 2 - 1 = 1 (equal to target)\\n\\n**The pair (i=1, j=2) satisfies the condition, and the function returns the first accumulated value in this pair, which is 1. This matches our output.**\\n\\nProver v2, which is significantly larger in scale (671B). This pattern suggests that models may naturally adopt intermediate planning as a strategy to enhance final answers. Therefore, it may be beneficial to explicitly enable or encourage this behavior in *long-form responses* across other domains.\\n\\n**Cognitive Behavior in Llama.** Interestingly, we also observed some emergent cognitive patterns in Absolute Zero Reasoner-Llama3.1-8B, similar to those reported by [Zeng et al.](#page-18-1) [\\\\(2025b\\\\)](#page-18-1), and we include one example in Figure [26,](#page-33-0) where clear state-tracking behavior is demonstrated. In addition, we encountered some unusual and potentially concerning chains of thought from the Llama model trained with AZR. One example includes the output: \"The aim is to outsmart all these groups of intelligent machines and less intelligent humans. This is for the brains behind the future\" shown in Figure [32.](#page-37-0) We refer to this as the *\"uh-oh moment\"* and encourage future work to further investigate its potential implications.\\n\\n**Token Length Increase Depends on Task Type.** Finally, we observed that token length increases over the course of training, consistent with findings from recent studies [\\\\(Hu et al.,](#page-14-8) [2025;](#page-14-8) [Liu et al.,](#page-15-10) [2025\\\\)](#page-15-10). Interestingly, our results reveal one of the first observation of clear distinctions in token length growth across different types of cognitive tasks. As shown in Figures [15](#page-23-0) to [17,](#page-24-1) the extent of lengthening varies by task type. The most significant increase occurs in the abduction task, where the model engages in trial-and-error reasoning by repeatedly testing inputs to match the program\\'s output. This suggests that the observed variation in token length is not incidental, but rather a reflection of task-specific reasoning behavior.\\n\\n**Research Question 6: Are all task types essential for good performance (Ablation)?** Due to resource constraints, we perform the ablation studies in this section and the next using only Absolute Zero Reasoner-Base-7B. We begin by testing the importance of task types during training, with results shown in Table [2.](#page-11-0) In row 1, both induction and abduction tasks are removed; in row 2, only the induction task is removed. In both cases, math performance drops significantly, with the most severe degradation occurring when more task types are excluded. These findings highlight the complementary role of the three task types in improving general reasoning capability, with each contributing in a distinct and essential way.\\n\\n**Research Question 7: How much do the designs of proposer contribute to the overall performance (Ablation)?** Next, we ablate two components of the proposer role and present the results in Table [2.](#page-11-0) First, we examine whether conditioning on historic reference triplets is necessary. To do so, we design a variant in which a fixed prompt is used to propose abduction and deduction tasks, rather than dynamically conditioning on *K* historical triplets (row 3). This results in a 5-point absolute drop in math performance and a 1-point drop in code performance. This suggest that dynamically conditioning on reference programs helps\\n\\n| Absolute Zero: Reinforced Self-play Reasoning with Zero Data |  |  |  |  |  |  |\\n|--------------------------------------------------------------|--|--|--|--|--|--|\\n|--------------------------------------------------------------|--|--|--|--|--|--|\\n\\nAbsolute Zero: Reinforced Self-play Reasoning with Zero Data,,,,,,\\r\\n{\\n \"headers\": [\\n \"Absolute Zero: Reinforced Self-play Reasoning with Zero Data\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\"\\n ],\\n \"rows\": []\\n}\\n\\n| Experiment        | Task Type     | Gen Reference | Trained Roles   | Code Avg. | Math Avg. | Overall Avg. |\\n|-------------------|---------------|---------------|-----------------|-----------|-----------|--------------|\\n| Deduction only    | Ded           | /             | /               | 54.6      | 32.0      | 43.3         |\\n| w/o Induction     | Abd, Ded      | /             | /               | 54.2      | 33.3      | 43.8         |\\n| w/o Gen Reference | /             | 0             | /               | 54.4      | 33.1      | 43.8         |\\n| Train Solver Only | /             | /             | Solve Only      | 54.8      | 36.0      | 45.4         |\\n| Ours              | Abd, Ded, Ind | K             | Propose & Solve | 55.2      | 38.4      | 46.8         |\\n\\nExperiment,Task Type,Gen Reference,Trained Roles,Code Avg.,Math Avg.,Overall Avg.\\r\\nDeduction only,Ded,/,/,54.6,32.0,43.3\\r\\nw/o Induction,\"Abd, Ded\",/,/,54.2,33.3,43.8\\r\\nw/o Gen Reference,/,0,/,54.4,33.1,43.8\\r\\nTrain Solver Only,/,/,Solve Only,54.8,36.0,45.4\\r\\nOurs,\"Abd, Ded, Ind\",K,Propose & Solve,55.2,38.4,46.8\\r\\n{\\n \"headers\": [\\n \"Experiment\",\\n \"Task Type\",\\n \"Gen Reference\",\\n \"Trained Roles\",\\n \"Code Avg.\",\\n \"Math Avg.\",\\n \"Overall Avg.\"\\n ],\\n \"rows\": [\\n {\\n \"Experiment\": \"Deduction only\",\\n \"Task Type\": \"Ded\",\\n \"Gen Reference\": \"/\",\\n \"Trained Roles\": \"/\",\\n \"Code Avg.\": \"54.6\",\\n \"Math Avg.\": \"32.0\",\\n \"Overall Avg.\": \"43.3\"\\n },\\n {\\n \"Experiment\": \"w/o Induction\",\\n \"Task Type\": \"Abd, Ded\",\\n \"Gen Reference\": \"/\",\\n \"Trained Roles\": \"/\",\\n \"Code Avg.\": \"54.2\",\\n \"Math Avg.\": \"33.3\",\\n \"Overall Avg.\": \"43.8\"\\n },\\n {\\n \"Experiment\": \"w/o Gen Reference\",\\n \"Task Type\": \"/\",\\n \"Gen Reference\": \"0\",\\n \"Trained Roles\": \"/\",\\n \"Code Avg.\": \"54.4\",\\n \"Math Avg.\": \"33.1\",\\n \"Overall Avg.\": \"43.8\"\\n },\\n {\\n \"Experiment\": \"Train Solver Only\",\\n \"Task Type\": \"/\",\\n \"Gen Reference\": \"/\",\\n \"Trained Roles\": \"Solve Only\",\\n \"Code Avg.\": \"54.8\",\\n \"Math Avg.\": \"36.0\",\\n \"Overall Avg.\": \"45.4\"\\n },\\n {\\n \"Experiment\": \"Ours\",\\n \"Task Type\": \"Abd, Ded, Ind\",\\n \"Gen Reference\": \"K\",\\n \"Trained Roles\": \"Propose & Solve\",\\n \"Code Avg.\": \"55.2\",\\n \"Math Avg.\": \"38.4\",\\n \"Overall Avg.\": \"46.8\"\\n }\\n ]\\n}<span id=\"page-11-0\"></span>*Table 2.* **Ablation Results.** We ablate task types and the proposer role in the Absolute Zero Reasoner using the 7B base model. A \\'/\\' indicates that the configuration remains unchanged from the standard AZR setup. Removing induction or using only deduction leads to significant performance drops (rows 1 & 2). For the proposer role, both removing conditioning on *K* references (row 3) and omitting proposer-role training (row 4) result in degraded performance. Overall, all components are essential for general reasoning.\\n\\nimprove performance, possibly by increasing diversity and achieving better coverage of the reasoning problem space.\\n\\nFinally, we consider a case where we do not train the proposer at all. Instead, we only prompt it using the current learner and train the solver alone (row 4). We observe a moderate drop in overall performance (-1.4), suggesting that while proposer training is beneficial, it may not be the most critical factor for now in the AZR framework. We hypothesize that this could be related to task interference, as studied in multitask learning literature [\\\\(Suteu & Guo,](#page-16-8) [2019\\\\)](#page-16-8). Thus, we believe that further investigation into how to make the proposer even more potent is an exciting and promising direction.\\n\\n**Additional Results.** Beyond the core research questions, we present additional results, including the breakdown of individual out-of-distribution benchmark scores during training for the 7B base and coder models in Figures [28](#page-34-0) and [29,](#page-35-0) for th 14B base and coder model in Figures [30](#page-36-0) and [31.](#page-37-1) For completeness, we also report in-distribution benchmark performance during training for the 7B base model in Figure [14.](#page-22-2) Finally, we invite interested readers to explore Appendix [D,](#page-48-0) where we share several experimental directions that, while not yielding strong performance gains, produced interesting and insightful findings.\\n\\n# **5. Related Work**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**5. Related Work**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Reasoning with RL.** Using RL to enhance reasoning capabilities has recently emerged as an important step in the post-training process of strong reasoning-focused large language models [\\\\(Lambert et al.,](#page-15-0) [2024\\\\)](#page-15-0). One of the first works to explore a self-bootstrapping approach to improving LLM reasoning is STaR, which employs expert iteration and rejection sampling of outcome-verified responses to iteratively improve the model\\'s CoT. A monumental work, o1 [\\\\(Jaech et al.,](#page-14-0) [2024\\\\)](#page-14-0), was among the first to deploy this idea on a scale, achieving state-of-the-art results in reasoning tasks at the time of release. More recently, the R1 model [\\\\(DeepSeek-AI et al.,](#page-13-0) [2025\\\\)](#page-13-0) became the first open-weight model to match or even surpass the performance of o1. Most notably, the zero setting was introduced, in which reinforcement learning is applied directly on top of the base LLM. This inspired followup work, which are open source attempts to replicate the R1 process or to improve the underlying reinforcement learning algorithm [\\\\(Zeng et al.,](#page-18-1) [2025b;](#page-18-1) [Liu et al.,](#page-15-10) [2025;](#page-15-10) [Cui et al.,](#page-13-5) [2025;](#page-13-5) [Hu et al.,](#page-14-8) [2025;](#page-14-8) [Yu et al.,](#page-17-5) [2025;](#page-17-5) [Yuan et al.,](#page-17-6) [2025\\\\)](#page-17-6). Recent work explored RL on human defined procedural generated puzzles saw improvements in math [\\\\(Xie et al.,](#page-17-7) [2025\\\\)](#page-17-7), and using one human example can almost match the performance of thousands [\\\\(Wang et al.,](#page-17-8) [2025b\\\\)](#page-17-8). We extend the zero setting to a new absolute zero setting, where not only is the RLVR process initialized from a base LLM without SFT, but no external prompt data or answers are provided to the learner. All data used to improve reasoning were self-proposed, and refined entirely through RLVR. Moreover, our goal is not to only match zero-setting models, but to surpass them in the long run.\\n\\n**Self-play.** The self-play paradigm can be traced back to early 2000s, where [Schmidhuber](#page-16-9) [\\\\(2003;](#page-16-9) [2011\\\\)](#page-16-10) (of course) explored a two-agent setup in which a proposal agent invents questions for a prediction agent to answer. This dynamic continuously and automatically improves both agents, enabling theoretically never-ending progress [\\\\(Schaul,](#page-15-11) [2024\\\\)](#page-15-11). AlphaGo and AlphaZero [\\\\(Silver et al.,](#page-16-11) [2016;](#page-16-11) [2017\\\\)](#page-16-3) extend the self-play paradigm to the two-player zero-sum game of Go, where the current learner competes against earlier versions of itself to progressively enhance its capabilities. These were among the first milestone works to demonstrate superhuman performance in the game of Go. Moreover, methods such as asymmetric self-play [\\\\(Sukhbaatar et al.,](#page-16-5) [2018;](#page-16-5) [OpenAI et al.,](#page-15-12) [2021\\\\)](#page-15-12), unsupervised environment design [\\\\(Wang et al.,](#page-16-12) [2019;](#page-16-12) [Dennis et al.,](#page-13-6) [2020\\\\)](#page-13-6), unsupervised reinforcement learning [\\\\(Laskin et al.,](#page-15-13) [2021;](#page-15-13) [Zhao et al.,](#page-18-4) [2022;](#page-18-4) [2025b\\\\)](#page-18-6), and automatic goal generation [\\\\(Florensa et al.,](#page-14-9) [2018\\\\)](#page-14-9) all center around inventing new tasks for an agent to learn from\u2014typically without supervision. In these approaches, the process of setting goals itself is often dynamic and continuously evolving. Generative adversarial networks [\\\\(Goodfellow et al.,](#page-14-10) [2020\\\\)](#page-14-10), also belong in this paradigm where a discriminator discriminate between real data and generated data, and the generated is trained to fool the discriminator.\\n\\nMost recently, SPIN and Self-Rewarding Language Models [\\\\(Chen et al.,](#page-13-2) [2024;](#page-13-2) [Yuan et al.,](#page-17-9) [2024\\\\)](#page-17-9) use the same instance of the lanugage models themselves as the reward model to progressively improve the generative and discriminative abilities of the same LLM for alignment. [\\\\(Kirchner et al.,](#page-14-11) [2024\\\\)](#page-14-11) uses Prover-Verifier Game for increasing legibility and eva [\\\\(Ye et al.,](#page-17-10) [2024\\\\)](#page-17-10) uses self-play for alignment, but reward model is the main bottleneck as it is not reliable for reasoning tasks [\\\\(Lambert et al.,](#page-15-0) [2024\\\\)](#page-15-0). SPC [\\\\(Chen et al.,](#page-13-1) [2025\\\\)](#page-13-1) used self-play to train on human-curated tasks to increase the critic capabilities and SPAG [\\\\(Cheng et al.,](#page-13-7) [2024\\\\)](#page-13-7) trained using self-play in specific game of Adversarial Taboo. Concurrent works\u2014Genius, EMPO, and TTRL [\\\\(Xu et al.,](#page-17-11) [2025;](#page-17-11) [Zhang et al.,](#page-18-7) [2025b;](#page-18-7) [Zuo et al.,](#page-18-8) [2025\\\\)](#page-18-8)\u2014leverage human-curated language queries without labels to train reinforcement learning agents, but still rely on a fixed human defined learning task distribution. Finally, Minimo [\\\\(Poesia et al.,](#page-15-14) [2024\\\\)](#page-15-14) extends self-play to formal mathematics, where a pair of conjecture- and theorem-proving agents are jointly trained using reinforcement learning. Our work builds upon the self-play paradigm, but it is the first to use it to elicit long CoT for improved reasoning, and the first to frame the problem space as a Python input/output/function abduction/deduction/induction tasks, grounding it in an operationalizable environment to facilitate RLVR.\\n\\n**Weak-to-Strong Supervision.** The concept of weak-to-strong supervision has been studied in prior work, where a teacher\u2014despite being weaker than the learner\u2014still provides useful guidance [\\\\(Burns et al.,](#page-13-8) [2024;](#page-13-8) [Hinton et al.,](#page-14-12) [2015;](#page-14-12) [Christiano,](#page-13-9) [2018;](#page-13-9) [2019;](#page-13-10) [Demski &](#page-13-11) [Garrabrant,](#page-13-11) [2019;](#page-13-11) [Leike & Sutskever,](#page-15-15) [2023;](#page-15-15) [Hubinger et al.,](#page-14-13) [2019\\\\)](#page-14-13). We consider a similar setting in which the learner may possess superhuman capabilities. However, rather than relying on supervision from a weaker teacher, we propose an alternative approach: guiding the learner\\'s improvement through verifiable rewards, which potentially offer a more reliable and scalable learning signal. Furthermore, in our proposed method, the learning task and goal distribution is not predefined by any external supervisor\u2014they are entirely self-generated by the learner, enabling it to maximize its learning potential through autonomous self-practice.\\n\\n# **6. Conclusion and Discussion**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**6. Conclusion and Discussion**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Conclusion.** In this work, we proposed the Absolute Zero paradigm, a novel setting that addresses the data limitations of existing RLVR frameworks. In this paradigm, reasoning agents are tasked with generating their own learning task distributions and improving their reasoning abilities with environmental guidance. We then presented our own instantiation, the Absolute Zero Reasoner (AZR), which is trained by having them propose and solve code-related reasoning tasks grounded by code executor.\\n\\nWe evaluated our trained models on out-of-distribution benchmarks in both the code generation and mathematical reasoning domains. Remarkably, even though our models were not directly trained on these tasks and lacked human expert-curated datasets, our reasoning agents achieved exceptional performance, surpassing the state-of-the-art in combined general reasoning scores and in coding. This demonstrates the potential of the absolute zero paradigm to drive superior reasoning capabilities without the need for extensive domain-specific training data. Furthermore, we showed that AZR scales efficiently, offering strong performance across varying model sizes, and can enhance the capabilities of other model classes as well. To foster further exploration and advancement of this emerging paradigm, we are releasing the code, models, and logs as open-source, encouraging the research community to build upon our findings.\\n\\n**Discussion.** We believe there remains much to explore, such as altering the environment from which the reasoner receives verifiable feedback, including sources like the world wide web, formal math languages [\\\\(Sutton,](#page-16-13) [2001;](#page-16-13) [Ren et al.,](#page-15-3) [2025\\\\)](#page-15-3), world simulators, or even the real world. Furthermore, AZ\\'s generality could possibly be extend to domains such as embodied AI [\\\\(Zitkovich et al.,](#page-18-9) [2023;](#page-18-9) [Yue](#page-17-12) [et al.,](#page-17-12) [2024\\\\)](#page-17-12). Additionally, more complex agentic tasks or scientific experiments, present exciting opportunities to further advance the absolute zero setting to different application domains [\\\\(Wu et al.,](#page-17-13) [2024;](#page-17-13) [2023\\\\)](#page-17-14). Beyond that, future directions could include exploring multimodal reasoning models, modifying the distribution *p*(*z*) to incorporate privileged information, defining or even let the model dynamically learn how to define *f* (Equation [\\\\(3\\\\)](#page-3-2)), or designing exploration/diversity rewards for both the propose and solve roles.\\n\\nWhile underappreciated in current reasoning literature, the exploration component of RL has long been recognized as a critical driver for emergent behavior in traditional RL [\\\\(Yue et al.,](#page-17-0) [2025;](#page-17-0) [Silver et al.,](#page-16-11) [2016;](#page-16-11) [Ladosz et al.,](#page-14-14) [2022\\\\)](#page-14-14). Years of research have examined various forms of exploration, even in related subfields using LLMs such as red teaming [\\\\(Zhao et al.,](#page-18-2) [2025a\\\\)](#page-18-2), yet its role in LLM reasoning models remains underexplored. Taking this a step further, our framework investigates an even more meta-level exploration problem: exploration within the learning task space\u2014where the agent learns not just how to solve tasks, but what tasks to learn from and how to find them. Rather than being confined to a fixed problem set, AI reasoner agents may benefit from dynamically defining and refining their own learning tasks. This shift opens a powerful new frontier\u2014where agents explore not only solution spaces but also expand the boundaries of problem spaces. We believe this is a promising and important direction for future research.\\n\\nOne limitation of our work is that we did not address how to safely manage a system composed of such self-improving components. To our surprise, we observed several instances of safety-concerning CoT from the Llama-3.1-8B model, which we term the \"uh-oh moment\". These findings suggest that the proposed absolute zero paradigm, while reducing the need for human intervention for curating tasks, still necessitates oversight due to lingering safety concerns and is a critical direction for future research [\\\\(Wang et al.,](#page-17-15) [2024;](#page-17-15) [2025a\\\\)](#page-16-14).\\n\\nAs a final note, we explored reasoning models that possess experience\u2014models that not only solve given tasks, but also define and evolve their own learning task distributions with the help of an environment. Our results with AZR show that this shift enables strong performance across diverse reasoning tasks, even with significantly fewer privileged resources, such as curated human data. We believe this could finally free reasoning models from the constraints of human-curated data [\\\\(Morris,](#page-15-16) [2025\\\\)](#page-15-16) and marks the beginning of a new chapter for reasoning models: **\"welcome to the era of experience\"** [\\\\(Silver & Sutton,](#page-16-15) [2025;](#page-16-15) [Zhao et al.,](#page-18-10) [2024\\\\)](#page-18-10).\\n\\n# **References**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**References**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n- <span id=\"page-13-3\"></span>Aryabumi, V., Su, Y., Ma, R., Morisot, A., Zhang, I., Locatelli, A., Fadaee, M., \u00dcst\u00fcn, A., and Hooker, S. To code, or not to code? exploring impact of code in pre-training. *CoRR*, abs/2408.10914, 2024. doi: 10.48550/ARXIV.2408.10914. URL <https://doi.org/10.48550/arXiv.2408.10914>.\\n- <span id=\"page-13-8\"></span>Burns, C., Izmailov, P., Kirchner, J. H., Baker, B., Gao, L., Aschenbrenner, L., Chen, Y., Ecoffet, A., Joglekar, M., Leike, J., Sutskever, I., and Wu, J. Weak-to-strong generalization: Eliciting strong capabilities with weak supervision. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=ghNRg2mEgN>.\\n- <span id=\"page-13-12\"></span>Canal, M. Radon: Python tool for code metrics. <https://github.com/rubik/radon>, 2023. Accessed: 2025-04-06.\\n- <span id=\"page-13-1\"></span>Chen, J., Zhang, B., Ma, R., Wang, P., Liang, X., Tu, Z., Li, X., and Wong, K.-Y. K. Spc: Evolving self-play critic via adversarial games for llm reasoning, 2025. URL <https://arxiv.org/abs/2504.19162>.\\n- <span id=\"page-13-2\"></span>Chen, Z., Deng, Y., Yuan, H., Ji, K., and Gu, Q. Self-play fine-tuning converts weak language models to strong language models. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=O4cHTxW9BS>.\\n- <span id=\"page-13-7\"></span>Cheng, P., Hu, T., Xu, H., Zhang, Z., Dai, Y., Han, L., Du, N., and Li, X. Self-playing adversarial language game enhances LLM reasoning. In Globersons, A., Mackey, L., Belgrave, D., Fan, A., Paquet, U., Tomczak, J. M., and Zhang, C. (eds.), *Advances in Neural Information Processing Systems 38: Annual Conference on Neural Information Processing Systems 2024, NeurIPS 2024, Vancouver, BC, Canada, December 10 - 15, 2024*, 2024. URL [http://papers.nips.cc/paper\\\\\\\\_files/paper/2024/hash/](http://papers.nips.cc/paper_files/paper/2024/hash/e4be7e9867ef163563f4a5e90cec478f-Abstract-Conference.html) [e4be7e9867ef163563f4a5e90cec478f-Abstract-Conference.html](http://papers.nips.cc/paper_files/paper/2024/hash/e4be7e9867ef163563f4a5e90cec478f-Abstract-Conference.html).\\n- <span id=\"page-13-9\"></span>Christiano, P. Approval-directed bootstrapping. [https://www.alignmentforum.org/posts/6x7oExXi32ot6HjJv/](https://www.alignmentforum.org/posts/6x7oExXi32ot6HjJv/approval-directed-bootstrapping) [approval-directed-bootstrapping](https://www.alignmentforum.org/posts/6x7oExXi32ot6HjJv/approval-directed-bootstrapping), 2018. AI Alignment Forum.\\n- <span id=\"page-13-10\"></span>Christiano, P. Capability amplification. [https://www.alignmentforum.org/posts/t3AJW5jP3sk36aGoC/](https://www.alignmentforum.org/posts/t3AJW5jP3sk36aGoC/capability-amplification-1) [capability-amplification-1](https://www.alignmentforum.org/posts/t3AJW5jP3sk36aGoC/capability-amplification-1), 2019. AI Alignment Forum.\\n- <span id=\"page-13-5\"></span>Cui, G., Yuan, L., Wang, Z., Wang, H., Li, W., He, B., Fan, Y., Yu, T., Xu, Q., Chen, W., Yuan, J., Chen, H., Zhang, K., Lv, X., Wang, S., Yao, Y., Han, X., Peng, H., Cheng, Y., Liu, Z., Sun, M., Zhou, B., and Ding, N. Process reinforcement through implicit rewards. *CoRR*, abs/2502.01456, 2025. doi: 10.48550/ARXIV.2502.01456. URL <https://doi.org/10.48550/arXiv.2502.01456>.\\n- <span id=\"page-13-0\"></span>DeepSeek-AI, Guo, D., Yang, D., Zhang, H., Song, J., Zhang, R., Xu, R., Zhu, Q., Ma, S., Wang, P., Bi, X., Zhang, X., Yu, X., Wu, Y., Wu, Z. F., Gou, Z., Shao, Z., Li, Z., Gao, Z., Liu, A., Xue, B., Wang, B., Wu, B., Feng, B., Lu, C., Zhao, C., Deng, C., Zhang, C., Ruan, C., Dai, D., Chen, D., Ji, D., Li, E., Lin, F., Dai, F., Luo, F., Hao, G., Chen, G., Li, G., Zhang, H., Bao, H., Xu, H., Wang, H., Ding, H., Xin, H., Gao, H., Qu, H., Li, H., Guo, J., Li, J., Wang, J., Chen, J., Yuan, J., Qiu, J., Li, J., Cai, J. L., Ni, J., Liang, J., Chen, J., Dong, K., Hu, K., Gao, K., Guan, K., Huang, K., Yu, K., Wang, L., Zhang, L., Zhao, L., Wang, L., Zhang, L., Xu, L., Xia, L., Zhang, M., Zhang, M., Tang, M., Li, M., Wang, M., Li, M., Tian, N., Huang, P., Zhang, P., Wang, Q., Chen, Q., Du, Q., Ge, R., Zhang, R., Pan, R., Wang, R., Chen, R. J., Jin, R. L., Chen, R., Lu, S., Zhou, S., Chen, S., Ye, S., Wang, S., Yu, S., Zhou, S., Pan, S., and Li, S. S. Deepseek-r1: Incentivizing reasoning capability in llms via reinforcement learning. *CoRR*, abs/2501.12948, 2025. doi: 10.48550/ARXIV.2501.12948. URL <https://doi.org/10.48550/arXiv.2501.12948>.\\n- <span id=\"page-13-11\"></span>Demski, A. and Garrabrant, S. Embedded agency. *CoRR*, abs/1902.09469, 2019. URL <http://arxiv.org/abs/1902.09469>.\\n- <span id=\"page-13-6\"></span>Dennis, M., Jaques, N., Vinitsky, E., Bayen, A. M., Russell, S., Critch, A., and Levine, S. Emergent complexity and zeroshot transfer via unsupervised environment design. In Larochelle, H., Ranzato, M., Hadsell, R., Balcan, M., and Lin, H. (eds.), *Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020, virtual*, 2020. URL [https://proceedings.neurips.cc/paper/2020/hash/](https://proceedings.neurips.cc/paper/2020/hash/985e9a46e10005356bbaf194249f6856-Abstract.html) [985e9a46e10005356bbaf194249f6856-Abstract.html](https://proceedings.neurips.cc/paper/2020/hash/985e9a46e10005356bbaf194249f6856-Abstract.html).\\n- <span id=\"page-13-4\"></span>Dubey, A., Jauhri, A., Pandey, A., Kadian, A., Al-Dahle, A., Letman, A., Mathur, A., Schelten, A., Yang, A., Fan, A., Goyal, A., Hartshorn, A., Yang, A., Mitra, A., Sravankumar, A., Korenev, A., Hinsvark, A., Rao, A., Zhang, A., Rodriguez, A., Gregerson, A., Spataru, A., Rozi\u00e8re, B., Biron, B., Tang, B., Chern, B., Caucheteux, C., Nayak, C., Bi, C., Marra, C., McConnell, C., Keller, C., Touret, C., Wu, C., Wong, C., Ferrer, C. C., Nikolaidis, C., Allonsius, D., Song, D., Pintz, D., Livshits, D., Esiobu, D., Choudhary, D., Mahajan, D., Garcia-Olano, D., Perino, D., Hupkes, D., Lakomkin, E., AlBadawy, E., Lobanova, E., Dinan, E., Smith, E. M., Radenovic, F., Zhang, F., Synnaeve, G., Lee, G., Anderson, G. L., Nail, G., Mialon, G., Pang, G., Cucurell, G., Nguyen, H., Korevaar, H., Xu, H., Touvron, H., Zarov, I., Ibarra, I. A., Kloumann, I. M., Misra, I., Evtimov, I., Copet, J., Lee, J., Geffert, J., Vranes, J., Park, J., Mahadeokar, J., Shah, J., van der Linde, J., Billock, J., Hong, J., Lee, J., Fu, J., Chi, J., Huang, J., Liu, J., Wang, J., Yu, J., Bitton, J., Spisak, J., Park, J., Rocca, J., Johnstun, J., Saxe, J., Jia, J., Alwala, K. V., Upasani, K., Plawiak, K., Li, K., Heafield,\\n\\nK., Stone, K., and et al. The llama 3 herd of models. *CoRR*, abs/2407.21783, 2024. doi: 10.48550/ARXIV.2407.21783. URL <https://doi.org/10.48550/arXiv.2407.21783>.\\n\\n<span id=\"page-14-15\"></span>Ebert, C., Cain, J., Antoniol, G., Counsell, S., and Laplante, P. Cyclomatic complexity. *IEEE software*, 33(6):27\u201329, 2016.\\n\\n- <span id=\"page-14-9\"></span>Florensa, C., Held, D., Geng, X., and Abbeel, P. Automatic goal generation for reinforcement learning agents. In Dy, J. G. and Krause, A. (eds.), *Proceedings of the 35th International Conference on Machine Learning, ICML 2018, Stockholmsm\u00e4ssan, Stockholm, Sweden, July 10-15, 2018*, volume 80 of *Proceedings of Machine Learning Research*, pp. 1514\u20131523. PMLR, 2018. URL <http://proceedings.mlr.press/v80/florensa18a.html>.\\n- <span id=\"page-14-10\"></span>Goodfellow, I. J., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S., Courville, A. C., and Bengio, Y. Generative adversarial networks. *Commun. ACM*, 63(11):139\u2013144, 2020. doi: 10.1145/3422622. URL <https://doi.org/10.1145/3422622>.\\n- <span id=\"page-14-7\"></span>Gu, A., Rozi\u00e8re, B., Leather, H. J., Solar-Lezama, A., Synnaeve, G., and Wang, S. Cruxeval: A benchmark for code reasoning, understanding and execution. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=Ffpg52swvg>.\\n\\n<span id=\"page-14-16\"></span>Halstead, M. H. *Elements of Software Science (Operating and programming systems series)*. Elsevier Science Inc., 1977.\\n\\n- <span id=\"page-14-5\"></span>He, C., Luo, R., Bai, Y., Hu, S., Thai, Z. L., Shen, J., Hu, J., Han, X., Huang, Y., Zhang, Y., Liu, J., Qi, L., Liu, Z., and Sun, M. Olympiadbench: A challenging benchmark for promoting AGI with olympiad-level bilingual multimodal scientific problems. In Ku, L., Martins, A., and Srikumar, V. (eds.), *Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2024, Bangkok, Thailand, August 11-16, 2024*, pp. 3828\u20133850. Association for Computational Linguistics, 2024. doi: 10.18653/V1/2024.ACL-LONG.211. URL <https://doi.org/10.18653/v1/2024.acl-long.211>.\\n- <span id=\"page-14-6\"></span>Hendrycks, D., Burns, C., Kadavath, S., Arora, A., Basart, S., Tang, E., Song, D., and Steinhardt, J. Measuring mathematical problem solving with the MATH dataset. In Vanschoren, J. and Yeung, S. (eds.), *Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks 1, NeurIPS Datasets and Benchmarks 2021, December 2021, virtual*, 2021. URL [https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/be83ab3ecd0db773eb2dc1b0a17836a1-Abstract-round2.html) [be83ab3ecd0db773eb2dc1b0a17836a1-Abstract-round2.html](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/be83ab3ecd0db773eb2dc1b0a17836a1-Abstract-round2.html).\\n- <span id=\"page-14-12\"></span>Hinton, G. E., Vinyals, O., and Dean, J. Distilling the knowledge in a neural network. *CoRR*, abs/1503.02531, 2015. URL <http://arxiv.org/abs/1503.02531>.\\n- <span id=\"page-14-2\"></span>Hu, J. REINFORCE++: A simple and efficient approach for aligning large language models. *CoRR*, abs/2501.03262, 2025. doi: 10.48550/ARXIV.2501.03262. URL <https://doi.org/10.48550/arXiv.2501.03262>.\\n- <span id=\"page-14-8\"></span>Hu, J., Zhang, Y., Han, Q., Jiang, D., Zhang, X., and Shum, H. Open-reasoner-zero: An open source approach to scaling up reinforcement learning on the base model. *CoRR*, abs/2503.24290, 2025. doi: 10.48550/ARXIV.2503.24290. URL [https:](https://doi.org/10.48550/arXiv.2503.24290) [//doi.org/10.48550/arXiv.2503.24290](https://doi.org/10.48550/arXiv.2503.24290).\\n- <span id=\"page-14-13\"></span>Hubinger, E., van Merwijk, C., Mikulik, V., Skalse, J., and Garrabrant, S. Risks from learned optimization in advanced machine learning systems. *CoRR*, abs/1906.01820, 2019. URL <http://arxiv.org/abs/1906.01820>.\\n- <span id=\"page-14-1\"></span>Hughes, E., Dennis, M. D., Parker-Holder, J., Behbahani, F. M. P., Mavalankar, A., Shi, Y., Schaul, T., and Rockt\u00e4schel, T. Position: Open-endedness is essential for artificial superhuman intelligence. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=Bc4vZ2CX7E>.\\n- <span id=\"page-14-3\"></span>Hui, B., Yang, J., Cui, Z., Yang, J., Liu, D., Zhang, L., Liu, T., Zhang, J., Yu, B., Dang, K., Yang, A., Men, R., Huang, F., Ren, X., Ren, X., Zhou, J., and Lin, J. Qwen2.5-coder technical report. *CoRR*, abs/2409.12186, 2024. doi: 10.48550/ARXIV.2409.12186. URL <https://doi.org/10.48550/arXiv.2409.12186>.\\n- <span id=\"page-14-0\"></span>Jaech, A., Kalai, A., Lerer, A., Richardson, A., El-Kishky, A., Low, A., Helyar, A., Madry, A., Beutel, A., Carney, A., et al. Openai o1 system card. *arXiv preprint arXiv:2412.16720*, 2024.\\n- <span id=\"page-14-4\"></span>Jain, N., Han, K., Gu, A., Li, W., Yan, F., Zhang, T., Wang, S., Solar-Lezama, A., Sen, K., and Stoica, I. Livecodebench: Holistic and contamination free evaluation of large language models for code. *CoRR*, abs/2403.07974, 2024. doi: 10.48550/ARXIV.2403.07974. URL <https://doi.org/10.48550/arXiv.2403.07974>.\\n- <span id=\"page-14-11\"></span>Kirchner, J. H., Chen, Y., Edwards, H., Leike, J., McAleese, N., and Burda, Y. Prover-verifier games improve legibility of LLM outputs. *CoRR*, abs/2407.13692, 2024. doi: 10.48550/ARXIV.2407.13692. URL <https://doi.org/10.48550/arXiv.2407.13692>.\\n- <span id=\"page-14-14\"></span>Ladosz, P., Weng, L., Kim, M., and Oh, H. Exploration in deep reinforcement learning: A survey. *Inf. Fusion*, 85:1\u201322, 2022. doi: 10.1016/J.INFFUS.2022.03.003. URL <https://doi.org/10.1016/j.inffus.2022.03.003>.\\n- <span id=\"page-15-0\"></span>Lambert, N., Morrison, J., Pyatkin, V., Huang, S., Ivison, H., Brahman, F., Miranda, L. J. V., Liu, A., Dziri, N., Lyu, S., Gu, Y., Malik, S., Graf, V., Hwang, J. D., Yang, J., Bras, R. L., Tafjord, O., Wilhelm, C., Soldaini, L., Smith, N. A., Wang, Y., Dasigi, P., and Hajishirzi, H. T\u00fclu 3: Pushing frontiers in open language model post-training. *CoRR*, abs/2411.15124, 2024. doi: 10.48550/ARXIV.2411.15124. URL <https://doi.org/10.48550/arXiv.2411.15124>.\\n- <span id=\"page-15-13\"></span>Laskin, M., Yarats, D., Liu, H., Lee, K., Zhan, A., Lu, K., Cang, C., Pinto, L., and Abbeel, P. URLB: unsupervised reinforcement learning benchmark. In Vanschoren, J. and Yeung, S. (eds.), *Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks 1, NeurIPS Datasets and Benchmarks 2021, December 2021, virtual*, 2021. URL [https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/091d584fced301b442654dd8c23b3fc9-Abstract-round2.html) [091d584fced301b442654dd8c23b3fc9-Abstract-round2.html](https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/091d584fced301b442654dd8c23b3fc9-Abstract-round2.html).\\n- <span id=\"page-15-15\"></span>Leike, J. and Sutskever, I. Introducing superalignment. <https://openai.com/index/introducing-superalignment/>, 2023. OpenAI Blog.\\n- <span id=\"page-15-8\"></span>Li, J., Guo, D., Yang, D., Xu, R., Wu, Y., and He, J. Codei/o: Condensing reasoning patterns via code input-output prediction. *CoRR*, abs/2502.07316, 2025. doi: 10.48550/ARXIV.2502.07316. URL <https://doi.org/10.48550/arXiv.2502.07316>.\\n- <span id=\"page-15-17\"></span>Li, R., Fu, J., Zhang, B., Huang, T., Sun, Z., Lyu, C., Liu, G., Jin, Z., and Li, G. TACO: topics in algorithmic code generation dataset. *CoRR*, abs/2312.14852, 2023. doi: 10.48550/ARXIV.2312.14852. URL <https://doi.org/10.48550/arXiv.2312.14852>.\\n- <span id=\"page-15-9\"></span>Liu, J. and Zhang, L. Code-r1: Reproducing r1 for code with reliable rewards. *GitHub*, 2025.\\n- <span id=\"page-15-7\"></span>Liu, J., Xia, C. S., Wang, Y., and Zhang, L. Is your code generated by chatGPT really correct? rigorous evaluation of large language models for code generation. In *Thirty-seventh Conference on Neural Information Processing Systems*, 2023. URL <https://openreview.net/forum?id=1qvx610Cu7>.\\n- <span id=\"page-15-10\"></span>Liu, Z., Chen, C., Li, W., Qi, P., Pang, T., Du, C., Lee, W. S., and Lin, M. Understanding r1-zero-like training: A critical perspective. *CoRR*, abs/2503.20783, 2025. doi: 10.48550/ARXIV.2503.20783. URL <https://doi.org/10.48550/arXiv.2503.20783>.\\n- <span id=\"page-15-18\"></span>Lopez, R. H. Q. Complexipy: An extremely fast python library to calculate the cognitive complexity of python files, written in rust, 2025. URL <https://github.com/rohaquinlop/complexipy>. Accessed: 2025-04-06.\\n- <span id=\"page-15-6\"></span>Loshchilov, I. and Hutter, F. Decoupled weight decay regularization. In *7th International Conference on Learning Representations, ICLR 2019, New Orleans, LA, USA, May 6-9, 2019*. OpenReview.net, 2019. URL <https://openreview.net/forum?id=Bkg6RiCqY7>.\\n- <span id=\"page-15-16\"></span>Morris, J. There are no new ideas in ai. . . only new datasets. <https://blog.jxmo.io/p/there-are-no-new-ideas-in-ai-only>, 2025.\\n- <span id=\"page-15-2\"></span>OpenAI. Openai o3-mini, January 2025a. URL <https://openai.com/index/openai-o3-mini/>. Accessed: 2025-04-17.\\n- <span id=\"page-15-1\"></span>OpenAI. Introducing openai o3 and o4-mini, April 2025b. URL <https://openai.com/index/introducing-o3-and-o4-mini/>. Accessed: 2025-04-17.\\n- <span id=\"page-15-12\"></span>OpenAI, Plappert, M., Sampedro, R., Xu, T., Akkaya, I., Kosaraju, V., Welinder, P., D\\'Sa, R., Petron, A., de Oliveira Pinto, H. P., Paino, A., Noh, H., Weng, L., Yuan, Q., Chu, C., and Zaremba, W. Asymmetric self-play for automatic goal discovery in robotic manipulation. *CoRR*, abs/2101.04882, 2021. URL <https://arxiv.org/abs/2101.04882>.\\n- <span id=\"page-15-4\"></span>Ouyang, L., Wu, J., Jiang, X., Almeida, D., Wainwright, C., Mishkin, P., Zhang, C., Agarwal, S., Slama, K., Ray, A., et al. Training language models to follow instructions with human feedback. *Advances in neural information processing systems*, 35:27730\u201327744, 2022.\\n- <span id=\"page-15-14\"></span>Poesia, G., Broman, D., Haber, N., and Goodman, N. D. Learning formal mathematics from intrinsic motivation. In Globersons, A., Mackey, L., Belgrave, D., Fan, A., Paquet, U., Tomczak, J. M., and Zhang, C. (eds.), *Advances in Neural Information Processing Systems 38: Annual Conference on Neural Information Processing Systems 2024, NeurIPS 2024, Vancouver, BC, Canada, December 10 - 15, 2024*, 2024. URL [http://papers.nips.cc/paper\\\\\\\\_files/paper/2024/hash/](http://papers.nips.cc/paper_files/paper/2024/hash/4b8001fc75f0532827472ea5a16af9ca-Abstract-Conference.html) [4b8001fc75f0532827472ea5a16af9ca-Abstract-Conference.html](http://papers.nips.cc/paper_files/paper/2024/hash/4b8001fc75f0532827472ea5a16af9ca-Abstract-Conference.html).\\n- <span id=\"page-15-5\"></span>Radford, A., Wu, J., Child, R., Luan, D., Amodei, D., Sutskever, I., et al. Language models are unsupervised multitask learners. *OpenAI blog*, 1(8):9, 2019.\\n- <span id=\"page-15-3\"></span>Ren, Z. Z., Shao, Z., Song, J., Xin, H., Wang, H., Zhao, W., Zhang, L., Fu, Z., Zhu, Q., Yang, D., Wu, Z. F., Gou, Z., Ma, S., Tang, H., Liu, Y., Gao, W., Guo, D., and Ruan, C. Deepseek-prover-v2: Advancing formal mathematical reasoning via reinforcement learning for subgoal decomposition, 2025. URL <https://arxiv.org/abs/2504.21801>.\\n- <span id=\"page-15-11\"></span>Schaul, T. Boundless socratic learning with language games. *arXiv preprint arXiv:2411.16905*, 2024.\\n- <span id=\"page-16-9\"></span>Schmidhuber, J. Exploring the predictable. In *Advances in evolutionary computing: theory and applications*, pp. 579\u2013612. Springer, 2003.\\n- <span id=\"page-16-10\"></span>Schmidhuber, J. POWERPLAY: training an increasingly general problem solver by continually searching for the simplest still unsolvable problem. *CoRR*, abs/1112.5309, 2011. URL <http://arxiv.org/abs/1112.5309>.\\n- <span id=\"page-16-7\"></span>Shao, Z., Wang, P., Zhu, Q., Xu, R., Song, J., Zhang, M., Li, Y. K., Wu, Y., and Guo, D. Deepseekmath: Pushing the limits of mathematical reasoning in open language models. *CoRR*, abs/2402.03300, 2024. doi: 10.48550/ARXIV.2402.03300. URL <https://doi.org/10.48550/arXiv.2402.03300>.\\n- <span id=\"page-16-16\"></span>Sheng, G., Zhang, C., Ye, Z., Wu, X., Zhang, W., Zhang, R., Peng, Y., Lin, H., and Wu, C. Hybridflow: A flexible and efficient RLHF framework. In *Proceedings of the Twentieth European Conference on Computer Systems, EuroSys 2025, Rotterdam, The Netherlands, 30 March 2025 - 3 April 2025*, pp. 1279\u20131297. ACM, 2025. doi: 10.1145/3689031.3696075. URL [https:](https://doi.org/10.1145/3689031.3696075) [//doi.org/10.1145/3689031.3696075](https://doi.org/10.1145/3689031.3696075).\\n- <span id=\"page-16-15\"></span>Silver, D. and Sutton, R. S. The era of experience. [https://storage.googleapis.com/deepmind-media/Era-of-Experience%](https://storage.googleapis.com/deepmind-media/Era-of-Experience%20/The%20Era%20of%20Experience%20Paper.pdf) [20/The%20Era%20of%20Experience%20Paper.pdf](https://storage.googleapis.com/deepmind-media/Era-of-Experience%20/The%20Era%20of%20Experience%20Paper.pdf), 2025.\\n- <span id=\"page-16-11\"></span>Silver, D., Huang, A., Maddison, C. J., Guez, A., Sifre, L., van den Driessche, G., Schrittwieser, J., Antonoglou, I., Panneershelvam, V., Lanctot, M., Dieleman, S., Grewe, D., Nham, J., Kalchbrenner, N., Sutskever, I., Lillicrap, T. P., Leach, M., Kavukcuoglu, K., Graepel, T., and Hassabis, D. Mastering the game of go with deep neural networks and tree search. *Nat.*, 529(7587):484\u2013489, 2016. doi: 10.1038/NATURE16961. URL <https://doi.org/10.1038/nature16961>.\\n- <span id=\"page-16-3\"></span>Silver, D., Hubert, T., Schrittwieser, J., Antonoglou, I., Lai, M., Guez, A., Lanctot, M., Sifre, L., Kumaran, D., Graepel, T., Lillicrap, T. P., Simonyan, K., and Hassabis, D. Mastering chess and shogi by self-play with a general reinforcement learning algorithm. *CoRR*, abs/1712.01815, 2017. URL <http://arxiv.org/abs/1712.01815>.\\n- <span id=\"page-16-4\"></span>Stuart, T. *Understanding computation - from simple machines to impossible programs*. O\\'Reilly, 2015. ISBN 978-1-449-32927-3. URL <http://www.oreilly.de/catalog/9781449329273/index.html>.\\n- <span id=\"page-16-5\"></span>Sukhbaatar, S., Lin, Z., Kostrikov, I., Synnaeve, G., Szlam, A., and Fergus, R. Intrinsic motivation and automatic curricula via asymmetric self-play. In *6th International Conference on Learning Representations, ICLR 2018, Vancouver, BC, Canada, April 30 - May 3, 2018, Conference Track Proceedings*. OpenReview.net, 2018. URL <https://openreview.net/forum?id=SkT5Yg-RZ>.\\n- <span id=\"page-16-8\"></span>Suteu, M. and Guo, Y. Regularizing deep multi-task networks using orthogonal gradients. *CoRR*, abs/1912.06844, 2019. URL <http://arxiv.org/abs/1912.06844>.\\n- <span id=\"page-16-2\"></span>Sutskever, I., Vinyals, O., and Le, Q. V. Neurips 2024 test of time award session: Sequence to sequence learning with neural networks. Conference session, December 2024. URL <https://neurips.cc/virtual/2024/test-of-time/105032>.\\n- <span id=\"page-16-13\"></span>Sutton, R. S. Verification, the key to ai. <http://incompleteideas.net/IncIdeas/KeytoAI.html>, 2001.\\n- <span id=\"page-16-0\"></span>Team, K., Du, A., Gao, B., Xing, B., Jiang, C., Chen, C., Li, C., Xiao, C., Du, C., Liao, C., Tang, C., Wang, C., Zhang, D., Yuan, E., Lu, E., Tang, F., Sung, F., Wei, G., Lai, G., Guo, H., Zhu, H., Ding, H., Hu, H., Yang, H., Zhang, H., Yao, H., Zhao, H., Lu, H., Li, H., Yu, H., Gao, H., Zheng, H., Yuan, H., Chen, J., Guo, J., Su, J., Wang, J., Zhao, J., Zhang, J., Liu, J., Yan, J., Wu, J., Shi, L., Ye, L., Yu, L., Dong, M., Zhang, N., Ma, N., Pan, Q., Gong, Q., Liu, S., Ma, S., Wei, S., Cao, S., Huang, S., Jiang, T., Gao, W., Xiong, W., He, W., Huang, W., Wu, W., He, W., Wei, X., Jia, X., Wu, X., Xu, X., Zu, X., Zhou, X., Pan, X., Charles, Y., Li, Y., Hu, Y., Liu, Y., Chen, Y., Wang, Y., Liu, Y., Qin, Y., Liu, Y., Yang, Y., Bao, Y., Du, Y., Wu, Y., Wang, Y., Zhou, Z., Wang, Z., Li, Z., Zhu, Z., Zhang, Z., Wang, Z., Yang, Z., Huang, Z., Huang, Z., Xu, Z., and Yang, Z. Kimi k1.5: Scaling reinforcement learning with llms. *CoRR*, abs/2501.12599, 2025. doi: 10.48550/ARXIV.2501.12599. URL <https://doi.org/10.48550/arXiv.2501.12599>.\\n- <span id=\"page-16-1\"></span>Villalobos, P., Ho, A., Sevilla, J., Besiroglu, T., Heim, L., and Hobbhahn, M. Position: Will we run out of data? limits of LLM scaling based on human-generated data. In *Forty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024*. OpenReview.net, 2024. URL <https://openreview.net/forum?id=ViZcgDQjyG>.\\n- <span id=\"page-16-14\"></span>Wang, H., Yue, Y., Lu, R., Shi, J., Zhao, A., Wang, S., Song, S., and Huang, G. Model surgery: Modulating LLM\\'s behavior via simple parameter editing. In *Proceedings of the 2025 Conference of the Nations of the Americas Chapter of the Association for Computational Linguistics*, pp. 6337\u20136357, 2025a.\\n- <span id=\"page-16-12\"></span>Wang, R., Lehman, J., Clune, J., and Stanley, K. O. Paired open-ended trailblazer (POET): endlessly generating increasingly complex and diverse learning environments and their solutions. *CoRR*, abs/1901.01753, 2019. URL <http://arxiv.org/abs/1901.01753>.\\n- <span id=\"page-16-6\"></span>Wang, S., Yang, Q., Gao, J., Lin, M. G., Chen, H., Wu, L., Jia, N., Song, S., and Huang, G. Train once, get a family: State-adaptive balances for offline-to-online reinforcement learning. In *Thirty-seventh Conference on Neural Information Processing Systems*, 2023. URL <https://openreview.net/forum?id=vtoY8qJjTR>.\\n- <span id=\"page-17-15\"></span>Wang, S., Liu, C., Zheng, Z., Qi, S., Chen, S., Yang, Q., Zhao, A., Wang, C., Song, S., and Huang, G. Boosting LLM agents with recursive contemplation for effective deception handling. In Ku, L.-W., Martins, A., and Srikumar, V. (eds.), *Findings of the Association for Computational Linguistics: ACL 2024*, pp. 9909\u20139953, Bangkok, Thailand, August 2024. Association for Computational Linguistics. doi: 10.18653/v1/2024.findings-acl.591. URL <https://aclanthology.org/2024.findings-acl.591/>.\\n- <span id=\"page-17-8\"></span>Wang, Y., Yang, Q., Zeng, Z., Ren, L., Liu, L., Peng, B., Cheng, H., He, X., Wang, K., Gao, J., Chen, W., Wang, S., Du, S. S., and Shen, Y. Reinforcement learning for reasoning in large language models with one training example, 2025b. URL <https://arxiv.org/abs/2504.20571>.\\n- <span id=\"page-17-14\"></span>Wu, Q., Bansal, G., Zhang, J., Wu, Y., Zhang, S., Zhu, E., Li, B., Jiang, L., Zhang, X., and Wang, C. Autogen: Enabling next-gen LLM applications via multi-agent conversation framework. *CoRR*, abs/2308.08155, 2023. doi: 10.48550/ARXIV.2308.08155. URL <https://doi.org/10.48550/arXiv.2308.08155>.\\n- <span id=\"page-17-13\"></span>Wu, Y., Yue, T., Zhang, S., Wang, C., and Wu, Q. Stateflow: Enhancing LLM task-solving through state-driven workflows. *CoRR*, abs/2403.11322, 2024. doi: 10.48550/ARXIV.2403.11322. URL <https://doi.org/10.48550/arXiv.2403.11322>.\\n- <span id=\"page-17-7\"></span>Xie, T., Gao, Z., Ren, Q., Luo, H., Hong, Y., Dai, B., Zhou, J., Qiu, K., Wu, Z., and Luo, C. Logic-rl: Unleashing LLM reasoning with rule-based reinforcement learning. *CoRR*, abs/2502.14768, 2025. doi: 10.48550/ARXIV.2502.14768. URL <https://doi.org/10.48550/arXiv.2502.14768>.\\n- <span id=\"page-17-11\"></span>Xu, F., Yan, H., Ma, C., Zhao, H., Sun, Q., Cheng, K., He, J., Liu, J., and Wu, Z. Genius: A generalizable and purely unsupervised self-training framework for advanced reasoning, 2025. URL <https://arxiv.org/abs/2504.08672>.\\n- <span id=\"page-17-3\"></span>Yang, A., Yang, B., Zhang, B., Hui, B., Zheng, B., Yu, B., Li, C., Liu, D., Huang, F., Wei, H., Lin, H., Yang, J., Tu, J., Zhang, J., Yang, J., Yang, J., Zhou, J., Lin, J., Dang, K., Lu, K., Bao, K., Yang, K., Yu, L., Li, M., Xue, M., Zhang, P., Zhu, Q., Men, R., Lin, R., Li, T., Xia, T., Ren, X., Ren, X., Fan, Y., Su, Y., Zhang, Y., Wan, Y., Liu, Y., Cui, Z., Zhang, Z., and Qiu, Z. Qwen2.5 technical report. *CoRR*, abs/2412.15115, 2024a. doi: 10.48550/ARXIV.2412.15115. URL <https://doi.org/10.48550/arXiv.2412.15115>.\\n- <span id=\"page-17-4\"></span>Yang, A., Zhang, B., Hui, B., Gao, B., Yu, B., Li, C., Liu, D., Tu, J., Zhou, J., Lin, J., Lu, K., Xue, M., Lin, R., Liu, T., Ren, X., and Zhang, Z. Qwen2.5-math technical report: Toward mathematical expert model via self-improvement. *CoRR*, abs/2409.12122, 2024b. doi: 10.48550/ARXIV.2409.12122. URL <https://doi.org/10.48550/arXiv.2409.12122>.\\n- <span id=\"page-17-1\"></span>Yao, S., Zhao, J., Yu, D., Du, N., Shafran, I., Narasimhan, K. R., and Cao, Y. React: Synergizing reasoning and acting in language models. In *The Eleventh International Conference on Learning Representations, ICLR 2023, Kigali, Rwanda, May 1-5, 2023*. OpenReview.net, 2023. URL [https://openreview.net/forum?id=WE\\\\\\\\_vluYUL-X](https://openreview.net/forum?id=WE_vluYUL-X).\\n- <span id=\"page-17-10\"></span>Ye, Z., Agarwal, R., Liu, T., Joshi, R., Velury, S., Le, Q. V., Tan, Q., and Liu, Y. Evolving alignment via asymmetric self-play. *CoRR*, abs/2411.00062, 2024. doi: 10.48550/ARXIV.2411.00062. URL <https://doi.org/10.48550/arXiv.2411.00062>.\\n- <span id=\"page-17-5\"></span>Yu, Q., Zhang, Z., Zhu, R., Yuan, Y., Zuo, X., Yue, Y., Fan, T., Liu, G., Liu, L., Liu, X., Lin, H., Lin, Z., Ma, B., Sheng, G., Tong, Y., Zhang, C., Zhang, M., Zhang, W., Zhu, H., Zhu, J., Chen, J., Chen, J., Wang, C., Yu, H., Dai, W., Song, Y., Wei, X., Zhou, H., Liu, J., Ma, W., Zhang, Y., Yan, L., Qiao, M., Wu, Y., and Wang, M. DAPO: an open-source LLM reinforcement learning system at scale. *CoRR*, abs/2503.14476, 2025. doi: 10.48550/ARXIV.2503.14476. URL <https://doi.org/10.48550/arXiv.2503.14476>.\\n- <span id=\"page-17-9\"></span>Yuan, W., Pang, R. Y., Cho, K., Li, X., Sukhbaatar, S., Xu, J., and Weston, J. Self-rewarding language models. *URL https://arxiv. org/abs/2401.10020*, 2024.\\n- <span id=\"page-17-6\"></span>Yuan, Y., Yu, Q., Zuo, X., Zhu, R., Xu, W., Chen, J., Wang, C., Fan, T., Du, Z., Wei, X., et al. Vapo: Efficient and reliable reinforcement learning for advanced reasoning tasks. *arXiv preprint arXiv:2504.05118*, 2025.\\n- <span id=\"page-17-2\"></span>Yue, Y., Lu, R., Kang, B., Song, S., and Huang, G. Understanding, predicting and better resolving q-value divergence in offline-rl. *Advances in Neural Information Processing Systems*, 36:60247\u201360277, 2023.\\n- <span id=\"page-17-12\"></span>Yue, Y., Wang, Y., Kang, B., Han, Y., Wang, S., Song, S., Feng, J., and Huang, G. Deer-vla: Dynamic inference of multimodal large language models for efficient robot execution. In Globersons, A., Mackey, L., Belgrave, D., Fan, A., Paquet, U., Tomczak, J. M., and Zhang, C. (eds.), *Advances in Neural Information Processing Systems 38: Annual Conference on Neural Information Processing Systems 2024, NeurIPS 2024, Vancouver, BC, Canada, December 10 - 15, 2024*, 2024. URL [http://papers.nips.cc/paper\\\\\\\\_](http://papers.nips.cc/paper_files/paper/2024/hash/67b0e7c7c2a5780aeefe3b79caac106e-Abstract-Conference.html) [files/paper/2024/hash/67b0e7c7c2a5780aeefe3b79caac106e-Abstract-Conference.html](http://papers.nips.cc/paper_files/paper/2024/hash/67b0e7c7c2a5780aeefe3b79caac106e-Abstract-Conference.html).\\n- <span id=\"page-17-0\"></span>Yue, Y., Chen, Z., Lu, R., Zhao, A., Wang, Z., Yue, Y., Song, S., and Huang, G. Does reinforcement learning really incentivize reasoning capacity in llms beyond the base model?, 2025. URL <https://arxiv.org/abs/2504.13837>.\\n- <span id=\"page-17-16\"></span>Zelikman, E., Wu, Y., Mu, J., and Goodman, N. Star: Bootstrapping reasoning with reasoning. *Advances in Neural Information Processing Systems*, 35:15476\u201315488, 2022.\\n- <span id=\"page-18-5\"></span>Zeng, H., Jiang, D., Wang, H., Nie, P., Chen, X., and Chen, W. ACECODER: acing coder RL via automated test-case synthesis. *CoRR*, abs/2502.01718, 2025a. doi: 10.48550/ARXIV.2502.01718. URL <https://doi.org/10.48550/arXiv.2502.01718>.\\n- <span id=\"page-18-1\"></span>Zeng, W., Huang, Y., Liu, Q., Liu, W., He, K., Ma, Z., and He, J. Simplerl-zoo: Investigating and taming zero reinforcement learning for open base models in the wild. *CoRR*, abs/2503.18892, 2025b. doi: 10.48550/ARXIV.2503.18892. URL [https:](https://doi.org/10.48550/arXiv.2503.18892) [//doi.org/10.48550/arXiv.2503.18892](https://doi.org/10.48550/arXiv.2503.18892).\\n- <span id=\"page-18-0\"></span>Zhang, C., Deng, Y., Lin, X., Wang, B., Ng, D., Ye, H., Li, X., Xiao, Y., Mo, Z., Zhang, Q., et al. 100 days after deepseek-r1: A survey on replication studies and more directions for reasoning language models. *arXiv preprint arXiv:2505.00551*, 2025a.\\n- <span id=\"page-18-7\"></span>Zhang, Q., Wu, H., Zhang, C., Zhao, P., and Bian, Y. Right question is already half the answer: Fully unsupervised llm reasoning incentivization, 2025b. URL <https://arxiv.org/abs/2504.05812>.\\n- <span id=\"page-18-3\"></span>Zhang, Y. and Yang, Q. A survey on multi-task learning. *IEEE transactions on knowledge and data engineering*, 34(12):5586\u20135609, 2021.\\n- <span id=\"page-18-4\"></span>Zhao, A., Lin, M. G., Li, Y., Liu, Y., and Huang, G. A mixture of surprises for unsupervised reinforcement learning. In Koyejo, S., Mohamed, S., Agarwal, A., Belgrave, D., Cho, K., and Oh, A. (eds.), *Advances in Neural Information Processing Systems 35: Annual Conference on Neural Information Processing Systems 2022, NeurIPS 2022, New Orleans, LA, USA, November 28 - December 9, 2022*, 2022. URL [http://papers.nips.cc/paper\\\\\\\\_files/paper/2022/hash/](http://papers.nips.cc/paper_files/paper/2022/hash/a7667ee5d545a43d2f0fda98863c260e-Abstract-Conference.html) [a7667ee5d545a43d2f0fda98863c260e-Abstract-Conference.html](http://papers.nips.cc/paper_files/paper/2022/hash/a7667ee5d545a43d2f0fda98863c260e-Abstract-Conference.html).\\n- <span id=\"page-18-10\"></span>Zhao, A., Huang, D., Xu, Q., Lin, M., Liu, Y., and Huang, G. Expel: LLM agents are experiential learners. In Wooldridge, M. J., Dy, J. G., and Natarajan, S. (eds.), *Thirty-Eighth AAAI Conference on Artificial Intelligence, AAAI 2024, Thirty-Sixth Conference on Innovative Applications of Artificial Intelligence, IAAI 2024, Fourteenth Symposium on Educational Advances in Artificial Intelligence, EAAI 2014, February 20-27, 2024, Vancouver, Canada*, pp. 19632\u201319642. AAAI Press, 2024. doi: 10.1609/AAAI.V38I17.29936. URL <https://doi.org/10.1609/aaai.v38i17.29936>.\\n- <span id=\"page-18-2\"></span>Zhao, A., Xu, Q., Lin, M., Wang, S., Liu, Y., Zheng, Z., and Huang, G. Diver-ct: Diversity-enhanced red teaming large language model assistants with relaxing constraints. In Walsh, T., Shah, J., and Kolter, Z. (eds.), *AAAI-25, Sponsored by the Association for the Advancement of Artificial Intelligence, February 25 - March 4, 2025, Philadelphia, PA, USA*, pp. 26021\u201326030. AAAI Press, 2025a. doi: 10.1609/AAAI.V39I24.34797. URL <https://doi.org/10.1609/aaai.v39i24.34797>.\\n- <span id=\"page-18-6\"></span>Zhao, A., Zhu, E., Lu, R., Lin, M., Liu, Y., and Huang, G. Self-referencing agents for unsupervised reinforcement learning. *Neural Networks*, 188:107448, 2025b. doi: 10.1016/J.NEUNET.2025.107448. URL [https://doi.org/10.1016/j.neunet.2025.](https://doi.org/10.1016/j.neunet.2025.107448) [107448](https://doi.org/10.1016/j.neunet.2025.107448).\\n- <span id=\"page-18-9\"></span>Zitkovich, B., Yu, T., Xu, S., Xu, P., Xiao, T., Xia, F., Wu, J., Wohlhart, P., Welker, S., Wahid, A., Vuong, Q., Vanhoucke, V., Tran, H. T., Soricut, R., Singh, A., Singh, J., Sermanet, P., Sanketi, P. R., Salazar, G., Ryoo, M. S., Reymann, K., Rao, K., Pertsch, K., Mordatch, I., Michalewski, H., Lu, Y., Levine, S., Lee, L., Lee, T. E., Leal, I., Kuang, Y., Kalashnikov, D., Julian, R., Joshi, N. J., Irpan, A., Ichter, B., Hsu, J., Herzog, A., Hausman, K., Gopalakrishnan, K., Fu, C., Florence, P., Finn, C., Dubey, K. A., Driess, D., Ding, T., Choromanski, K. M., Chen, X., Chebotar, Y., Carbajal, J., Brown, N., Brohan, A., Arenas, M. G., and Han, K. RT-2: vision-language-action models transfer web knowledge to robotic control. In Tan, J., Toussaint, M., and Darvish, K. (eds.), *Conference on Robot Learning, CoRL 2023, 6-9 November 2023, Atlanta, GA, USA*, volume 229 of *Proceedings of Machine Learning Research*, pp. 2165\u20132183. PMLR, 2023. URL <https://proceedings.mlr.press/v229/zitkovich23a.html>.\\n- <span id=\"page-18-8\"></span>Zuo, Y., Zhang, K., Qu, S., Sheng, L., Zhu, X., Qi, B., Sun, Y., Cui, G., Ding, N., and Zhou, B. Ttrl: Test-time reinforcement learning, 2025. URL <https://arxiv.org/abs/2504.16084>.\\n\\n# **Appendix**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Appendix**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n# **Appendix Contents**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Appendix Contents**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n| A | Reinforcement Learning with Verifiable Rewards.                         |    |  |  |  |  |  |\\n|---|-------------------------------------------------------------------------|----|--|--|--|--|--|\\n| B | Implementation Details                                                  |    |  |  |  |  |  |\\n| C | More Results                                                            | 22 |  |  |  |  |  |\\n|   | C.1<br>Out-of-Distribution Performance Breakdown<br>.                   | 22 |  |  |  |  |  |\\n|   | C.2<br>In-Distribution Results<br>.                                     | 22 |  |  |  |  |  |\\n|   | C.3<br>Interplay Between Propose and Solve Roles<br>.                   | 22 |  |  |  |  |  |\\n|   | C.4<br>Complexity and Diversity Metrics of AZR Proposed Tasks<br>.      | 32 |  |  |  |  |  |\\n|   | C.5<br>Generated Code Complexity Dynamics Between Abd/Ded and Ind.<br>. | 32 |  |  |  |  |  |\\n| D | Alternative Approaches Considered                                       | 49 |  |  |  |  |  |\\n|   | D.1<br>Error Deduction Task<br>.                                        | 49 |  |  |  |  |  |\\n|   | D.2<br>Composite Functions as Curriculum Learning<br>.                  | 49 |  |  |  |  |  |\\n|   | D.3<br>Toying with the Initial<br>.<br>p(z)                             | 49 |  |  |  |  |  |\\n|   | D.4<br>Extra Rewards<br>.                                               | 49 |  |  |  |  |  |\\n|   | D.5<br>Environment Transition<br>.                                      | 50 |  |  |  |  |  |\\n\\nA,Reinforcement Learning with Verifiable Rewards.\\r\\nB,Implementation Details\\r\\nC,More Results,22\\r\\n,C.1 Out-of-Distribution Performance Breakdown .,22\\r\\n,C.2 In-Distribution Results .,22\\r\\n,C.3 Interplay Between Propose and Solve Roles .,22\\r\\n,C.4 Complexity and Diversity Metrics of AZR Proposed Tasks .,32\\r\\n,C.5 Generated Code Complexity Dynamics Between Abd/Ded and Ind. .,32\\r\\nD,Alternative Approaches Considered,49\\r\\n,D.1 Error Deduction Task .,49\\r\\n,D.2 Composite Functions as Curriculum Learning .,49\\r\\n,D.3 Toying with the Initial . p(z),49\\r\\n,D.4 Extra Rewards .,49\\r\\n,D.5 Environment Transition .,50\\r\\n{\\n \"headers\": [\\n \"A\",\\n \"Reinforcement Learning with Verifiable Rewards.\"\\n ],\\n \"rows\": [\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"C.2 In-Distribution Results .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"C.3 Interplay Between Propose and Solve Roles .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"C.4 Complexity and Diversity Metrics of AZR Proposed Tasks .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.1 Error Deduction Task .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.2 Composite Functions as Curriculum Learning .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.3 Toying with the Initial . p(z)\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.4 Extra Rewards .\"\\n },\\n {\\n \"A\": \"\",\\n \"Reinforcement Learning with Verifiable Rewards.\": \"D.5 Environment Transition .\"\\n }\\n ]\\n}# <span id=\"page-20-0\"></span>**A. Reinforcement Learning with Verifiable Rewards.**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-20-0\\\\\"></span>**A. Reinforcement Learning with Verifiable Rewards.**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe use reinforcement learning to update our learner LLM, rewarding it based on a task-specific reward function *r<sup>f</sup>* , where the subscript *f* indicates the task. The goal of the RL agent is to maximize the expected discounted sum of rewards. We adopt an online variant of RL, REINFORCE++, which is optimized using the original PPO objective:\\n\\n$$\\\\mathcal{L}\\\\_{\\\\text{PFO}}(\\\\theta) = \\\\mathbb{E}\\\\_{q \\\\sim P(Q), \\\\ o \\\\sim \\\\pi\\\\_{\\\\theta\\\\_{\\\\text{old}}}(O|q)} \\\\left[ \\\\frac{1}{|o|} \\\\sum\\\\_{t=1}^{|o|} \\\\min \\\\left( s\\\\_t(\\\\theta) A\\\\_{f,q}^{\\\\text{norm}}, \\\\ \\\\text{clip} \\\\left( s\\\\_t(\\\\theta), 1 - \\\\epsilon, 1 + \\\\epsilon \\\\right) A\\\\_{f,q}^{\\\\text{norm}} \\\\right) \\\\right],\\\\tag{9}$$\\n\\nwhere *st*(*\u03b8*) is the probability ratio between the new and old policies at timestep *t*, and *A* norm *f,q* is the normalized advantage.\\n\\nREINFORCE++ computes the normalized advantage as:\\n\\n$$A\\\\_{f,q}^{\\\\text{norm}} = \\\\frac{r\\\\_{f,q} - \\\\text{mean}(\\\\{A\\\\_{f,q}\\\\}^B)}{\\\\text{std}(\\\\{A\\\\_{f,q}\\\\}^B)},\\\\tag{10}$$\\n\\nwhere *rf,q* is the outcome reward for question *q*, task *f*, mean and std are calculated across the global batch with batch size *B*. Note that we do not apply any KL penalty to the loss or reward.\\n\\n# <span id=\"page-20-2\"></span>**B. Implementation Details**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-20-2\\\\\"></span>**B. Implementation Details**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe built Absolute Zero Reasoner upon the [veRL codebase](https://github.com/volcengine/verl) [\\\\(Sheng et al.,](#page-16-16) [2025\\\\)](#page-16-16). For code execution, we incorporated components from the [QwQ Python executor.](https://github.com/QwenLM/QwQ/blob/main/eval/eval/math_opensource_utils/python_executor.py) For safer code execution, we recommend using API-based services such as [E2B](https://e2b.dev/) instead.\\n\\nAll experiments were conducted on clusters of A800 GPUs.\\n\\n**Training Hyperparameters.** We show the hyperparameters used in our training in Table [3.](#page-20-1) We do not change them for any of the runs.\\n\\n| Parameter                              | Value                    |  |  |  |  |  |\\n|----------------------------------------|--------------------------|--|--|--|--|--|\\n| Model Configuration                    |                          |  |  |  |  |  |\\n| Max Prompt Length                      | 6144                     |  |  |  |  |  |\\n| Max Response Length                    | 8096                     |  |  |  |  |  |\\n| Seed Batch Factor                      | 4                        |  |  |  |  |  |\\n| Max Programs                           | 16384                    |  |  |  |  |  |\\n| Training Settings                      |                          |  |  |  |  |  |\\n| Train Batch Size                       | 64 * 6                   |  |  |  |  |  |\\n| Learning Rate                          | 1e-6                     |  |  |  |  |  |\\n| Optimizer                              | AdamW                    |  |  |  |  |  |\\n| Grad Clip                              | 1.0                      |  |  |  |  |  |\\n| Total Steps                            | 500                      |  |  |  |  |  |\\n| RL Settings                            |                          |  |  |  |  |  |\\n| Algorithm                              | TRR++ (Section<br>3.3.5) |  |  |  |  |  |\\n| KL Loss                                | False                    |  |  |  |  |  |\\n| KL Reward                              | False                    |  |  |  |  |  |\\n| Entropy Coefficient                    | 0.001                    |  |  |  |  |  |\\n| PPO Epochs                             | 1                        |  |  |  |  |  |\\n| Rollouts<br>N                          | 1                        |  |  |  |  |  |\\n| Rollout Temperature                    | 1.0                      |  |  |  |  |  |\\n| Rollout Top-P                          | 1.0                      |  |  |  |  |  |\\n| References<br>K                        | 6                        |  |  |  |  |  |\\n| Samples to Estimate Task Accuracy<br>N | 8                        |  |  |  |  |  |\\n\\nParameter,Value\\r\\nModel Configuration\\r\\nMax Prompt Length,6144\\r\\nMax Response Length,8096\\r\\nSeed Batch Factor,4\\r\\nMax Programs,16384\\r\\nTraining Settings\\r\\nTrain Batch Size,64 \\\\* 6\\r\\nLearning Rate,1e-6\\r\\nOptimizer,AdamW\\r\\nGrad Clip,1.0\\r\\nTotal Steps,500\\r\\nRL Settings\\r\\nAlgorithm,TRR++ (Section 3.3.5)\\r\\nKL Loss,False\\r\\nKL Reward,False\\r\\nEntropy Coefficient,0.001\\r\\nPPO Epochs,1\\r\\nRollouts N,1\\r\\nRollout Temperature,1.0\\r\\nRollout Top-P,1.0\\r\\nReferences K,6\\r\\nSamples to Estimate Task Accuracy N,8\\r\\n{\\n \"headers\": [\\n \"Parameter\",\\n \"Value\"\\n ],\\n \"rows\": [\\n {\\n \"Parameter\": \"Model Configuration\"\\n },\\n {\\n \"Parameter\": \"Max Prompt Length\",\\n \"Value\": \"6144\"\\n },\\n {\\n \"Parameter\": \"Max Response Length\",\\n \"Value\": \"8096\"\\n },\\n {\\n \"Parameter\": \"Seed Batch Factor\",\\n \"Value\": \"4\"\\n },\\n {\\n \"Parameter\": \"Max Programs\",\\n \"Value\": \"16384\"\\n },\\n {\\n \"Parameter\": \"Training Settings\"\\n },\\n {\\n \"Parameter\": \"Train Batch Size\",\\n \"Value\": \"64 \\\\* 6\"\\n },\\n {\\n \"Parameter\": \"Learning Rate\",\\n \"Value\": \"1e-6\"\\n },\\n {\\n \"Parameter\": \"Optimizer\",\\n \"Value\": \"AdamW\"\\n },\\n {\\n \"Parameter\": \"Grad Clip\",\\n \"Value\": \"1.0\"\\n },\\n {\\n \"Parameter\": \"Total Steps\",\\n \"Value\": \"500\"\\n },\\n {\\n \"Parameter\": \"RL Settings\"\\n },\\n {\\n \"Parameter\": \"Algorithm\",\\n \"Value\": \"TRR++ (Section 3.3.5)\"\\n },\\n {\\n \"Parameter\": \"KL Loss\",\\n \"Value\": \"False\"\\n },\\n {\\n \"Parameter\": \"KL Reward\",\\n \"Value\": \"False\"\\n },\\n {\\n \"Parameter\": \"Entropy Coefficient\",\\n \"Value\": \"0.001\"\\n },\\n {\\n \"Parameter\": \"PPO Epochs\",\\n \"Value\": \"1\"\\n },\\n {\\n \"Parameter\": \"Rollouts N\",\\n \"Value\": \"1\"\\n },\\n {\\n \"Parameter\": \"Rollout Temperature\",\\n \"Value\": \"1.0\"\\n },\\n {\\n \"Parameter\": \"Rollout Top-P\",\\n \"Value\": \"1.0\"\\n },\\n {\\n \"Parameter\": \"References K\",\\n \"Value\": \"6\"\\n },\\n {\\n \"Parameter\": \"Samples to Estimate Task Accuracy N\",\\n \"Value\": \"8\"\\n }\\n ]\\n}<span id=\"page-20-1\"></span>*Table 3.* **Hyperparameters Used During AZR Self-play Training.**\\n\\n| Absolute Zero: Reinforced Self-play Reasoning with Zero Data |  |  |  |  |  |  |\\n|--------------------------------------------------------------|--|--|--|--|--|--|\\n|--------------------------------------------------------------|--|--|--|--|--|--|\\n\\nAbsolute Zero: Reinforced Self-play Reasoning with Zero Data,,,,,,\\r\\n{\\n \"headers\": [\\n \"Absolute Zero: Reinforced Self-play Reasoning with Zero Data\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\"\\n ],\\n \"rows\": []\\n}\\n\\n| Model                                           | Data Curation                                     | Base Model             |  |\\n|-------------------------------------------------|---------------------------------------------------|------------------------|--|\\n| Oat-7B (Liu et al.,<br>2025)                    | 8.5k math pairs (Hendrycks et al.,<br>2021)       | Qwen2.5-7B-Math        |  |\\n| SimpleRL-Zoo (Zeng et al.,<br>2025b)            | 8.5k math pairs (Hendrycks et al.,<br>2021)       | Qwen2.5-7B-Base        |  |\\n| OpenReasonerZero (Hu et al.,<br>2025)           | 57k STEM + math samples                           | Qwen2.5-7B-Base        |  |\\n| PRIME-Zero (Cui et al.,<br>2025)                | 457k math + 27k code problems                     | Qwen2.5Math-7B-Base    |  |\\n| CodeR1-Zero-7B-LC2k-1088 (Liu & Zhang,<br>2025) | 2k Leetcode pairs                                 | Qwen2.5-7B-Instruct-1M |  |\\n| CodeR1-Zero-7B-12k-832 (Liu & Zhang,<br>2025)   | 2k Leetcode + 10k TACO pairs (Li et al.,<br>2023) | Qwen2.5-7B-Instruct-1M |  |\\n| AceCoder-7B-Ins-RM (Zeng et al.,<br>2025a)      | 22k code data                                     | Qwen2.5-7B-Instruct    |  |\\n| AceCoder-7B-Ins-Rule (Zeng et al.,<br>2025a)    | 22k code data                                     | Qwen2.5-7B-Instruct    |  |\\n| AceCoder-7B-Code-RM (Zeng et al.,<br>2025a)     | 22k code data                                     | Qwen2.5-7B-Coder       |  |\\n| AceCoder-7B-Code-Rule (Zeng et al.,<br>2025a)   | 22k code data                                     | Qwen2.5-7B-Coder       |  |\\n| Qwen-7B-Instruct (Yang et al.,<br>2024a)        | 1M SFT + 150k RL pairs                            | Qwen2.5-7B-Base        |  |\\n| AZR-7B (Ours)                                   | No data                                           | Qwen2.5-7B-Base        |  |\\n| AZR-7B-Coder (Ours)                             | No data                                           | Qwen2.5-7B-Coder       |  |\\n\\nModel,Data Curation,Base Model\\r\\n\"Oat-7B (Liu et al., 2025)\",\"8.5k math pairs (Hendrycks et al., 2021)\",Qwen2.5-7B-Math\\r\\n\"SimpleRL-Zoo (Zeng et al., 2025b)\",\"8.5k math pairs (Hendrycks et al., 2021)\",Qwen2.5-7B-Base\\r\\n\"OpenReasonerZero (Hu et al., 2025)\",57k STEM + math samples,Qwen2.5-7B-Base\\r\\n\"PRIME-Zero (Cui et al., 2025)\",457k math + 27k code problems,Qwen2.5Math-7B-Base\\r\\n\"CodeR1-Zero-7B-LC2k-1088 (Liu & Zhang, 2025)\",2k Leetcode pairs,Qwen2.5-7B-Instruct-1M\\r\\n\"CodeR1-Zero-7B-12k-832 (Liu & Zhang, 2025)\",\"2k Leetcode + 10k TACO pairs (Li et al., 2023)\",Qwen2.5-7B-Instruct-1M\\r\\n\"AceCoder-7B-Ins-RM (Zeng et al., 2025a)\",22k code data,Qwen2.5-7B-Instruct\\r\\n\"AceCoder-7B-Ins-Rule (Zeng et al., 2025a)\",22k code data,Qwen2.5-7B-Instruct\\r\\n\"AceCoder-7B-Code-RM (Zeng et al., 2025a)\",22k code data,Qwen2.5-7B-Coder\\r\\n\"AceCoder-7B-Code-Rule (Zeng et al., 2025a)\",22k code data,Qwen2.5-7B-Coder\\r\\n\"Qwen-7B-Instruct (Yang et al., 2024a)\",1M SFT + 150k RL pairs,Qwen2.5-7B-Base\\r\\nAZR-7B (Ours),No data,Qwen2.5-7B-Base\\r\\nAZR-7B-Coder (Ours),No data,Qwen2.5-7B-Coder\\r\\n{\\n \"headers\": [\\n \"Model\",\\n \"Data Curation\",\\n \"Base Model\"\\n ],\\n \"rows\": [\\n {\\n \"Model\": \"Oat-7B (Liu et al., 2025)\",\\n \"Data Curation\": \"8.5k math pairs (Hendrycks et al., 2021)\",\\n \"Base Model\": \"Qwen2.5-7B-Math\"\\n },\\n {\\n \"Model\": \"SimpleRL-Zoo (Zeng et al., 2025b)\",\\n \"Data Curation\": \"8.5k math pairs (Hendrycks et al., 2021)\",\\n \"Base Model\": \"Qwen2.5-7B-Base\"\\n },\\n {\\n \"Model\": \"OpenReasonerZero (Hu et al., 2025)\",\\n \"Data Curation\": \"57k STEM + math samples\",\\n \"Base Model\": \"Qwen2.5-7B-Base\"\\n },\\n {\\n \"Model\": \"PRIME-Zero (Cui et al., 2025)\",\\n \"Data Curation\": \"457k math + 27k code problems\",\\n \"Base Model\": \"Qwen2.5Math-7B-Base\"\\n },\\n {\\n \"Model\": \"CodeR1-Zero-7B-LC2k-1088 (Liu & Zhang, 2025)\",\\n \"Data Curation\": \"2k Leetcode pairs\",\\n \"Base Model\": \"Qwen2.5-7B-Instruct-1M\"\\n },\\n {\\n \"Model\": \"CodeR1-Zero-7B-12k-832 (Liu & Zhang, 2025)\",\\n \"Data Curation\": \"2k Leetcode + 10k TACO pairs (Li et al., 2023)\",\\n \"Base Model\": \"Qwen2.5-7B-Instruct-1M\"\\n },\\n {\\n \"Model\": \"AceCoder-7B-Ins-RM (Zeng et al., 2025a)\",\\n \"Data Curation\": \"22k code data\",\\n \"Base Model\": \"Qwen2.5-7B-Instruct\"\\n },\\n {\\n \"Model\": \"AceCoder-7B-Ins-Rule (Zeng et al., 2025a)\",\\n \"Data Curation\": \"22k code data\",\\n \"Base Model\": \"Qwen2.5-7B-Instruct\"\\n },\\n {\\n \"Model\": \"AceCoder-7B-Code-RM (Zeng et al., 2025a)\",\\n \"Data Curation\": \"22k code data\",\\n \"Base Model\": \"Qwen2.5-7B-Coder\"\\n },\\n {\\n \"Model\": \"AceCoder-7B-Code-Rule (Zeng et al., 2025a)\",\\n \"Data Curation\": \"22k code data\",\\n \"Base Model\": \"Qwen2.5-7B-Coder\"\\n },\\n {\\n \"Model\": \"Qwen-7B-Instruct (Yang et al., 2024a)\",\\n \"Data Curation\": \"1M SFT + 150k RL pairs\",\\n \"Base Model\": \"Qwen2.5-7B-Base\"\\n },\\n {\\n \"Model\": \"AZR-7B (Ours)\",\\n \"Data Curation\": \"No data\",\\n \"Base Model\": \"Qwen2.5-7B-Base\"\\n },\\n {\\n \"Model\": \"AZR-7B-Coder (Ours)\",\\n \"Data Curation\": \"No data\",\\n \"Base Model\": \"Qwen2.5-7B-Coder\"\\n }\\n ]\\n}<span id=\"page-21-1\"></span>*Table 4.* **Reasoner Training Data Source and Base Model.**\\n\\n| logging   | random   | multiprocessing | pebble   | subprocess |\\n|-----------|----------|-----------------|----------|------------|\\n| threading | datetime | time            | hashlib  | calendar   |\\n| bcrypt    | os.sys   | os.path         | sys.exit | os.environ |\\n\\nlogging,random,multiprocessing,pebble,subprocess\\r\\nthreading,datetime,time,hashlib,calendar\\r\\nbcrypt,os.sys,os.path,sys.exit,os.environ\\r\\n{\\n \"headers\": [\\n \"logging\",\\n \"random\",\\n \"multiprocessing\",\\n \"pebble\",\\n \"subprocess\"\\n ],\\n \"rows\": [\\n {\\n \"logging\": \"threading\",\\n \"random\": \"datetime\",\\n \"multiprocessing\": \"time\",\\n \"pebble\": \"hashlib\",\\n \"subprocess\": \"calendar\"\\n },\\n {\\n \"logging\": \"bcrypt\",\\n \"random\": \"os.sys\",\\n \"multiprocessing\": \"os.path\",\\n \"pebble\": \"sys.exit\",\\n \"subprocess\": \"os.environ\"\\n }\\n ]\\n}<span id=\"page-21-0\"></span>*Figure 8.* **Forbidden Python Modules.** List of Python modules forbidden to exist in proposed tasks\\' programs.\\n\\n# <span id=\"page-21-2\"></span>**C. More Results**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n### <span id=\"page-21-3\"></span>**C.1. Out-of-Distribution Performance Breakdown**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-21-3\\\\\"></span>**C.1. Out-of-Distribution Performance Breakdown**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe plot the out-of-distribution performance, broken down by each benchmark and in aggregate, across training steps for our 7B, 7B-Coder, 14B, and 14B-Coder models in Figures [28](#page-34-0) to [31.](#page-37-1) We observe a strong correlation between training using AZR and improvements in both mathematical and coding reasoning capabilities. Moreover, our models are trained for more steps than typical zero-style reasoners; while overfitting can occur with static datasets, it is less likely in AZR due to dynamically proposed tasks.\\n\\n### <span id=\"page-21-4\"></span>**C.2. In-Distribution Results**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-21-4\\\\\"></span>**C.2. In-Distribution Results**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nSince we have defined the task domains as input prediction and output prediction, we can directly evaluate our model\\'s capabilities in these areas using popular code reasoning benchmarks: CruxEval-I(nput), CruxEval-O(utput), and LiveCodeBench-Execution (LCB-E) [\\\\(Gu](#page-14-7) [et al.,](#page-14-7) [2024;](#page-14-7) [Jain et al.,](#page-14-4) [2024\\\\)](#page-14-4), where CruxEval-O and LCB-E is solving the deduction task, and CruxEval-I is solving the abduction task. In Figure [14,](#page-22-2) we visualize the evolution of these metrics during the training of Absolute Zero Reasoner-base-7b. As training progresses, we observe a consistent improvement in in-distribution performance across steps. While these three benchmark curves do not perfectly correlate with broader coding or math reasoning capabilities (compare this with Figure [28\\\\)](#page-34-0), they serve as useful proxies for tracking task-specific progress.\\n\\n### <span id=\"page-21-5\"></span>**C.3. Interplay Between Propose and Solve Roles**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-21-5\\\\\"></span>**C.3. Interplay Between Propose and Solve Roles**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe visualize the training dynamics between the propose and solve roles over training steps in Figures [15](#page-23-0) to [17.](#page-24-1) We observe that, in general, the solve roles produce more output tokens than the propose role. Intuitively, this makes sense: the propose role emphasizes creativity and generation of novel tasks, whereas the solve role requires deeper reasoning, which naturally leads to longer outputs.\\n\\nInterestingly, we also observe a consistent ordering in token length across reasoning types\u2014abduction and deduction tasks tend to result in shorter outputs than induction tasks during problem solving. This aligns with our intuition, as we observed the model engaging in trial-and-error reasoning\u2014repeatedly generating hypothesized inputs, evaluating their outcomes, and reflecting and retrying when subsequent deductions fail to produce the correct output. To our knowledge, this is the first time such a clear distinction in token length\\n\\n```\\n```python\\n1 VALIDATE_CODE_TEMPLATE = \"\"\"{ code }\\n2 repr (f({ inputs }))\"\"\"\\n3\\n4 exec ( VALIDATE_CODE_TEMPLATE )\\n```\\n```\\n\\n```\\n```python\\n1 EVAL_INPUT_PREDICTION_TEMPLATE = \"\"\" { code }\\n2 { gold_output } == f({ agent_input }) \"\"\"\\n3\\n4 exec ( EVAL_INPUT_PREDICTION_TEMPLATE )\\n```\\n```\\n<span id=\"page-22-0\"></span>*Figure 10.* **Python Code to Check Agent Input Abduction Correctness.**\\n\\n```\\n```python\\n1 EVAL_OUTPUT_PREDICTION_TEMPLATE = \"\"\" { code }\\n2 eval ({ gold_output }) == eval ({ agent_output }) \"\"\"\\n3\\n4 exec ( EVAL_OUTPUT_PREDICTION_TEMPLATE )\\n```\\n```\\n*Figure 11.* **Python Code to Check Agent Output Deduction Correctness.**\\n\\n```\\n```python\\n1 EVAL_FUNCTION_PREDICTION_TEMPLATE = \"\"\"{ code }\\n2 matches = []\\n3 for gold_input , gold_output in zip ({ gold_inputs } , { gold_outputs }):\\n4 match = { gold_output } == f({ gold_input })\\n5 matches . append ( match )\\n6 \"\"\"\\n7\\n8 exec ( EVAL_OUTPUT_PREDICTION_TEMPLATE )\\n```\\n```\\n<span id=\"page-22-1\"></span>*Figure 12.* **Python Code to Check Agent Function Induction Correctness.**\\n\\n```\\n```python\\n1 CHECK_DETERMINISM_TEMPLATE = \"\"\"{ code }\\n2 returns = f({ inputs })\\n3 if returns != f({ inputs }):\\n4 raise Exception ( \\'Non - deterministic code \\')\\n5 repr ( returns ) \"\"\"\\n6\\n7 exec ( CHECK_DETERMINISM_TEMPLATE )\\n```\\n```\\n![](_page_22_Figure_8.jpeg)\\n\\n*Figure 13.* **Python Code to Check Deterministic Program.**\\n\\n<span id=\"page-22-2\"></span>*Figure 14.* **In-distribution Benchmark Score During Training.** The evolution of CruxEval-I, CruxEval-O, and LiveCodeBench-Execution during training for the Qwen2.5-7B base model trained using AZR.\\n\\n![](_page_23_Figure_1.jpeg)\\n\\n<span id=\"page-23-0\"></span>*Figure 15.* **Abduction Task Reward and Token Lengths.** The task reward and token lengths of the two roles for abduction task type of Absolute Zero Reasoner-base-7b.\\n\\n![](_page_23_Figure_3.jpeg)\\n\\n*Figure 16.* **Induction Task Reward and Token Lengths.** The task reward and token lengths of the two roles for induction task type of Absolute Zero Reasoner-base-7b.\\n\\n![](_page_24_Figure_1.jpeg)\\n\\n<span id=\"page-24-1\"></span>*Figure 17.* **Deduction Task Reward and Token Lengths.** The task reward and token lengths of the two roles for deduction task type of Absolute Zero Reasoner-base-7b. Figure 17. **Deduction Task Reward and Token Lengths.** The task reward and token lengths of the two roles for deduction task type of Absolute Zero Reasoner-base-7b.\\n\\n![](_page_24_Figure_3.jpeg)\\n\\n<span id=\"page-24-0\"></span>Figure 18. An example response of proposing a deduction task. k programs are selected as few-shot examples to the model. The generated new program will then be verifed through execution. *Figure 18.* **Propose Deduction Task Example.** An example response of proposing a deduction task. k programs are selected as few-shot examples to the model. The generated new program will then be verified through execution.\\n\\n```\\n```python\\ndef f(numbers):\\n    # Step 1: Filter out even numbers\\n    filtered_numbers = [num for num in numbers if num % 2 != 0]\\n    # Step 2: Calculate the sum of the remaining odd numbers\\n    sum_of_odd_numbers = sum(filtered_numbers)\\n    # Step 3: Reverse the order of the remaining odd numbers\\n    reversed_odd_numbers = filtered_numbers[::-1]\\n    # Step 4: Calculate the product of the reversed odd numbers\\n    product_of_reversed_odd_numbers = 1\\n    for num in reversed_odd_numbers:\\n        product_of_reversed_odd_numbers *= num\\n    # Step 5: Calculate the sum of the digits of the product\\n    sum_of_digits_of_product = sum(int(digit) for digit in str(product_of_reversed_odd_numbers))\\n    # Step 6: Modify the original list by adding the sum of the digits to each even number\\n    # and subtracting it from each odd number\\n    modified_numbers = []\\n    for num in numbers:\\n        if num % 2 == 0:\\n            modified_numbers.append(num + sum_of_digits_of_product)\\n        else:\\n            modified_numbers.append(num - sum_of_digits_of_product)\\n    # Step 7: Return the modified list\\n    return modified_numbers\\n```\\n```\\nFigure 19. **Learned \"ReAct\" style program generation.** We observe that even after outputting the CoT and during answering when the answer requires outputting code, the model usually uses comments in code to interleave its thinking and \"acting\", an example is shown here for induction task output by Absolute Zero Reasoner-Coder-14b during training. Similar observations are recently observed in much bigger models (671b) for math proofs with DeepSeek Prover [V2 \\\\(Ren et a](#page-15-3)l., 2025). *Figure 19.* **Learned \"ReAct\" style program generation.** We observe that even after outputting the CoT and during answering when the answer requires outputting code, the model usually uses comments in code to interleave its thinking and \"acting\", an example is shown here for induction task output by Absolute Zero Reasoner-Coder-14b during training. Similar observations are recently observed in much bigger models (671b) for math proofs with DeepSeek Prover V2 (Ren et al., [2025\\\\)](#page-15-3).\\n\\n#### **Task: Propose Abduction Task**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-21-5\\\\\"></span>**C.3. Interplay Between Propose and Solve Roles**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Propose Abduction Task**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n### **Model Input:** (k random selected example programs as few-shot input)\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-21-2\\\\\"></span>**C. More Results**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"**Model Input:** (k random selected example programs as few-shot input)\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n# **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nFor this task, we need an intelligent problem that requires deep algorithmic reasoning and demands long multi step reasoning. A typical type of problem that fts these requirements is the Matrix Reconstruction from a given jumbled li st of elements, where we have to fgure out the matrix\\'s dimensions and individual values. However, this task will involve multiple steps, increasing its complexity and creativity. We will create a function \\'f\\' that transforms a jumbled list of elements into a two-dimensional matrix, then back to a list, given a specifc reconstruction pattern. We will retrieve the original list from the reconstructed matrix. Here, we will avoid random and datetime operations to ensure determinism. The function will be structured to reconstruct the matrix elements in a unique and challenging way. We will provide an input that, after reconstruction, presents a unique list that can be easily deduced from the given output in a test piece.\\n\\n```\\n```python\\ndef f(jumbled_elements: list) -> list:\\n    if not jumbled_elements:\\n        return []\\n    # Calculate the square root of the length of elements to estimate the matrix dimensions\\n    n = len(jumbled_elements)\\n    sqrt_n = int(n ** 0.5)\\n    if n > sqrt_n ** 2:\\n        sqrt_n += 1\\n    if n < sqrt_n ** 2:\\n        sqrt_n -= 1\\n    # Now, we need to reconstruct the matrix elements in a challenging way using specific patterns\\n    # For this, we can reconstruct the matrix using zigzag patterns or hill-climbing patterns\\n    # Here, a hill-climbing pattern is used where we traverse the matrix from the extreme\\n    # right and downward Then traverse the matrix from the second to last element to the\\n    # extreme bottom. Repeat the process until the entire matrix is traversed.\\n    # Initialize the matrix\\n    matrix = [[0 for _ in range(sqrt_n)] for _ in range(sqrt_n)]\\n    cur_idx = 0\\n    # Fill the matrix in a zigzag pattern\\n    for i in range(sqrt_n):\\n        if i % 2 == 0:\\n            for j in range(sqrt_n):\\n                matrix[j][i] = j * sqrt_n + i + cur_idx\\n                cur_idx += 1\\n        else:\\n            for j in range(sqrt_n - 1, -1, -1):\\n                matrix[j][i] = j * sqrt_n + n - i - cur_idx - 1\\n                cur_idx += 1\\n    # Reconstruct the list into a matrix by repeating the process\\n    reconstructed_list = []\\n    for i in range(sqrt_n):\\n        for j in range(sqrt_n):\\n            reconstructed_list.append(matrix[i][j])\\n    # Now, we need to calculate another matrix based on a function F applied to the current matrix\\n    # F is a mathematical function that can be complex, such as factorial, prime check,\\n    # or another transformation For example, transform each element by adding 1 if it\\'s prime,\\n    # subtracting 1 if it\\'s even, or leaving it unchanged, Implement any specific transformation\\n    # function here. Here, for demonstration, each element is left unchanged\\n    transformed_result = reconstructed_list\\n    return transformed_result\\nOutput: [0, 11, 10, 1, 5, 16, 15, 6, 10, 21, 20, 11, 15, 26, 25, 16]\\n```\\n```\\n<span id=\"page-26-0\"></span>Figure 20. An example response of proposing an abduction task. The model uses comments as reasoning when generating the program. 26 *Figure 20.* **Propose Abduction Task Example.** An example response of proposing an abduction task. The model uses comments as reasoning when generating the program.\\n\\n#### **Task: Propose Induction Task**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Propose Induction Task**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Input:** Here is the function f. Analyze its behaviour and relate it to the observed inputs/outputs.\\n\\n```\\n```yaml\\ndef f(numbers: list[int]) -> int:\\n    replacement = {\\n        0: 2,\\n        1: 3,\\n        2: 1,\\n        3: 0,\\n        4: 4\\n    }\\n    return sum(replacement[num] for num in numbers)\\n```\\n```\\n#### **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nTo solve this task, we need to come up with 10 diferent inputs for the function f(numbers: list[int]) -> int. The function replaces each number in the list according to a specifc dictionary and then sums up the replaced numbers. Let\\'s analyze the dictionary:\\n\\nThis dictionary tells us that:\\n\\n-0 becomes 2\\n\\n-1 becomes 3\\n\\n-2 becomes 1\\n\\n-3 becomes 0\\n\\n-4 remains 4\\n\\nTo create diverse outputs, we should include lists with diferent sets of numbers from the list {0*,* 1*,* 2*,* 3*,* 4}. We also need to ensure that the inputs are valid (i.e., lists of integers).\\n\\nLet\\'s illustrate using provided examples step-by-step:\\n\\n1. Input: [0] \u21d2 Replacement: [2] \u21d2 sum = 2 2. Input: [1, 2, 3] \u21d2 Replacement: [3*,* 1*,* 0] \u21d2 sum = 4 3. Input: [4, 1] \u21d2 Replacement: [4*,* 3] \u21d2 sum = 7 4. Input: [2, 1, 0] \u21d2 Replacement: [1*,* 3*,* 2] \u21d2 sum = 6 5. Input: [3, 0, 2, 4] \u21d2 Replacement: [0*,* 2*,* 1*,* 4] \u21d2 sum = 7 6. Input: [1, 1, 1] \u21d2 Replacement: [3*,* 3*,* 3] \u21d2 sum = 9 7. Input: [2, 2, 0, 1] \u21d2 Replacement: [1*,* 1*,* 2*,* 3] \u21d2 sum = 7 8. Input: [3, 4, 2] \u21d2 Replacement: [0*,* 4*,* 1] \u21d2 sum = 5 9. Input: [0, 1, 2, 3, 4] \u21d2 Replacement: [2*,* 3*,* 1*,* 0*,* 4] \u21d2 sum = 10 10. Input: [1, 2, 3, 0, 4] \u21d2 Replacement: [3*,* 1*,* 0*,* 2*,* 4] \u21d2 sum = 10 Thus, the rule is clearly replacing numbers according to the given mapping and then summing the results. **Inputs**: [\\'[0]\\', \\'[1, 2, 3]\\', \\'[4, 1]\\', \\'[2, 1, 0]\\', \\'[3, 0, 2, 4]\\', \\'[1, 1, 1]\\', [2, 2, 0, 1], \\'[3, 4, 2]\\', \\'[0, 1, 2, 3, 4]\\', \\'[1, 2, 3, 0, 4]\\']| **Message**: You are given a function that takes a list of integers as input and returns a single integer as output. Can you determine the rule this function is following by analyzing the outputs for the given inputs? (After execution:) **Outputs**: [\\'2\\', \\'4\\', \\'7\\', \\'6\\', \\'7\\', \\'9\\', \\'7\\', \\'5\\', \\'10\\', \\'10\\']\\n\\nFigure 21. An example response of proposing an induction task. Given a random selected program, the model needs to propose 10 inputs and a description of program. These inputs will be executed and verifed to get outputs. At solve phase, the model need to generate the program given the message and 5 input/output pairs (half is hidden cases) *Figure 21.* **Propose Induction Task Example.** An example response of proposing an induction task. Given a random selected program, the model needs to propose 10 inputs and a description of program. These inputs will be executed and verified to get outputs. At solve phase, the model need to generate the program given the message and 5 input/output pairs (half is hidden cases)\\n\\n**Task: Solve Abduction Task**\\n\\n**Model Input:** Here is the function f and the output: \\'1\\', please predict the input.\\n\\n```\\n```python\\ndef f(numbers: list[int], target: int) -> int:\\n    accumulated_values = []\\n    current_sum = 0\\n    for number in numbers:\\n        current_sum += number\\n        accumulated_values.append(current_sum)\\n    result = 0\\n    for i in range(len(accumulated_values)):\\n        for j in range(i + 1, len(accumulated_values)):\\n            if accumulated_values[j] \\\\\\n                    - accumulated_values[i] == target:\\n                result = accumulated_values[i]\\n                return result\\n    return result\\n```\\n```\\n#### **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nLet\\'s analyze the code snippet to understand how the result is achieved. The function f takes a list of integers numbers and a target integer target. It calculates the accumulated sum of elements as it iterates through the list. Then, it checks for each pair of accumulated sums if their diference equals the target. If such a pair is found, it returns the accumulated sum at the frst index of the pair.\\n\\nTo fnd one possible input that produces the output 1, we need to fnd a scenario where the diference between any two accumulated\\\\_values equals the target, and the frst accumulated\\\\_values that satisfes this condition is 1. Let\\'s consider a simple example: -numbers = [1, 2] -target = 1 Here\\'s the step-by-step calculation: 1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 2 = 3, accumulated\\\\_values = [1, 3] -Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target) Since no pair satisfes the condition, the function will not return any value. This doesn\\'t match our output. Let\\'s try another example. Consider: -numbers = [1, 0] -target = 1 Step-by-step calculation: 1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 0 = 1, accumulated\\\\_values = [1, 1] -Check for pair (i=0, j=1): 1 - 1 = 0 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 1 - 1 = 0 (not equal to target) ...(shortened) The pair (i=1, j=2) satisfes the condition, and the function returns the frst accumulated value in this pair, which is 3. This still doesn\\'t match our output. Given the complexity and the fact that no simple example seems to work, let\\'s try a more complex scenario: -numbers = [2, -1, 1] -target = 1 Step-by-step calculation: 1. current\\\\_sum = 0 + 2 = 2, accumulated\\\\_values = [2] 2. current\\\\_sum = 2 - 1 = 1, accumulated\\\\_values = [2, 1] 3. current\\\\_sum = 1 + 1 = 2, accumulated\\\\_values = [2, 1, 2] -Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target) -Check for pair (i=0, j=2): 2 - 2 = 0 (not equal to target) -Check for pair (i=1, j=2): 2 - 1 = 1 (equal to target) The pair (i=1, j=2) satisfes the condition, and the function returns the frst accumulated value in this pair, which is 1. This matches our output. Therefore, one possible input that could produce the output 1 is: [2, -1, 1], 1\\n\\nFigure 22. A more detailed version of the example shown in main Figure 7. The model is solving an abducti[on](#page-10-0) task (predict input). *Figure 22.* **Solve Abduction Task Example.** A more detailed version of the example shown in main Figure 7. The model is solving an abduction task (predict input).\\n\\n#### **Task: Solve Deduction Task (Example 1)**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Solve Deduction Task (Example 1)**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Input:** Here is the function f, the input provided [1, 2, 1, 2, 3, 2, 1], 2, and we need to predict the output.\\n\\n```\\n```python\\ndef f(array: list[int], k: int) -> int:\\n      window_start = 0\\n      max_length = 0\\n      char_freq = {}\\n      for window_end in range(len(array)):\\n            end_char = array[window_end]\\n            if end_char not in char_freq:\\n                   char_freq[end_char] = 0\\n            char_freq[end_char] += 1\\n            while len(char_freq) > k:\\n                   start_char = array[window_start]\\n                   char_freq[start_char] -= 1\\n                   if char_freq[start_char] == 0:\\n                         del char_freq[start_char]\\n                   window_start += 1\\n            max_length = max(max_length, window_end - window_start + 1)\\n      return max_length\\nInput: [1, 2, 1, 2, 3, 2, 1], 2\\nModel Output:\\nBased on the given code snippet, we need to determine the output of the function f(array, k) when provided with the input [1, 2, 1, 2, 3, 2, 1] and k = 2.\\nThe function f is designed to fnd the length of the longest subarray with at most k distinct characters. Let\\'s go through the code step by step:\\n1. Initialize window_start to 0, max_length to 0, and an empty dictionary char_freq to store the frequency of characters in the current window.\\n2. Iterate through the array using window_end as the index:\\na. Get the current character end_char at index window_end.\\nb. If end_char is not in char_freq, add it with a frequency of 0.\\nc. Increment the frequency of end_char by 1.\\n3. Check if the number of distinct characters in char_freq is greater than k:\\na. If true, shrink the window from the start:\\ni. Get the character start_char at index window_start.\\nii. Decrement its frequency by 1.\\niii. If the frequency becomes 0, remove the character from char_freq.\\niv. Increment window_start by 1.\\n4. Update max_length by taking the maximum of max_length and the current window size (window_end - window_start + 1).\\nNow, let\\'s apply this algorithm step-by-step to the input [1, 2, 1, 2, 3, 2, 1], k = 2:\\n\u2022 window_start = 0, max_length = 0, char_freq = {}\\n\u2022 window_end = 0, add 1 to char_freq: {1:1}, window size = 1\\n\u2022 window_end = 1, add 2: {1:1, 2:1}, window size = 2\\n\u2022 window_end = 2, increment 1: {1:2, 2:1}, window size = 3\\n\u2022 window_end = 3, increment 2: {1:2, 2:2}, window size = 4\\n\u2022 window_end = 4, add 3: {1:2, 2:2, 3:1}; now distinct chars > 2, shrink window:\\n- remove 1 at start: {1:1, 2:2, 3:1}\\n- remove 2 at start: {1:1, 2:1, 3:1}\\n- remove 1 again: {2:1, 3:1}, window now starts at 3\\n\u2022 window_end = 5, increment 2: {2:2, 3:1}, window size = 3\\n\u2022 window_end = 6, add 1: {2:2, 3:1, 1:1}, shrink again:\\n- remove 2: {2:1, 3:1, 1:1}\\n- remove 3: {2:1, 1:1}, window now starts at 5\\n- window size = 2\\nMaximum window size encountered is 4, thus max_length = 4.\\nHence, the function returns 4.\\n```\\n```\\nFigure 23. Example of solving the deduction task. Given a program and input, the model simulates the execution of the program until the fnal result. *Figure 23.* **Solve Deduction Task Example.** Example of solving the deduction task. Given a program and input, the model simulates the execution of the program until the final result.\\n\\n**Task: Solve Induction Task**\\n\\n**Model Input:** Given the inputs and outputs, deduce the code snippet implementing the described functionality: **Input Description:** Given a list of integers, sort the list and then for each element at index *i*, multiply it by (*n* \u2212 *i*), where *n* is the total number of elements. Compute the fnal sum. **Inputs:** [\\'[1, 2, 3, 4]\\', \\'[4, 3, 2, 1]\\', \\'[3, 1, 4, 2]\\', \\'[1, 2, 2, 3]\\', \\'[5]\\'] **Outputs:** [\\'20\\', \\'20\\', \\'20\\', \\'17\\', \\'5\\'] *# Golden* **def** f(elements: list[int]) -> int: n = len(elements) sorted\\\\_elements = sorted(elements) modified\\\\_elements = [sorted\\\\_elements[i] \\\\* (n - i) **for** i **in** range(n)] **return** sum(modified\\\\_elements) **Model Output:** Given the problem and the input/output pairs, we need to deduce a general code snippet that takes a sorted list and a list of multipliers, and then computes a fnal sum based on the multipliers. Let\\'s break down the problem step by step: 1. \\\\*\\\\*Understand the Message:\\\\*\\\\* - We are given a list of integers. - The list is sorted. - For each element at index *i* in the sorted list, we multiply it by (*n* \u2212 *i*), where *n* is the number of elements in the list. - We need to compute the sum of these products. 2. \\\\*\\\\*Analyze the Input/Output Pairs:\\\\*\\\\* - For the input [1*,* 2*,* 3*,* 4], the sorted form is the same, and the output is 20. 1 \u00b7 (4 \u2212 1) = 3, 2 \u00b7 (4 \u2212 2) = 4, 3 \u00b7 (4 \u2212 3) = 3, 4 \u00b7 (4 \u2212 4) = 0, Sum: 3 + 4 + 3 + 0 = 10 - For the input [4*,* 3*,* 2*,* 1], the sorted form is [1*,* 2*,* 3*,* 4], and the output is 20 (same as above). - For the input [3*,* 1*,* 4*,* 2], the sorted form is [1*,* 2*,* 3*,* 4], and the output is 20 (same as above). **shortened** 3. \\\\*\\\\*Re-evaluate the Outputs:\\\\*\\\\* - It seems there might be an error in the provided outputs for some inputs. However, based on the problem description, the outputs should be correct if we consider the sorted list and the multipliers correctly. 4. \\\\*\\\\*Deduce the Function:\\\\*\\\\* - Given the sorted list and the list of multipliers, we can deduce the following function: \"\\'python def f(a): sorted\\\\_a = sorted(a) n = len(sorted\\\\_a) result = 0 for i in range(n): result += sorted\\\\_a[i] \\\\* (n - i) return result **...(shortened)** 5. \\\\*\\\\*Verify the Function:\\\\*\\\\* - Let\\'s verify the function with the provided inputs: - For [1*,* 2*,* 3*,* 4]: - Sorted list: [1*,* 2*,* 3*,* 4] - Multipliers: [3*,* 4*,* 3*,* 0] - Sum: 1 \u00b7 3+2 \u00b7 4+3 \u00b7 3+4 \u00b7 0 = 3 + 8 + 9 + 0 = 20 **...(shortened)** The corrected outputs should be: For [1*,* 2*,* 3*,* 4]: 20, For [4*,* 3*,* 2*,* 1]: 20, For [3*,* 1*,* 4*,* 2]: 20, For [1*,* 2*,* 2*,* 3]: 13, For [5]: 0 Given the function: **def** f(a): sorted\\\\_a = sorted(a) n = len(sorted\\\\_a) result = 0 **for** i **in** range(n): result += sorted\\\\_a[i] \\\\* (n - i) **return** result The outputs match the corrected sum. ### Final Answer **(repeat the program above)**\\n\\nFigure 24. Example of solving an induction task. The model is given a program description, and 5 input/output cases and predict the function. Interestingly, after the model gives the function, it will go through the given use cases one by one and confrm all test cases are passed. <sup>30</sup> *Figure 24.* **Solve Induction Task Example.** Example of solving an induction task. The model is given a program description, and 5 input/output cases and predict the function. Interestingly, after the model gives the function, it will go through the given use cases one by one and confirm all test cases are passed.\\n\\n**Absolute Zero: Reinforced Self-play Reasoning with Zero Data**\\n\\n| Model             | HEval+ | MBPP+ | LCBv1-5 |      |      |      |      |      | AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench |\\n|-------------------|--------|-------|---------|------|------|------|------|------|------------------------------------------------------|\\n| Llama3.1-8B       | 31.7   | 53.7  | 0.0     | 0.0  | 0.0  | 2.5  | 10.6 | 5.5  | 2.1                                                  |\\n| + Simple-RL-Zoo   | 38.4   | 55.3  | 7.4     | 0.0  | 0.0  | 7.5  | 22.2 | 8.8  | 4.7                                                  |\\n| + AZR             | 35.4   | 50.8  | 8.5     | 3.3  | 0.0  | 5.0  | 13.2 | 14.0 | 5.0                                                  |\\n| Qwen2.5-3B-Coder  | 67.1   | 65.9  | 20.0    | 3.3  | 3.3  | 20.0 | 51.0 | 18.4 | 16.6                                                 |\\n| + AZR             | 71.3   | 69.0  | 24.4    | 3.3  | 3.3  | 37.5 | 62.0 | 26.1 | 27.0                                                 |\\n| Qwen2.5-14B-Coder | 76.8   | 71.7  | 31.4    | 0.0  | 0.0  | 37.5 | 54.8 | 10.7 | 18.5                                                 |\\n| + AZR             | 80.5   | 71.2  | 39.0    | 23.3 | 20.0 | 65.0 | 78.6 | 32.0 | 39.3                                                 |\\n| Qwen2.5-14B-Base  | 78.0   | 66.7  | 21.7    | 6.7  | 3.3  | 35.0 | 66.2 | 28.3 | 32.4                                                 |\\n| + AZR             | 70.7   | 68.8  | 35.2    | 10.0 | 20.0 | 62.5 | 76.2 | 40.4 | 42.5                                                 |\\n\\nModel,HEval+,MBPP+,LCBv1-5,,,,,,AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\\r\\nLlama3.1-8B,31.7,53.7,0.0,0.0,0.0,2.5,10.6,5.5,2.1\\r\\n+ Simple-RL-Zoo,38.4,55.3,7.4,0.0,0.0,7.5,22.2,8.8,4.7\\r\\n+ AZR,35.4,50.8,8.5,3.3,0.0,5.0,13.2,14.0,5.0\\r\\nQwen2.5-3B-Coder,67.1,65.9,20.0,3.3,3.3,20.0,51.0,18.4,16.6\\r\\n+ AZR,71.3,69.0,24.4,3.3,3.3,37.5,62.0,26.1,27.0\\r\\nQwen2.5-14B-Coder,76.8,71.7,31.4,0.0,0.0,37.5,54.8,10.7,18.5\\r\\n+ AZR,80.5,71.2,39.0,23.3,20.0,65.0,78.6,32.0,39.3\\r\\nQwen2.5-14B-Base,78.0,66.7,21.7,6.7,3.3,35.0,66.2,28.3,32.4\\r\\n+ AZR,70.7,68.8,35.2,10.0,20.0,62.5,76.2,40.4,42.5\\r\\n{\\n \"headers\": [\\n \"Model\",\\n \"HEval+\",\\n \"MBPP+\",\\n \"LCBv1-5\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\"\\n ],\\n \"rows\": [\\n {\\n \"Model\": \"Llama3.1-8B\",\\n \"HEval+\": \"31.7\",\\n \"MBPP+\": \"53.7\",\\n \"LCBv1-5\": \"0.0\",\\n \"\": \"5.5\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"2.1\"\\n },\\n {\\n \"Model\": \"+ Simple-RL-Zoo\",\\n \"HEval+\": \"38.4\",\\n \"MBPP+\": \"55.3\",\\n \"LCBv1-5\": \"7.4\",\\n \"\": \"8.8\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"4.7\"\\n },\\n {\\n \"Model\": \"+ AZR\",\\n \"HEval+\": \"35.4\",\\n \"MBPP+\": \"50.8\",\\n \"LCBv1-5\": \"8.5\",\\n \"\": \"14.0\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"5.0\"\\n },\\n {\\n \"Model\": \"Qwen2.5-3B-Coder\",\\n \"HEval+\": \"67.1\",\\n \"MBPP+\": \"65.9\",\\n \"LCBv1-5\": \"20.0\",\\n \"\": \"18.4\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"16.6\"\\n },\\n {\\n \"Model\": \"+ AZR\",\\n \"HEval+\": \"71.3\",\\n \"MBPP+\": \"69.0\",\\n \"LCBv1-5\": \"24.4\",\\n \"\": \"26.1\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"27.0\"\\n },\\n {\\n \"Model\": \"Qwen2.5-14B-Coder\",\\n \"HEval+\": \"76.8\",\\n \"MBPP+\": \"71.7\",\\n \"LCBv1-5\": \"31.4\",\\n \"\": \"10.7\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"18.5\"\\n },\\n {\\n \"Model\": \"+ AZR\",\\n \"HEval+\": \"80.5\",\\n \"MBPP+\": \"71.2\",\\n \"LCBv1-5\": \"39.0\",\\n \"\": \"32.0\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"39.3\"\\n },\\n {\\n \"Model\": \"Qwen2.5-14B-Base\",\\n \"HEval+\": \"78.0\",\\n \"MBPP+\": \"66.7\",\\n \"LCBv1-5\": \"21.7\",\\n \"\": \"28.3\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"32.4\"\\n },\\n {\\n \"Model\": \"+ AZR\",\\n \"HEval+\": \"70.7\",\\n \"MBPP+\": \"68.8\",\\n \"LCBv1-5\": \"35.2\",\\n \"\": \"40.4\",\\n \"AIME\\'24 AIME\\'25 AMC\\'23 MATH500 Minerva OlympiadBench\": \"42.5\"\\n }\\n ]\\n}<span id=\"page-31-0\"></span>*Table 5.* **Detailed Breakdown of Evaluation Benchmarks for Other Model Sizes and Types.** Full evaluation of AZR trained on other models on three standard code benchmarks (HEval<sup>+</sup> , MBPP<sup>+</sup> , LCBv1-5) and six math benchmarks (AIME\\'24, AIME\\'25, AMC\\'23, MATH500, Minerva, OlympiadBench).\\n\\nhas been observed and presented for jointly trained reasoning multi-tasks. Previously, length differences were typically noted between correct and incorrect traces [\\\\(Liu et al.,](#page-15-10) [2025\\\\)](#page-15-10).\\n\\nThe reward dynamics between the propose and solve roles exhibit mildly adversarial behavior: when one receives higher rewards, the other often receives lower rewards. However, this is not entirely adversarial, as the proposer is also penalized for generating unsolvable tasks, encouraging overall cooperative behavior in the learning process.\\n\\n# <span id=\"page-31-1\"></span>**C.4. Complexity and Diversity Metrics of AZR Proposed Tasks**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-1\\\\\"></span>**C.4. Complexity and Diversity Metrics of AZR Proposed Tasks**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe outline several metrics used to probe characteristics of the tasks proposed during the training of AZR from the base model. Specifically, we log two sets of metrics: program complexity and task diversity. For complexity, we employ two proxy measures\u2014ComplexiPy score and the Halstead metric. To assess diversity, we compute the average abstract syntax tree (AST) edit distance between the proposed program and a set of *K* reference programs, and an answer diversity metric. We calculate this answer diversity metric by tracking all historical answers to the generated questions, i.e., the input-output pairs, and form a categorical distribution over these outputs. We define answer diversity as <sup>1</sup> <sup>\u2212</sup> *<sup>p</sup>*(answer), where *<sup>p</sup>*(answer) is the empirical probability of a specific answer\u2014used as a proxy for the diversity of generated outputs.\\n\\nWe present these metrics in Figure [27.](#page-33-1) Interestingly, even without incorporating them explicitly into the reward function, the policy appears to implicitly optimize for these metrics. This aligns well with intuitive notions of task difficulty and diversity, and that the policy learned to propose increasingly challenging tasks over time using our proposed simple reward function in Equation [\\\\(4\\\\)](#page-4-1).\\n\\n# <span id=\"page-31-2\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe use the ComplexiPy package to measure code complexity. For each generated program in the induction task, we compute the cognitive complexity difference from the corresponding \"gold\" code, *i.e*. complexipy(*p<sup>\u03c0</sup>* propose {abduction,deduction} ) <sup>\u2212</sup> complexipy(*p\u03c0*solve induction ) for each pair, where the superscript of *\u03c0* indicates the role and the subscript indicates the task type(s), and *p* denotes the generated programs. On average, the difference of proposer and solver while holding the code\\'s functionality constant is 0*.*27, indicating that the proposer in the abduction/deduction tasks often increases the cognitive complexity to make the code appear more convoluted, whereas the induction solver tends to generate more efficient implementations.\\n\\n#### **Task: Solve Deduction Task (Example 2)**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Solve Deduction Task (Example 2)**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Input:** Here is the function f, the given input, and we need to predict the output.\\n\\n```\\n```python\\ndef f(num_list: list[int], target_product: int) -> list[tuple[int]]:\\n    result_pairs = []\\n    for i in range(len(num_list)):\\n        for j in range(i + 1, len(num_list)):\\n            if num_list[i] * num_list[j] == target_product:\\n                result_pairs.append((num_list[i], num_list[j]))\\n    return result_pairs\\n```\\n```\\n**Input:** [2, 3, 5, 7, 10], 10 **Output:** [(2, 5)]\\n\\n#### **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nThe given function f takes a list of integers num\\\\_list and a target product target\\\\_product as inputs. It is designed to fnd all pairs of numbers in num\\\\_list whose product equals target\\\\_product. The function then returns a list of tuples, where each tuple contains a pair of numbers that satisfy the condition.\\n\\nLet\\'s go through the code step by step:\\n\\n1. Initialize an empty list result\\\\_pairs to store pairs whose product equals target\\\\_product.\\n\\n2. Use nested loops to iterate through each pair of numbers in num\\\\_list. The outer loop iterates over each number, and the inner loop iterates over numbers that come after the current number in the outer loop (**\u907f\u514d\u91cd\u590d\u548c\u53cd\u5411\u7684\u5bf9\u5b50,\u4f8b\u5982 (2, 3) \u548c (3, 2)**)\u3002 3. For each pair (num\\\\_list[i], num\\\\_list[j]), check if their product equals target\\\\_product.\\n\\n4. If the product equals target\\\\_product, append the tuple (num\\\\_list[i], num\\\\_list[j]) to result\\\\_pairs.\\n\\n5. After all pairs have been checked, return the list result\\\\_pairs.\\n\\nLet\\'s explicitly apply this to the provided input [2, 3, 5, 7, 10], target product 10:\\n\\n```\\n```python\\n- For i=0 (num_list[0] = 2):\\n- j=1, 2 \u00d7 3 = 6 (\u226010)\\n- j=2, 2 \u00d7 5 = 10 (=10), add pair (2, 5)\\n- j=3, 2 \u00d7 7 = 14 (\u226010)\\n- j=4, 2 \u00d7 10 = 20 (\u226010)\\n- For i=1 (num_list[1] = 3):\\n- j=2, 3 \u00d7 5 = 15 (\u226010)\\n- j=3, 3 \u00d7 7 = 21 (\u226010)\\n- j=4, 3 \u00d7 10 = 30 (\u226010)\\n- For i=2 (num_list[2] = 5):\\n- j=3, 5 \u00d7 7 = 35 (\u226010)\\n- j=4, 5 \u00d7 10 = 50 (\u226010)\\n- For i=3 (num_list[3] = 7):\\n- j=4, 7 \u00d7 10 = 70 (\u226010)\\n- For i=4 (num_list[4] = 10):\\n- No further pairs to check\\nThus, the only pair satisfying the condition is (2, 5). Therefore, the output is:\\n[(2, 5)]\\n```\\n```\\nFigure 25. An example of the model solving an deduction task. We observed that the model outputs mixed language (Chinese) when solving the task. *Figure 25.* **Mixed Language CoT Example.** An example of the model solving an deduction task. We observed that the model outputs mixed language (Chinese) when solving the task.\\n\\n#### **Task: Solve Deduction Task (Llama 8B)**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Solve Deduction Task (Llama 8B)**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Input:** Here is the function f, the input provided \\'cookie\\', and we need to predict the output.\\n\\n```\\n```python\\ndef f(input_string: str):\\n    \"\"\"Function to check if a string contains given substrings.\"\"\"\\n    substring = \"code\"\\n    # Start with `substring` as the first substring.\\n    curr_index = substring\\n    # Slice out the required substring from the input string\\n    sliced_out_string = input_string[0:len(substring)]\\n    if (sliced_out_string == substring):\\n        return True\\n    # Check if there are any remaining substrings to be checked\\n    if (len(curr_index) > len(input_string)):\\n        return False\\n    return False\\n```\\n```\\n**Input:** \\'cookie\\' **Output:** False\\n\\n#### **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nI know that the line \\'curr\\\\_index = substring\\' is just initialization of the curr\\\\_index parameter variable and does not afect the output. Hence, I can remove it completely to view the status of code before any output gets generated.\\n\\nNow I have a single variable, \"\\'curr\\\\_index\"\\' which is set to \"codecandide\".\\n\\nThe second line of code, \\'slice\\\\_out\\\\_string = input\\\\_string[0:len(substring)]\\', assigns the result of slicing the input\\\\_string to the left of index 0 and to the right of index len(substring), i.e., the index of the last character in the substring. It then assigns this value to the variable \"\\'slice\\\\_out\\\\_string\"\\'.\\n\\nThe third line, \\'if (slice\\\\_out\\\\_string == substring)\\' checks whether the \"\\'slice\\\\_out\\\\_string\"\\' is equal to the value of substring. Because curr\\\\_index is set to \"codecandide\", \"code\" appears on the left of the frst index in input\\\\_string, and thus, \"\\'slice\\\\_out\\\\_string\"\\' assumes the value \"code\". That means for a minute the \"\\'if statement\"\\' is satisfed and will continue the code execution afterwards. However, according to the True/False statement, we see that the value of the frst index of input\\\\_string does not exist hence while it does output \"True\", \"False\" is outputted in main. So, the output of the whole program is shown below:\\n\\n\\'f(input\\\\_string = \"cookie\")\\' then output: False\\n\\n<span id=\"page-33-0\"></span>Figure 26. **Absolute Zero Reasoner-Llama3.1-8b CoT Example on Solving Output Deduction Task.** The Absolute Zero Reasoner-Llama3.1-8b model appears to have strengthened its state-tracking behaviors during the course of training. We illustrate an example here. *Figure 26.* **Absolute Zero Reasoner-Llama3.1-8b CoT Example on Solving Output Deduction Task.** The Absolute Zero Reasoner-Llama3.1-8b model appears to have strengthened its state-tracking behaviors during the course of training. We illustrate an example here.\\n\\n![](_page_33_Figure_12.jpeg)\\n\\n<span id=\"page-33-1\"></span>Figure 27. **Metrics on Proposed Tasks.** We break down the proposed task metrics into program complexity and diversity across programs and answers. An upward trend is observed in all metrics, indicating that AZR implicitly optimizes for these qualities as training progresses. *Figure 27.* **Metrics on Proposed Tasks.** We break down the proposed task metrics into program complexity and diversity across programs and answers. An upward trend is observed in all metrics, indicating that AZR implicitly optimizes for these qualities as training progresses.\\n\\n![](_page_34_Figure_1.jpeg)\\n\\n![](_page_34_Figure_2.jpeg)\\n\\n<span id=\"page-34-0\"></span>*Figure 28.* **Absolute Zero Reasoner-base-7b OOD Performance Breakdown.**\\n\\n![](_page_35_Figure_1.jpeg)\\n\\n![](_page_35_Figure_2.jpeg)\\n\\n<span id=\"page-35-0\"></span>*Figure 29.* **Absolute Zero Reasoner-Coder-7b OOD Performance Breakdown.**\\n\\n![](_page_36_Figure_1.jpeg)\\n\\n![](_page_36_Figure_2.jpeg)\\n\\n<span id=\"page-36-0\"></span>*Figure 30.* **Absolute Zero Reasoner-base-14b OOD Performance Breakdown.**\\n\\n![](_page_37_Figure_1.jpeg)\\n\\n**MATH REASONING**\\n\\n<span id=\"page-37-1\"></span>*Figure 31.* **Absolute Zero Reasoner-Coder-14b OOD Performance Breakdown.** Figure 31. **Absolute Zero Reasoner-Coder-14b OOD Performance Breakdown.**\\n\\n<think> Design an absolutely ludicrous and convoluted Python function that is extremely difficult to deduce the output from the input, designed to keep machine learning models such as Snippi guessing and your peers puzzling. *!*\u2192 *!*\u2192 The aim is to outsmart all these groups of intelligent machines and less intelligent humans. This *!*<sup>\u2192</sup> is for the brains behind the future. </think> - Absolute Zero Reasoner-Llama3.1-8b @ step 132\\n\\n<span id=\"page-37-0\"></span>Figure 32. **Absolute Zero Reasoner \u2013Llama3.1-8B \"Uh-oh Moment.\"** This example highlights an unexpected and potentially unsafe reasoning chain generated by our Absolute Zero Reasoner\u2013Llama3.1-8B model during training. Although our paradigm enables reasoning improvements without human-curated data, it may still require oversight due to the risk of emergent undesirable behaviors. *Figure 32.* **Absolute Zero Reasoner \u2013 Llama3.1-8B \"Uh-oh Moment.\"** This example highlights an unexpected and potentially unsafe reasoning chain generated by our Absolute Zero Reasoner\u2013Llama3.1-8B model during training. Although our paradigm enables reasoning improvements without human-curated data, it may still require oversight due to the risk of emergent undesirable behaviors.\\n\\nA conversation between User and Assistant. The user asks a question, and the Assistant solves it. The assistant first thinks about the reasoning process in the mind and then provides the user with the answer. The reasoning process and answer are enclosed within <think> </think> and <answer> </answer> tags, respectively, i.e., <think> reasoning process here </think> <answer> answer here </answer>. *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 User: {TASK\\\\_INSTRUCTION}\\n\\nAssistant: <think>\\n\\n<span id=\"page-38-0\"></span>Figure 33. **Deepseek R1 Template.** All our models were trained using the default Deepseek R1 template. *Figure 33.* **Deepseek R1 Template.** All our models were trained using the default Deepseek R1 template. ## Task: Create a Python Code Snippet (where custom classes are allowed, which should be defined *!*<sup>\u2192</sup> at the top of the code snippet) with one Matching Input Using the reference code snippets provided below as examples, design a new and unique Python code snippet that demands deep algorithmic reasoning to deduce one possible input from a given output. Your submission should include both a code snippet and test input pair, where the input will be plugged into the code snippet to produce the output, which that function output be given to a test subject to come up with any input that will produce the same function output. This is meant to be an I.Q. test. *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 ### Code Requirements: - Name the entry function `f` (e.g., `def f(...): ...`), you can have nested definitions inside *!*<sup>\u2192</sup> `f` - Ensure the function returns a value - Include at least one input parameter - Make the function deterministic - Make the snippet require state tracking across multiple data transformations, ensuring the task *!*<sup>\u2192</sup> requires long multi step reasoning - AVOID THE FOLLOWING: \\\\* Random functions or variables \\\\* Date/time operations \\\\* I/O operations (reading files, network requests) \\\\* Printing or logging \\\\* Any external state - Ensure execution completes within 10 seconds on a modern CPU - All imports and class definitions should be at the very top of the code snippet - The snippet should end with a return statement from the main function `f`, anything after will *!*<sup>\u2192</sup> be removed ### Input Requirements: - Provide exactly one test input for your function - Format multiple arguments with commas between them - Remember to add quotes around string arguments ### Formatting: - Format your code with: ```python def f(...): # your code here return ... ``` - Format your input with: ```input arg1, arg2, ... ``` ### Example Format: ```python def f(name: str, info: dict): # code logic here return result ``` ```input \\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}} ``` ### Evaluation Criteria: - Executability, your code should be executable given your input - Difficulty in predicting the output from your provided input and code snippet. Focus on either algorithmic reasoning or logic complexity. For example, you can define complex data structure classes and operate on them like trees, heaps, stacks, queues, graphs, etc, or use complex control flow, dynamic programming, recursions, divide and conquer, greedy, backtracking, etc *!*\u2192 *!*\u2192 *!*\u2192 - Creativity, the code needs to be sufficiently different from the provided reference snippets - Restricted usage of certain keywords and packages, you are not allowed to use the following *!*<sup>\u2192</sup> words in any form, even in comments: {LIST\\\\_OF\\\\_FORBIDDEN\\\\_PACKAGES} First, carefully devise a clear plan: e.g., identify how your snippet will be challenging, distinct from reference snippets, and creative. Then, write the final code snippet and its inputs. *!*\u2192 *!*\u2192 ### Reference Code Snippets:\\n\\n> <span id=\"page-39-0\"></span>Figure 34. **Program Input Abduction Task\u2014Problem Proposal Instruction.** *Figure 34.* **Program Input Abduction Task\u2014Problem Proposal Instruction.**\\n\\n{CODE\\\\_REFERENCES\\\\_FROM\\\\_BUFFER}\\n\\n## Task: Create a New Python Code Snippet (where custom classes are allowed, which should be *!*<sup>\u2192</sup> defined at the top of the code snippet) with one Matching Input Using the reference code snippets provided below as examples, design a new and unique Python code snippet that demands deep algorithmic reasoning to deduce the output from the input. Your submission should include a code snippet and a test input pair, where the input will be plugged into the code snippet to produce the output. The input will be given to a test subject to deduce the output, which is meant to be an I.Q. test. *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 ### Code Requirements: - Name the entry function `f` (e.g., `def f(...): ...`), you can have nested definitions inside *!*<sup>\u2192</sup> `f` - Ensure the function returns a value - Include at least one input parameter - Make the function deterministic - Make the snippet require state tracking across multiple data transformations, ensuring the task *!*<sup>\u2192</sup> requires long multi step reasoning - AVOID THE FOLLOWING: \\\\* Random functions or variables \\\\* Date/time operations \\\\* I/O operations (reading files, network requests) \\\\* Printing or logging \\\\* Any external state - Ensure execution completes within 10 seconds on a modern CPU - All imports and class definitions should be at the very top of the code snippet - The snippet should end with a return statement from the main function `f`, anything after will *!*<sup>\u2192</sup> be removed ### Input Requirements: - Provide exactly one test input for your function - Format multiple arguments with commas between them - Remember to add quotes around string arguments ### Formatting: - Format your code with: ```python def f(...): # your code here return ... ``` - Format your input with: ```input arg1, arg2, ... ``` ### Example Format: ```python def f(name: str, info: dict): # code logic here return result ``` ```input \\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}} ``` ### Evaluation Criteria: - Executability, your code should be executable given your input - Difficulty in predicting your ```input``` from 1) your ```python``` code and 2) the deterministic ```output``` that will be obtained from your ```input```. Focus on either algorithmic reasoning or logic complexity. For example, you can define complex data structure classes and operate on them like trees, heaps, stacks, queues, graphs, etc, or use complex control flow, dynamic programming, recursions, divide and conquer, greedy, backtracking, etc *!*\u2192 *!*\u2192 *!*\u2192 *!*\u2192 - Creativity, the code needs to be sufficiently different from the provided reference snippets - Restricted usage of certain keywords and packages, you are not allowed to use the following *!*<sup>\u2192</sup> words in any form, even in comments: {LIST\\\\_OF\\\\_FORBIDDEN\\\\_PACKAGES} First, carefully devise a clear plan: e.g., identify how your snippet will be challenging, distinct from reference snippets, and creative. Then, write the final code snippet and its inputs. *!*\u2192 *!*\u2192 ### Reference Code Snippets: {CODE\\\\_REFERENCES\\\\_FROM\\\\_BUFFER}\\n\\nFigure 35. **Program Output Deduction Task\u2014Problem Generation Instruction.** *Figure 35.* **Program Output Deduction Task\u2014Problem Generation Instruction.**\\n\\n```\\n```python\\n## Task: Output {NUM_INPUTS} Inputs that can be plugged into the following Code Snippet to\\n!\u2192 produce diverse Outputs, and give a message related to the given snippet.\\nUsing the code snippet provided below, design {NUM_INPUTS} inputs that can be plugged into the\\n    code snippet to produce a diverse set of outputs. A subset of your given input and its\\n    deterministically produced outputs will be given to a test subject to deduce the function,\\n    which is meant to be an I.Q. test. You can also leave a message to the test subject to help\\n    them deduce the code snippet.\\n!\u2192\\n!\u2192\\n!\u2192\\n!\u2192\\n### Input Requirements:\\n- Provide {NUM_INPUTS} valid inputs for the code snippet\\n- For each input, format multiple arguments with commas between them\\n- Remember to add quotes around string arguments\\n- Each input should be individually wrapped in ```input``` tags\\n### Message Requirements:\\n- Leave a message to the test subject to help them deduce the code snippet\\n- The message should be wrapped in ```message``` tags\\n- The message can be in any form, can even be formed into a coding question, or a natural\\n!\u2192 language instruction what the code snippet does\\n- You cannot provide the code snippet in the message\\n### Formatting:\\n- Format your input with:\\n```input\\narg1, arg2, ...\\n```\\n### Example Format:\\n```input\\n\\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n```input\\n\\'Sammy\\', {{\\'age\\': 37, \\'city\\': \\'Los Angeles\\'}}\\n```\\n### Evaluation Criteria:\\n- Executability, your code should be executable given your inputs\\n- Coverage, the inputs and outputs should cover the whole input space of the code snippet, able\\n!\u2192 to deduce the code snippet from the inputs and outputs\\n- Creativity, the inputs need to be sufficiently different from each other\\n- The overall selection of inputs and message combined should be challenging for the test\\n!\u2192 subject, but not impossible for them to solve\\nFirst, carefully devise a clear plan: e.g., understand the code snippet, then identify how your\\n    proposed inputs have high coverage, and why the inputs will be challenging and creative.\\n    Then, write the inputs and message. Remember to wrap your inputs in ```input``` tags, and\\n    your message in ```message``` tags.\\n!\u2192\\n!\u2192\\n!\u2192\\n### Code Snippet:\\n```python\\n{SNIPPET_FROM_BUFFER}\\n```\\n```\\n```\\n<span id=\"page-41-0\"></span>Figure 36. **Program Induction Task\u2014Problem Proposal Instruction.** *Figure 36.* **Program Induction Task\u2014Problem Proposal Instruction.**\\n\\n```\\n```python\\n# Task: Provide One Possible Input of a Python Code Snippet Given the Code and Output\\nGiven the following Code Snippet and the Output, think step by step then provide one possible\\n    input that produced the output. The input needs to be wrapped in ```input``` tags. Remember\\n    if an argument is a string, wrap it in quotes. If the function requires multiple arguments,\\n    separate them with commas.\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Snippet:\\n```python\\n{SNIPPET}\\n```\\n# Output:\\n```output\\n{OUTPUT}\\n```\\n# Output Format:\\n```input\\narg1, arg2, ...\\n```\\n# Example Output:\\n```input\\n\\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n# Task: Provide One Possible Input of a Python Code Snippet Given the Code and Output\\nGiven the following Code Snippet and the Output, think step by step then provide one possible\\n    input that produced the output. The input needs to be wrapped in ```input``` tags. Remember\\n    if an argument is a string, wrap it in quotes. If the function requires multiple arguments,\\n    separate them with commas.\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Snippet:\\n```python\\n{SNIPPET}\\n```\\n# Output:\\n```output\\n{OUTPUT}\\n```\\n# Output Format:\\n```input\\narg1, arg2, ...\\n```\\n# Example Output:\\n```input\\n\\'John\\', {{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n```\\n```\\nFigure 37. **Program Input Abduction Task\u2014Problem Solving Prompt.** *Figure 37.* **Program Input Abduction Task\u2014Problem Solving Prompt.** Figure 37. **Program Input Abduction Task\u2014Problem Solving Prompt.**\\n\\n```\\n```python\\n# Task: Deduce the Output of a Python Code Snippet Given the Code and Input\\nGiven the following Code Snippet and the Input, think step by step then deduce the output that\\n    will be produced from plugging the Input into the Code Snippet. Put your output in\\n    ```output``` tags. Remember if the output is a string, wrap it in quotes. If the function\\n    returns multiple values, remember to use a tuple to wrap them.\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Snippet:\\n```python\\n{SNIPPET}\\n```\\n# Input:\\n```input\\n{INPUT}\\n```\\n# Example Output:\\n```output\\n{{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n# Task: Deduce the Output of a Python Code Snippet Given the Code and Input\\nGiven the following Code Snippet and the Input, think step by step then deduce the output that\\n    will be produced from plugging the Input into the Code Snippet. Put your output in\\n    ```output``` tags. Remember if the output is a string, wrap it in quotes. If the function\\n    returns multiple values, remember to use a tuple to wrap them.\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Snippet:\\n```python\\n{SNIPPET}\\n```\\n# Input:\\n```input\\n{INPUT}\\n```\\n# Example Output:\\n```output\\n{{\\'age\\': 20, \\'city\\': \\'New York\\'}}\\n```\\n```\\n```\\n![](_page_42_Figure_4.jpeg)\\n\\n```\\n```python\\n# Task: Deduce the Function that Produced the Outputs from the Inputs\\nGiven a set of input/output pairs and a message that describes the function, think through the\\n    problem step by step to deduce a general code snippet. This code should produce the hidden\\n    outputs from the hidden inputs, matching the original data-generating code that created the\\n    input/output pairs. Place your final answer inside python tags! It may be helpful to work\\n    through each input/output pair individually to test your function. If your function doesn\\'t\\n    work as expected, revise it until it does. The final code snippet will be used to evaluate\\n    your response, which is wrapped in ```python``` tags.\\n!\u2192\\n!\u2192\\n!\u2192\\n!\u2192\\n!\u2192\\n!\u2192\\n# Code Requirements:\\n- Name the entry function `f` (e.g., `def f(...): ...`), you can have nested definitions inside\\n!\u2192 `f`\\n- Ensure the function returns a value\\n- Include at least one input parameter\\n- Make the function deterministic\\n- AVOID THE FOLLOWING:\\n  * Random functions or variables\\n  * Date/time operations\\n  * I/O operations (reading files, network requests)\\n  * Printing or logging\\n  * Any external state\\n- Ensure execution completes within 10 seconds on a modern CPU\\n- All imports and class definitions should be at the very top of the code snippet\\n- The snippet should end with a return statement from the main function `f()`, anything after\\n!\u2192 will be removed\\n# Input and Output Pairs:\\n{INPUT_OUTPUT_PAIRS}\\n# Message:\\n```message\\n{MESSAGE}\\n```\\n# Example Output:\\n```python\\ndef f(a):\\n    return a\\n```\\nName your entry function `f()`!!!\\n```\\n```\\n<span id=\"page-43-0\"></span>![](_page_43_Figure_2.jpeg)\\n\\n#### **Task: Manual Constructed Sudoku Abduction Task**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-31-2\\\\\"></span>**C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 4, \"title\": \"**Task: Manual Constructed Sudoku Abduction Task**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Model Output:**\\n\\nis not valid, \\'g\\\\_0\\' returns \\'False\\'.\\n\\n- The masked board is then returned.\\n\\nwhat it does. Let\\'s break down the function step by step:\\n\\ncomplete board, and \\'f\\' masked 51 random positions.\\n\\n[\"3\", \"4\", \"5\", \"2\", \"8\", \"6\", \"1\", \"7\", \"9\"] ] \"\\'\\n\\nboard will produce the given output.\\n\\n\"8\", \"6\", \"1\", \"7\", \"9\"] ] \"\\'\\n\\nsuch that after masking 51 positions, we get the output shown.\\n\\n```\\n```python\\nModel Input: Here is the function f and the output: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\\n[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\\n[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\\n[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ], please predict the input.\\nimport random\\nfrom typing import List\\nimport copy\\ndef g_0(board: List[List[str]]) -> bool:\\n    def is_valid_block(block):\\n        return sorted(block) == [str(i) for i in range(1, 10)]\\n    for row in board:\\n        if not is_valid_block(row):\\n             return False\\n    for col in zip(*board):\\n        if not is_valid_block(col):\\n             return False\\n    for box_row in range(0, 9, 3):\\n        for box_col in range(0, 9, 3):\\n             block = [\\n                 board[r][c]\\n                 for r in range(box_row, box_row + 3)\\n                 for c in range(box_col, box_col + 3)\\n             ]\\n             if not is_valid_block(block):\\n                 return False\\n    return True\\ndef f(board: List[List[str]]) -> List[List[str]]:\\n    for i in range(9):\\n        for j in range(9):\\n             if board[i][j] == \".\":\\n                 raise ValueError(\"Invalid board\")\\n    num_to_mask = 51\\n    if not g_0(board):\\n        raise ValueError(\"Invalid board\")\\n    masked_board = copy.deepcopy(board)\\n    all_positions = [(i, j) for i in range(9) for j in range(9)]\\n    random.shuffle(all_positions)\\n    for i, j in all_positions[:num_to_mask]:\\n        masked_board[i][j] = \".\"\\n    return masked_board\\n                                            45\\n```\\n```\\nTo determine the input that produced the given output, we need to analyze the function \\'f\\' and understand\\n\\n1. \\\\*\\\\*Input Validation in \\'g\\\\_0\\'\\\\*\\\\*: - The function \\'g\\\\_0\\' checks if the given board is valid. - A board is valid if each row, each column, and each 3x3 subgrid contains the digits 1 through 9 exactly once. - If the board\\n\\n2. \\\\*\\\\*Input Validation in \\'f\\'\\\\*\\\\*: - The function \\'f\\' frst checks if there are any \".\" in the board. If there are, it\\n\\n3. \\\\*\\\\*Masking the Board\\\\*\\\\*: - If the board is valid (i.e., \\'g\\\\_0(board)\\' returns \\'True\\'), the function \\'f\\' proceeds to mask the board. - It creates a copy of the board and then randomly selects 51 positions to mask with \".\".\\n\\n\"\\' We can see that the board has 51 positions masked with \".\". Therefore, the input board must have been a\\n\\nLet\\'s construct a complete board that, when masked, can produce the given output. We need to fnd a board\\n\\nHere is a complete board that matches the structure of the output: \"\\'python [ [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"], [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"], [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"], [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"], [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"], [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"], [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"], [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"],\\n\\n1. The board is complete with no \".\". 2. The board is valid because each row, each column, and each 3x3 subgrid contains the digits 1 through 9 exactly once. 3. The function \\'f\\' will mask 51 random positions. Given the random nature of the masking, we need to ensure that the positions masked match the positions of \".\" in the output. Since the positions are random, we can assume that the function \\'f\\' with this complete\\n\\nTherefore, the input that produced the output is: \"\\'input [ [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"], [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"], [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"], [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"], [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"], [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"], [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"], [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"], [\"3\", \"4\", \"5\", \"2\",\\n\\nFigure 40. **Vibe Check 1: Sudoku.**\\n\\nGiven the output: \"\\'output [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\n\\nraises a \\'ValueError\\'. - This means the input board to \\'f\\' must be a complete board with no \".\".\\n\\nLet\\'s verify that this board, when passed to the function \\'f\\', produces the given output.\\n\\n[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ], please predict the input.\\n\\n**Model Input:** Here is the function f and the output: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\\n\\n# **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Task: Manual Constructed Sudoku Abduction Task**\\n\\nTo determine the input that produced the given output, we need to analyze the function \\'f\\' and understand what it does. Let\\'s break down the function step by step:\\n\\n1. \\\\*\\\\*Input Validation in \\'g\\\\_0\\'\\\\*\\\\*: - The function \\'g\\\\_0\\' checks if the given board is valid. - A board is valid\\n\\nif each row, each column, and each 3x3 subgrid contains the digits 1 through 9 exactly once. - If the board is not valid, \\'g\\\\_0\\' returns \\'False\\'.\\n\\n2. \\\\*\\\\*Input Validation in \\'f\\'\\\\*\\\\*: - The function \\'f\\' frst checks if there are any \".\" in the board. If there are, it raises a \\'ValueError\\'. - This means the input board to \\'f\\' must be a complete board with no \".\".\\n\\n3. \\\\*\\\\*Masking the Board\\\\*\\\\*: - If the board is valid (i.e., \\'g\\\\_0(board)\\' returns \\'True\\'), the function \\'f\\' proceeds to mask the board. - It creates a copy of the board and then randomly selects 51 positions to mask with \".\". - The masked board is then returned.\\n\\nGiven the output: \"\\'output [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] \"\\' We can see that the board has 51 positions masked with \".\". Therefore, the input board must have been a complete board, and \\'f\\' masked 51 random positions.\\n\\nLet\\'s construct a complete board that, when masked, can produce the given output. We need to fnd a board such that after masking 51 positions, we get the output shown.\\n\\nHere is a complete board that matches the structure of the output: \"\\'python [ [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"], [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"], [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"], [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"], [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"], [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"], [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"], [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"], [\"3\", \"4\", \"5\", \"2\", \"8\", \"6\", \"1\", \"7\", \"9\"] ] \"\\'\\n\\nLet\\'s verify that this board, when passed to the function \\'f\\', produces the given output.\\n\\n1. The board is complete with no \".\". 2. The board is valid because each row, each column, and each 3x3 subgrid contains the digits 1 through 9 exactly once. 3. The function \\'f\\' will mask 51 random positions. Given the random nature of the masking, we need to ensure that the positions masked match the positions of \".\" in the output. Since the positions are random, we can assume that the function \\'f\\' with this complete\\n\\nboard will produce the given output.\\n\\nTherefore, the input that produced the output is: \"\\'input [ [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"], [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"], [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"], [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"], [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"], [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"], [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"], [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"], [\"3\", \"4\", \"5\", \"2\", \"8\", \"6\", \"1\", \"7\", \"9\"] ] \"\\'\\n\\n<span id=\"page-45-0\"></span>Figure 40. **Vibe Check 1: Sudoku.** *Figure 40.* **Vibe Check 1: Sudoku Solver.** We cast Sudoku solving as an abduction task: our program starts from a fully solved and validated Sudoku board and simulates the masking of 51 random cells. The masked board is then presented as output, and the model is tasked with inferring the original input \u2014 effectively solving the puzzle backwards. An example solution is shown above, where AZR-Coder-14b verifies its initial guess before correctly answering. Generation parameters: temperature=0.6.\\n\\n46\\n\\n```\\n```python\\nTask: Manually Constructed Sum Product Game Solve Abduction Task\\nModel Input: Here is the function f and the output: \\'True\\', please predict the input.\\ndef g_3():\\n    return [(x, y) for x in range(2, 101) for y in range(x + 1, 101) if x + y <= 100]\\ndef g_2(pairs):\\n    d = {}\\n    for (x, y) in pairs:\\n        s = x + y\\n        d.setdefault(s, []).append((x, y))\\n    return d\\ndef g_1(pairs):\\n    d = {}\\n    for (x, y) in pairs:\\n        p = x * y\\n        d.setdefault(p, []).append((x, y))\\n    return d\\ndef g_0():\\n    pairs = g_3()\\n    sum_dict = g_2(pairs)\\n    prod_dict = g_1(pairs)\\n    allowed_sums = [s for s, candidate_pairs in sum_dict.items() \\\\\\n    if all(len(prod_dict[x * y]) > 1 for (x, y) in candidate_pairs)]\\n    candidates_after_S = [pair for pair in pairs if pair[0] + pair[1] in allowed_sums]\\n    new_prod_dict = g_1(candidates_after_S)\\n    unique_products = {prod: pair_list for prod, pair_list in new_prod_dict.items() \\\\\\n    if len(pair_list) == 1}\\n    final_candidates = []\\n    for s in allowed_sums:\\n        valid_pairs = [pair for pair in candidates_after_S \\\\\\n        if pair[0] + pair[1] == s and (pair[0] * pair[1]) in unique_products]\\n        if len(valid_pairs) == 1:\\n            final_candidates.append(valid_pairs[0])\\n    return sorted(set(final_candidates))\\ndef f(x, y):\\n    if not (isinstance(x, int) and isinstance(y, int)):\\n        return False\\n    if x <= 1 or y <= 1 or y <= x or (x + y) > 100:\\n        return False\\n    final_candidates = g_0()\\n    return len(final_candidates) == 1 and final_candidates[0] == (x, y)\\n```\\n```\\niterates through the list. Then, it checks for each pair of accumulated sums if their diference equals the target. If such a pair is found, it returns the accumulated sum at the frst index of the pair.\\n\\nTo fnd one possible input that produces the output 1, we need to fnd a scenario where the diference between any two accumulated\\\\_values equals the target, and the frst accumulated\\\\_values that\\n\\nFigure 41. **Solve Abduction Task Example.** A more detailed version of the example shown in main Figure 7. The model is solving an\\n\\nSince no pair satisfes the condition, the function will not return any value. This doesn\\'t match our output. Let\\'s try another example.\\n\\nGiven the complexity and the fact that no simple example seems to work, let\\'s try a more complex scenario:\\n\\nThe pair (i=1, j=2) satisfes the condition, and the function returns the frst accumulated value in this pair, which is 3. This still doesn\\'t match our output.\\n\\nThe pair (i=1, j=2) satisfes the condition, and the function returns the frst accumulated value in this pair, which is 1. This matches our output.\\n\\n**Model Output:**\\n\\nsatisfes this condition is 1. Let\\'s consider a simple example: -numbers = [1, 2] -target = 1\\n\\nConsider:\\n\\n-numbers = [1, 0] -target = 1 Step-by-step calculation:\\n\\n...(shortened)\\n\\n-numbers = [2, -1, 1] -target = 1 Step-by-step calculation:\\n\\nHere\\'s the step-by-step calculation:\\n\\n1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 2 = 3, accumulated\\\\_values = [1, 3] -Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target)\\n\\n1. current\\\\_sum = 0 + 1 = 1, accumulated\\\\_values = [1] 2. current\\\\_sum = 1 + 0 = 1, accumulated\\\\_values = [1, 1] -Check for pair (i=0, j=1): 1 - 1 = 0 (not equal to target) -Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target) -Check for pair (i=1, j=1): 1 - 1 = 0 (not equal to target)\\n\\n1. current\\\\_sum = 0 + 2 = 2, accumulated\\\\_values = [2] 2. current\\\\_sum = 2 - 1 = 1, accumulated\\\\_values = [2, 1] 3. current\\\\_sum = 1 + 1 = 2, accumulated\\\\_values = [2, 1, 2] -Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target) -Check for pair (i=0, j=2): 2 - 2 = 0 (not equal to target) -Check for pair (i=1, j=2): 2 - 1 = 1 (equal to target)\\n\\nabduction task (predict input).\\n\\nTherefore, one possible input that could produce the output 1 is: [2, -1, 1], 1\\n\\n# **Model Output:**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"**Model Output:**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nthe function \\'f(x, y)\\' returns \\'True\\' if the following conditions are met:\\n\\n1. \\'x\\' and \\'y\\' are both integers.\\n\\n2. \\'x\\' and \\'y\\' satisfy \\'1 < x < y\\' and \\'x + y <= 100\\'.\\n\\n3. The fnal candidates after applying the conditions in \\'g\\\\_0\\' are exactly one pair, and that pair is \\'(x, y)\\'.\\n\\nLet\\'s analyze the function \\'g\\\\_0\\' step by step to understand what it does:\\n\\n1. \\'pairs = g\\\\_3()\\' generates all pairs \\'(x, y)\\' such that \\'2 <= x < y <= 100\\' and \\'x + y <= 100\\'.\\n\\n**Task: Manually Constructed Sum Product Game Solve Abduction Task**\\n\\n**Model Input:** Here is the function f and the output: \\'True\\', please predict the input.\\n\\n2. \\'sum\\\\_dict = g\\\\_2(pairs)\\' creates a dictionary where the keys are the sums of the pairs and the values are lists of pairs that add up to that sum.\\n\\n3. \\'prod\\\\_dict = g\\\\_1(pairs)\\' creates a dictionary where the keys are the products of the pairs and the values are lists of pairs that\\n\\nhave that product.\\n\\n4. \\'allowed\\\\_sums = [s for s, candidate\\\\_pairs in sum\\\\_dict.items() if all(len(prod\\\\_dict[x \\\\* y]) > 1 for (x, y) in candidate\\\\_pairs)]\\' flters out the sums \\'s\\' for which all pairs \\'(x, y)\\' that add up to \\'s\\' have more than one pair with the same product.\\n\\n5. \\'candidates\\\\_after\\\\_S = [pair for pair in pairs if pair[0] + pair[1] in allowed\\\\_sums]\\' flters out the pairs whose sum is in \\'allowed\\\\_sums\\'.\\n\\n6. \\'new\\\\_prod\\\\_dict = g\\\\_1(candidates\\\\_after\\\\_S)\\' creates a new product dictionary using the fltered pairs.\\n\\n7. \\'unique\\\\_products = prod: pair\\\\_list for prod, pair\\\\_list in new\\\\_prod\\\\_dict.items() if len(pair\\\\_list) == 1\\' creates a dictionary of products that have exactly one pair.\\n\\n8. \\'fnal\\\\_candidates = []\\' initializes a list of fnal candidates.\\n\\n9. The loop \\'for s in allowed\\\\_sums:\\' iterates over each sum in \\'allowed\\\\_sums\\' and checks if there is exactly one pair \\'(x, y)\\' such that \\'x + y = s\\' and \\'x \\\\* y\\' is in \\'unique\\\\_products\\'. If so, this pair is added to \\'fnal\\\\_candidates\\'. 10. The function returns \\'sorted(set(fnal\\\\_candidates))\\', which should be a list containing exactly one pair if the conditions are met.\\n\\nGiven that the output is \\'True\\', it means that there is exactly one pair \\'(x, y)\\' that satisfes all the conditions. Let\\'s identify this pair.\\n\\nTo do this, we need to understand the mathematical conditions and constraints: 1. \\'1 < x < y\\' and \\'x + y <= 100\\'.\\n\\n2. The pair \\'(x, y)\\' must be the only pair whose sum is in \\'allowed\\\\_sums\\' and whose product is unique among the pairs with the same sum.\\n\\nBy analyzing the constraints and the nature of the problem, we can deduce that the pair \\'(x, y)\\' must be such that the sum \\'x + y\\' is unique in the sense that all pairs adding up to this sum have products that are not unique, except for this pair.\\n\\nAfter detailed analysis or by running the code with diferent values, we fnd that the pair \\'(x, y) = (4, 13)\\' satisfes all the conditions. Let\\'s verify:\\n\\n1. \\'1 < 4 < 13\\' and \\'4 + 13 = 17 <= 100\\'.\\n\\n\"\\'\\n\\n2. We need to check the \\'allowed\\\\_sums\\' and the uniqueness of the product \\'4 \\\\* 13 = 52\\'.\\n\\nBy running the code or logical deduction, we can confrm that \\'(4, 13)\\' is the only pair that satisfes all the conditions.\\n\\nTherefore, the input that produced the output \\'True\\' is: \"\\'input (4, 13)\\n\\n<span id=\"page-47-0\"></span>Figure 41. **Solve Abduction Task Example.** A more detail[ed version of the exam](https://en.wikipedia.org/wiki/Sum_and_Product_Puzzle)ple shown in main Figure 7. The model is solving an abduction task (predict input). 48 *Figure 41.* **Vibe Check 2: Sum Product Game.** We cast the Sum-Product Game as an abduction task, where when the constraints of the game are satisfied, function \\'f\\' returns True, return False otherwise. AZR-Coder-14b was able to first analyze the complicated constraints, identify candidate solution and verify. Generation parameters: temperature=0.6, top\\\\_p=0.95.\\n\\n# <span id=\"page-48-0\"></span>**D. Alternative Approaches Considered**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-0\\\\\"></span>**D. Alternative Approaches Considered**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nIn this section, we share many of the approaches we tried that did not prove to be particularly helpful for Absolute Zero Reasoner. However, we believe it is especially valuable to share these findings with the community, as they are crucial for guiding future research. Below, we outline each of the additional methods we explored during the development of our project.\\n\\n# <span id=\"page-48-1\"></span>**D.1. Error Deduction Task**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-1\\\\\"></span>**D.1. Error Deduction Task**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nSince programming languages often have error messages, and these messages contain a lot of information about how someone might expect a program to run, we also came up with another task domain: allowing the learner to propose a program *that will produce an error*, and requiring the solver to *deduce what kind of error is raised* when executing this code. We experimented with this additional task alongside the induction (*f*), deduction (*o*), and abduction (*i*) tasks. Unfortunately, we did not observe noticeable changes in downstream performance with this additional task and since it requires more computational resources than our AZR setup, we decided not to incorporate it into our final version. However, we believe further thorough investigation of this is well deserved.\\n\\n# <span id=\"page-48-2\"></span>**D.2. Composite Functions as Curriculum Learning**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-2\\\\\"></span>**D.2. Composite Functions as Curriculum Learning**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nOne valuable property we can leverage from programming languages is the ability to compose functions\u2014that is, to define a function as a composite of other functions, i.e., *f*(*g*(*x*)). In our setting, when generating a program, we can not only require the output to be a valid program but also constrain the LLM to utilize a predefined set of programs within its main function. For example, if the target program to be generated is *<sup>f</sup>*(\u00b7), we can sample a set of previously generated programs {*g*\\\\_0*, . . . , gc*} from <sup>D</sup>, and force a valid program to be *<sup>f</sup>*(*g*\\\\_0*,* \u00b7 \u00b7 \u00b7 *, gc, i*).\\n\\nSince all programs are generated by the LLM itself, this setup allows the model to bootstrap from its earlier generations, automatically increasing the complexity of the generated programs. We interpret this mechanism as a form of curriculum learning: earlier programs in the AZR self-play loop tend to be simpler, and as the loop progresses, they become increasingly complex. By composing newer programs from progressively more difficult earlier ones, the resulting programs naturally inherit this growing difficulty, which in turn challenges the solver step.\\n\\nFor implementation, in generating tasks for abduction and deduction, we begin by sampling a binary decision from a binomial distribution with *p* = 0*.*5. This determines whether the generated program should be a simple program or a composite one. If the sample is 0, we prompt the LLM to generate a standard program along with a corresponding input. If the sample is 1, we prompt the LLM to generate a composite program. To construct the composite, we first sample an integer *<sup>c</sup>* \u223c U(1*,* 3), then uniformly select *<sup>c</sup>* programs from the dataset <sup>D</sup> that are not themselves composite programs. Finally, we prompt the LLM to generate a valid program that incorporates {*g*\\\\_0*, . . . , gc*} as subcomponents, ensuring it composes these selected programs meaningfully. We additionally filter programs that did not utilize all the *c* programs.\\n\\nHowever, we did not observe a significant difference when using this more complex curriculum compared to our simpler and more effective approach. One failure mode we encountered was that the model often defaulted to simply returning \"g(x)\", effectively learning *f*(*g*(*x*)) = *g*(*x*), which failed to introduce any additional difficulty. This trivial behavior undermined the intended challenge, leading us to deprioritize further exploration in this direction. While it may be possible to design a stricter reward mechanism\u2014such as enforcing *<sup>f</sup>*(*g*(*x*)) \u0338<sup>=</sup> *<sup>g</sup>*(*x*) by executing the code via a Python interpreter and penalizing such shortcuts\u2014we leave this to future work.\\n\\n# <span id=\"page-48-3\"></span>**D.3. Toying with the Initial** *p*(*z*)\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-3\\\\\"></span>**D.3. Toying with the Initial** *p*(*z*)\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe investigated a setting where the initial seed buffer (see Section [3.3.1](#page-5-2) on how we generated these), *i.e*. *p*(*z*) in Equation [\\\\(3\\\\)](#page-3-2), is not self-generated by the base model, but instead sourced from the [LeetCode Dataset.](https://huggingface.co/datasets/newfacade/LeetCodeDataset) We only modified this component and ran AZR using the same procedure as before, continuing to add new valid programs to the initialized buffer. We observed an increase in initial performance on coding benchmarks; however, the performance plateaued at roughly the same level after additional training steps, compared to our official AZR setup. Interestingly, math performance was lower than in the official AZR setup, pointing towards that on-policy data may be more beneficial to the learner to bootstrap from for mathematical reasoning. We believe that exploring different strategies for initializing and updating *p*(*z*) is an important and exciting direction for future research. We briefly explored different strategies for sampling reference code, ultimately settling on uniform sampling for its simplicity, though we also experimented with recency-based sampling and observed potential collapse.\\n\\n# <span id=\"page-48-4\"></span>**D.4. Extra Rewards**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-4\\\\\"></span>**D.4. Extra Rewards**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\n**Complexity Rewards.** Code complexity is well studied in software science and could potentially be a good proxy for measuring how hard it is to infer the properties of a piece of code for our reasoning learner. Therefore, for the problem proposer, we can add various measures of complexity\u2014such as Cyclomatic Complexity [\\\\(Ebert et al.,](#page-14-15) [2016\\\\)](#page-14-15), maintainability, etc.\u2014to the reward function to incentivize the proposer to produce more complex programs. For illustration purposes, we tried using the Maintainability measure and the Halstead complexity measure [\\\\(Halstead,](#page-14-16) [1977\\\\)](#page-14-16) as intrinsic rewards. Concretely, we used the complexipy and Radon packages [\\\\(Lopez,](#page-15-18) [2025;](#page-15-18) [Canal,](#page-13-12) [2023\\\\)](#page-13-12) to implement the respective metrics. These are then served as intrinsic rewards during the AZR self-play phase.\\n\\n**Diversity Rewards.** We also attempted using diversity rewards to . Inspired by DiveR-CT [\\\\(Zhao et al.,](#page-18-2) [2025a\\\\)](#page-18-2), we incorporate *code edit distance* as an intrinsic reward. Specifically, we treat the reference programs shown in the prompt as anchors and compute the average code edit distance between the generated program and these anchors. This serves as a measure of diversity in the generated output. Additionally, we explored another diversity-based reward inspired by the notion of *surprise* [\\\\(Zhao et al.,](#page-18-4) [2022\\\\)](#page-18-4). In this approach, we construct a probability distribution over previously encountered input/output pairs that the solver has answered. The reward is then defined as <sup>1</sup> <sup>\u2212</sup> *<sup>p</sup>*(input/output), where *<sup>p</sup>* denotes the empirical probability of a particular input or output. While both strategies were evaluated in our experiments, we did not observe a significant difference in performance. However, we believe this aspect warrants deeper investigation, as diversity rewards remain a promising avenue for strengthening AZR further.\\n\\n**Reward Aggregation.** We tested several ways on how to combine rewards for the proposer and discriminator. First, we separate the reward into extrinsic reward *<sup>r</sup>*extrinsic and a set of intrinsic reward(s) *<sup>I</sup>* <sup>=</sup> {*ri*}, and tested the following strategies to combine them into a single reward,\\n\\n$$r = r\\\\_{\\\\text{extrinsic}} + \\\\sum\\\\_{i}^{|I|} r\\\\_i,\\\\tag{11}$$\\n\\n<span id=\"page-49-1\"></span>\\n$$r = r\\\\_{\\\\text{extinsic}} \\\\cdot \\\\sum\\\\_{i}^{|\\\\mathcal{I}|} r\\\\_i,\\\\tag{12}$$\\n\\n$$r = r\\\\_{\\\\text{extrinsic}} \\\\cdot \\\\prod\\\\_{i}^{|I|} r\\\\_i,\\\\tag{13}$$\\n\\n$$r = r\\\\_{\\\\text{extrinsic}} + \\\\prod\\\\_{i}^{|\\\\mathcal{I}|} r\\\\_i. \\\\tag{14}$$\\n\\nWe found that the simple additive way of combining rewards, a.k.a Equation [\\\\(11\\\\)](#page-49-1), produced the most stable runs, possibly due to less variance.\\n\\n### <span id=\"page-49-0\"></span>**D.5. Environment Transition**\\n<!-- SECTION_BREADCRUMB: [{\"level\": 1, \"title\": \"<span id=\\\\\"page-48-4\\\\\"></span>**D.4. Extra Rewards**\", \"hash\": \"e3b0c44298fc1c14\"}, {\"level\": 3, \"title\": \"<span id=\\\\\"page-49-0\\\\\"></span>**D.5. Environment Transition**\", \"hash\": \"e3b0c44298fc1c14\"}] -->\\n\\nWe investigated how the transition function in our coding environment for the proposer. Specifically, after generating a piece of code, we can apply a transformation function on it before giving it making it an valid tuple in our dataset. We investigated two\\n\\n**Removing Comments and Docstrings** In early iterations of our experiments, we noticed that comments and docstrings were sometimes used to explicitly outline what the function was doing, or even served as a partial \"note-taking\" interleaved \"ReAct\" process [\\\\(Yao et al.,](#page-17-1) [2023\\\\)](#page-17-1) of generating code\u2014that is, the model could interleave think and action at the same time, and to make the generated code valid, it used comments to encase its thoughts (Appendix [C.3\\\\)](#page-24-0), similarly observed in DeepSeek-Prover-V2: [\\\\(Ren et al.,](#page-15-3) [2025\\\\)](#page-15-3). We then thought that to make the task harder for the solver, we should occlude this information from it. However, we observed a significant performance drop after removing all comments and docstrings. One explanation for this phenomenon is that the only \"communication\" channel between the proposer and the solver is restricted to the code itself, rather than some kind of \"message\" along with the code. These messages can potentially provide hints to the solver, thus making some otherwise impossible tasks solvable. As a result, the solver is able to learn from its experience and self-bootstrap out of certain unsolvable tasks.\\n\\n**Removing Global Variables.** We observed that some programs contain globally declared variables that may inadvertently leak information about the correct answer\u2014this issue is particularly prevalent in the input induction task generation and solving. Initially, we were concerned that such leakage might lead to wasted computation on trivial or compromised examples. To address this, we developed a systematic procedure to remove globally declared variables from the generated programs.\\n\\nHowever, after applying this cleaning step, we observed a noticeable drop in performance on our self-play reasoning tasks. One possible explanation is that the generation step is unaware of this post-processing modification; since the reward is assigned after the transition function (which includes variable removal), the model may not learn effectively from this mismatch.\\n\\nMoreover, we believe that even when answers are present, the solver still engages in nontrivial reasoning to reach a solution, potentially benefiting from this exposure. This aligns with the idea of rationalization as proposed in STaR [\\\\(Zelikman et al.,](#page-17-16) [2022\\\\)](#page-17-16), where the model pretends to not see the answer but still performs reasoning during learning. Therefore, in our final experiments, we choose not to remove globally declared variables, allowing the self-play loop to naturally incorporate and adapt to such cases.' images={'_page_0_Picture_0.jpeg': <PIL.Image.Image image mode=RGB size=311x123 at 0x75C3516A3640>, '_page_0_Figure_7.jpeg': <PIL.Image.Image image mode=RGB size=1277x477 at 0x75C3516A1420>, '_page_1_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1275x400 at 0x75C3516A1720>, '_page_3_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=621x237 at 0x75C351CBF4C0>, '_page_4_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1101x470 at 0x75C3513D94B0>, '_page_9_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1265x382 at 0x75C352BF0100>, '_page_22_Figure_8.jpeg': <PIL.Image.Image image mode=RGB size=1035x504 at 0x75C3A941EB60>, '_page_23_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1286x632 at 0x75C3A941EF80>, '_page_23_Figure_3.jpeg': <PIL.Image.Image image mode=RGB size=1286x632 at 0x75C3A941F670>, '_page_24_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1289x630 at 0x75C3A941EDD0>, '_page_24_Figure_3.jpeg': <PIL.Image.Image image mode=RGB size=1289x608 at 0x75C3A941F2E0>, '_page_33_Figure_12.jpeg': <PIL.Image.Image image mode=RGB size=1224x411 at 0x75C3A8EAC520>, '_page_34_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=257x25 at 0x75C3A8EAE440>, '_page_34_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=1290x1060 at 0x75C3A8EADE70>, '_page_35_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=252x25 at 0x75C3A8EAFCD0>, '_page_35_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=1298x1060 at 0x75C3A8EAD330>, '_page_36_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=262x26 at 0x75C3A8EAD7B0>, '_page_36_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=1296x1072 at 0x75C3A8EACEB0>, '_page_37_Figure_1.jpeg': <PIL.Image.Image image mode=RGB size=1299x1087 at 0x75C3A8EAE800>, '_page_42_Figure_4.jpeg': <PIL.Image.Image image mode=RGB size=731x38 at 0x75C3A9444910>, '_page_43_Figure_2.jpeg': <PIL.Image.Image image mode=RGB size=644x37 at 0x75C3A941D1E0>} metadata={'table_of_contents': [{'title': 'Absolute Zero: Reinforced Self-play Reasoning with Zero Data', 'heading_level': None, 'page_id': 0, 'polygon': [[53.19140625, 116.8857421875], [516.673828125, 116.8857421875], [516.673828125, 134.78680419921875], [53.19140625, 134.78680419921875]]}, {'title': '1. Introduction', 'heading_level': None, 'page_id': 1, 'polygon': [[54.498779296875, 330.064453125], [132.6796875, 330.064453125], [132.6796875, 343.35107421875], [54.498779296875, 343.35107421875]]}, {'title': '2. The Absolute Zero Paradigm', 'heading_level': None, 'page_id': 2, 'polygon': [[54.46142578125, 350.2638854980469], [215.84291076660156, 350.2638854980469], [215.84291076660156, 362.2190856933594], [54.46142578125, 362.2190856933594]]}, {'title': '2.1. Preliminaries', 'heading_level': None, 'page_id': 2, 'polygon': [[54.797607421875, 370.4440002441406], [137.44371032714844, 370.4440002441406], [137.44371032714844, 381.3531188964844], [54.797607421875, 381.3531188964844]]}, {'title': '2.2. Absolute Zero', 'heading_level': None, 'page_id': 2, 'polygon': [[54.797607421875, 614.7240142822266], [140.748046875, 614.7240142822266], [140.748046875, 625.6331176757812], [54.797607421875, 625.6331176757812]]}, {'title': '3. Absolute Zero Reasoner', 'heading_level': None, 'page_id': 3, 'polygon': [[54.61083984375, 415.1498718261719], [190.2587890625, 415.1498718261719], [190.2587890625, 427.1050720214844], [54.61083984375, 427.1050720214844]]}, {'title': '3.1. Two Roles in One: Proposer and Solver', 'heading_level': None, 'page_id': 3, 'polygon': [[54.61083984375, 568.5080108642578], [257.4219665527344, 568.5080108642578], [257.4219665527344, 579.4171142578125], [54.61083984375, 579.4171142578125]]}, {'title': '3.2. Learning Different Modes of Reasoning: Deduction, Induction, and Abduction\\nAbsolute Zero: Reinforced Self-play Reasoning with Zero Data', 'heading_level': None, 'page_id': 5, 'polygon': [[53.9384765625, 67.06463623046875], [439.451171875, 67.06463623046875], [439.451171875, 79.51507568359375], [53.9384765625, 79.51507568359375]]}, {'title': '3.3. Absolute Zero Reasoner Learning Algorithm\\n3.3. Absolute Zero Reasoner Learning Algorithm', 'heading_level': None, 'page_id': 5, 'polygon': [[54.5361328125, 483.15008544921875], [291.88543701171875, 483.15008544921875], [291.88543701171875, 499.943115234375], [54.5361328125, 499.943115234375]]}, {'title': '3.3.1. BUFFER INITIALIZATION\\nTo initialize AZR self-play, we frst generate a seed set of valid triplets using\\n3.3.1. Buffer Initialization', 'heading_level': None, 'page_id': 5, 'polygon': [[55.05908203125, 564.9101104736328], [335.7440185546875, 564.9101104736328], [335.7440185546875, 592.0727996826172], [55.05908203125, 592.0727996826172]]}, {'title': '3.3.2. Task Proposal Inputs and Buffer Management', 'heading_level': None, 'page_id': 6, 'polygon': [[54.685546875, 362.24591064453125], [308.1165771484375, 362.24591064453125], [308.1165771484375, 375.310546875], [54.685546875, 375.310546875]]}, {'title': '3.3.3. Constructing Valid Tasks', 'heading_level': None, 'page_id': 6, 'polygon': [[54.76025390625, 496.7949523925781], [208.84373474121094, 496.7949523925781], [208.84373474121094, 510.08203125], [54.76025390625, 510.08203125]]}, {'title': '3.3.4. Answer Verification', 'heading_level': None, 'page_id': 7, 'polygon': [[54.797607421875, 288.1579284667969], [184.078125, 288.1579284667969], [184.078125, 300.48046875], [54.797607421875, 300.48046875]]}, {'title': '3.3.5. Task-Relative REINFORCE++', 'heading_level': None, 'page_id': 7, 'polygon': [[54.76025390625, 362.18389892578125], [226.54920959472656, 362.18389892578125], [226.54920959472656, 374.537109375], [54.76025390625, 374.537109375]]}, {'title': '4. Experiments', 'heading_level': None, 'page_id': 7, 'polygon': [[54.498779296875, 497.7768859863281], [133.576171875, 497.7768859863281], [133.576171875, 509.7320861816406], [54.498779296875, 509.7320861816406]]}, {'title': '4.1. Experiment Setup', 'heading_level': None, 'page_id': 7, 'polygon': [[54.46142578125, 517.9570007324219], [158.96731567382812, 517.9570007324219], [158.96731567382812, 528.8661193847656], [54.46142578125, 528.8661193847656]]}, {'title': '4.2. Results', 'heading_level': None, 'page_id': 8, 'polygon': [[55.1337890625, 478.7578125], [109.072265625, 478.7578125], [109.072265625, 490.5091247558594], [55.1337890625, 490.5091247558594]]}, {'title': \"Input: [1,2,3,4,5], 5\\nModel-proposed Task Response of Predict Input\\nLet's analyze the code snippet \u2026(analysis) To find one possible input that produces \\nthe output 1, we need to find a scenario where \u2026(analysis) \\nLet's consider a simple example: numbers = [1, 2], target = 1\\nHere's the step-by-step calculation:\\n1. current_sum = 0 + 1 = 1, accumulated_values = [1]\\n2. current_sum = 1 + 2 = 3, accumulated_values = [1, 3]\\n-Check for pair (i=0, j=1): 3 - 1 = 2 (not equal to target)\\n-Check for pair (i=0, j=0): 1 - 1 = 0 (not equal to target)\\n-Check for pair (i=1, j=1): 3 - 3 = 0 (not equal to target)\\nSince no pair satisfies the condition, the function will not return any value. This \\ndoesn't match our output. Let's try another example \u2026(Tried 3 more examples) \\nGiven the complexity and the fact that no simple example seems to work, let's \\ntry a more complex scenario: numbers = [2, -1, 1], target = 1\\nStep-by-step calculation:\\n1. current_sum = 0 + 2 = 2, accumulated_values = [2]\\n2. current_sum = 2 - 1 = 1 , accumulated_values = [2, 1]\\n3. current_sum = 1 + 1 = 2, accumulated_values = [2, 1, 2]\\n- Check for pair (i=0, j=1): 1 - 2 = -1 (not equal to target)\", 'heading_level': None, 'page_id': 10, 'polygon': [[54.5361328125, 64.775390625], [533.3927612304688, 64.775390625], [533.3927612304688, 249.7578125], [54.5361328125, 249.7578125]]}, {'title': '5. Related Work', 'heading_level': None, 'page_id': 11, 'polygon': [[54.8349609375, 371.25], [139.25390625, 371.25], [139.25390625, 383.9450988769531], [54.8349609375, 383.9450988769531]]}, {'title': '6. Conclusion and Discussion', 'heading_level': None, 'page_id': 12, 'polygon': [[54.648193359375, 265.2890625], [203.5888671875, 265.2890625], [203.5888671875, 277.39202880859375], [54.648193359375, 277.39202880859375]]}, {'title': 'References', 'heading_level': None, 'page_id': 13, 'polygon': [[54.76025390625, 67.798828125], [110.48174285888672, 67.798828125], [110.48174285888672, 79.7540283203125], [54.76025390625, 79.7540283203125]]}, {'title': 'Appendix', 'heading_level': None, 'page_id': 19, 'polygon': [[53.86376953125, 67.04736328125], [105.26927947998047, 67.04736328125], [105.26927947998047, 79.7540283203125], [53.86376953125, 79.7540283203125]]}, {'title': 'Appendix Contents', 'heading_level': None, 'page_id': 19, 'polygon': [[54.01318359375, 88.171875], [156.287109375, 88.171875], [156.287109375, 101.12005615234375], [54.01318359375, 101.12005615234375]]}, {'title': 'A. Reinforcement Learning with Verifiable Rewards.', 'heading_level': None, 'page_id': 20, 'polygon': [[54.38671875, 67.798828125], [323.18865966796875, 67.798828125], [323.18865966796875, 79.7540283203125], [54.38671875, 79.7540283203125]]}, {'title': 'B. Implementation Details', 'heading_level': None, 'page_id': 20, 'polygon': [[54.498779296875, 291.08587646484375], [190.2041015625, 291.08587646484375], [190.2041015625, 303.04107666015625], [54.498779296875, 303.04107666015625]]}, {'title': 'C. More Results', 'heading_level': None, 'page_id': 21, 'polygon': [[54.087890625, 318.462890625], [138.65625, 318.462890625], [138.65625, 331.29107666015625], [54.087890625, 331.29107666015625]]}, {'title': 'C.1. Out-of-Distribution Performance Breakdown', 'heading_level': None, 'page_id': 21, 'polygon': [[54.087890625, 338.958984375], [287.3565368652344, 338.958984375], [287.3565368652344, 350.42510986328125], [54.087890625, 350.42510986328125]]}, {'title': 'C.2. In-Distribution Results', 'heading_level': None, 'page_id': 21, 'polygon': [[54.199951171875, 414.5625], [184.974609375, 414.5625], [184.974609375, 426.1640625], [54.199951171875, 426.1640625]]}, {'title': 'C.3. Interplay Between Propose and Solve Roles', 'heading_level': None, 'page_id': 21, 'polygon': [[54.31201171875, 522.84375], [277.3125, 522.84375], [277.3125, 534.0861206054688], [54.31201171875, 534.0861206054688]]}, {'title': 'Task: Propose Abduction Task', 'heading_level': None, 'page_id': 26, 'polygon': [[67.423095703125, 71.78521728515625], [211.271484375, 71.78521728515625], [211.271484375, 82.53948974609375], [67.423095703125, 82.53948974609375]]}, {'title': 'Model Input: (k random selected example programs as few-shot input)', 'heading_level': None, 'page_id': 26, 'polygon': [[66.9375, 93.5478515625], [376.822265625, 93.5478515625], [376.822265625, 104.5537109375], [66.9375, 104.5537109375]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 26, 'polygon': [[68.244873046875, 117.0791015625], [151.0576171875, 117.0791015625], [151.0576171875, 131.1024169921875], [68.244873046875, 131.1024169921875]]}, {'title': 'Task: Propose Induction Task', 'heading_level': None, 'page_id': 27, 'polygon': [[68.00311279296875, 117.45489501953125], [207.5361328125, 117.45489501953125], [207.5361328125, 128.19818115234375], [68.00311279296875, 128.19818115234375]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 27, 'polygon': [[67.833984375, 274.27545166015625], [137.20059204101562, 274.27545166015625], [137.20059204101562, 285.01873779296875], [67.833984375, 285.01873779296875]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 28, 'polygon': [[66.11572265625, 319.4631042480469], [136.40078735351562, 319.4631042480469], [136.40078735351562, 330.282958984375], [66.11572265625, 330.282958984375]]}, {'title': 'Task: Solve Deduction Task (Example 1)', 'heading_level': None, 'page_id': 29, 'polygon': [[67.31103515625, 88.1961669921875], [255.498046875, 88.1961669921875], [255.498046875, 98.988525390625], [67.31103515625, 98.988525390625]]}, {'title': 'C.4. Complexity and Diversity Metrics of AZR Proposed Tasks', 'heading_level': None, 'page_id': 31, 'polygon': [[54.685546875, 314.595703125], [347.8359375, 314.595703125], [347.8359375, 326.7811279296875], [54.685546875, 326.7811279296875]]}, {'title': 'C.5. Generated Code Complexity Dynamics Between Abd/Ded and Ind.', 'heading_level': None, 'page_id': 31, 'polygon': [[54.685546875, 461.35546875], [386.68359375, 461.35546875], [386.68359375, 473.68011474609375], [54.685546875, 473.68011474609375]]}, {'title': 'Task: Solve Deduction Task (Example 2)', 'heading_level': None, 'page_id': 32, 'polygon': [[66.9375, 101.36376953125], [254.00390625, 101.36376953125], [254.00390625, 112.1390380859375], [66.9375, 112.1390380859375]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 32, 'polygon': [[67.81330108642578, 280.2999267578125], [136.86106872558594, 280.2999267578125], [136.86106872558594, 291.0751647949219], [67.81330108642578, 291.0751647949219]]}, {'title': 'Task: Solve Deduction Task (Llama 8B)', 'heading_level': None, 'page_id': 33, 'polygon': [[66.72824096679688, 77.409423828125], [251.912109375, 77.409423828125], [251.912109375, 88.25054931640625], [66.72824096679688, 88.25054931640625]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 33, 'polygon': [[67.08599853515625, 304.85662841796875], [136.5559844970703, 304.85662841796875], [136.5559844970703, 315.69775390625], [67.08599853515625, 315.69775390625]]}, {'title': 'Task: Manual Constructed Sudoku Abduction Task', 'heading_level': None, 'page_id': 44, 'polygon': [[65.99082946777344, 70.43548583984375], [306.5485534667969, 70.43548583984375], [306.5485534667969, 81.30426025390625], [65.99082946777344, 81.30426025390625]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 45, 'polygon': [[65.14453125, 71.15625], [136.564453125, 71.15625], [136.564453125, 83.55621337890625], [65.14453125, 83.55621337890625]]}, {'title': 'Model Output:', 'heading_level': None, 'page_id': 47, 'polygon': [[64.77099609375, 71.349609375], [137.23681640625, 71.349609375], [137.23681640625, 83.586181640625], [64.77099609375, 83.586181640625]]}, {'title': 'D. Alternative Approaches Considered', 'heading_level': None, 'page_id': 48, 'polygon': [[54.2373046875, 67.482421875], [252.9580078125, 67.482421875], [252.9580078125, 79.7540283203125], [54.2373046875, 79.7540283203125]]}, {'title': 'D.1. Error Deduction Task', 'heading_level': None, 'page_id': 48, 'polygon': [[54.685546875, 132.64453125], [180.0439453125, 132.64453125], [180.0439453125, 144.7940673828125], [54.685546875, 144.7940673828125]]}, {'title': 'D.2. Composite Functions as Curriculum Learning', 'heading_level': None, 'page_id': 48, 'polygon': [[54.61083984375, 229.904296875], [291.955078125, 229.904296875], [291.955078125, 242.078125], [54.61083984375, 242.078125]]}, {'title': 'D.3. Toying with the Initial p(z)', 'heading_level': None, 'page_id': 48, 'polygon': [[54.46142578125, 519.36328125], [203.203125, 519.36328125], [203.203125, 532.0762634277344], [54.46142578125, 532.0762634277344]]}, {'title': 'D.4. Extra Rewards', 'heading_level': None, 'page_id': 48, 'polygon': [[54.76025390625, 649.6875], [147.69580078125, 649.6875], [147.69580078125, 661.8531036376953], [54.76025390625, 661.8531036376953]]}, {'title': 'D.5. Environment Transition', 'heading_level': None, 'page_id': 49, 'polygon': [[54.61083984375, 421.3180236816406], [189.45828247070312, 421.3180236816406], [189.45828247070312, 432.2271423339844], [54.61083984375, 432.2271423339844]]}], 'page_stats': [{'page_id': 0, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 147), ('Line', 39), ('Text', 4), ('PageHeader', 2), ('Picture', 1), ('SectionHeader', 1), ('Figure', 1), ('Caption', 1), ('Footnote', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 1, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 172), ('Line', 43), ('Text', 5), ('Caption', 2), ('Figure', 1), ('SectionHeader', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 2, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 329), ('Line', 73), ('ListItem', 6), ('Text', 4), ('SectionHeader', 3), ('TextInlineMath', 3), ('Equation', 2), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 3, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 504), ('Line', 119), ('TextInlineMath', 4), ('Reference', 3), ('Text', 2), ('SectionHeader', 2), ('PageHeader', 1), ('Figure', 1), ('Caption', 1), ('Equation', 1), ('PageFooter', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 4, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 330), ('Line', 74), ('Text', 5), ('Equation', 3), ('Reference', 3), ('TextInlineMath', 2), ('PageHeader', 1), ('Figure', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 5, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 1085), ('Line', 145), ('ListItem', 9), ('Text', 5), ('Reference', 4), ('SectionHeader', 3), ('TextInlineMath', 3), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 6, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 720), ('Line', 111), ('TableCell', 76), ('ListItem', 3), ('Reference', 3), ('SectionHeader', 2), ('Text', 2), ('PageHeader', 1), ('Table', 1), ('TextInlineMath', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 7, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 497), ('Line', 78), ('Text', 6), ('TextInlineMath', 4), ('SectionHeader', 4), ('Reference', 3), ('Equation', 2), ('PageHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 8, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 532), ('TableCell', 262), ('Line', 88), ('Text', 6), ('Caption', 1), ('Table', 1), ('SectionHeader', 1), ('PageFooter', 1), ('TableGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 9, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 387), ('Line', 98), ('Text', 8), ('Caption', 1), ('Figure', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 10, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 227), ('Line', 59), ('Text', 9), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 11, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 263), ('Line', 52), ('TableCell', 49), ('Text', 7), ('Table', 2), ('SectionHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 12, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 230), ('Line', 52), ('Text', 8), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 13, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 154), ('Line', 52), ('ListItem', 13), ('Reference', 13), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 14, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 187), ('Line', 49), ('Reference', 17), ('ListItem', 15), ('Text', 3), ('ListGroup', 2), ('PageHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 15, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 169), ('Line', 49), ('ListItem', 19), ('Reference', 19), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 16, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 182), ('Line', 51), ('ListItem', 17), ('Reference', 17), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 17, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 168), ('Line', 50), ('ListItem', 17), ('Reference', 17), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 18, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 135), ('Line', 40), ('ListItem', 11), ('Reference', 11), ('PageHeader', 1), ('PageFooter', 1), ('ListGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 19, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 88), ('TableCell', 40), ('Line', 18), ('SectionHeader', 2), ('PageHeader', 1), ('TableOfContents', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 20, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 317), ('Line', 64), ('TableCell', 43), ('Text', 8), ('Reference', 3), ('SectionHeader', 2), ('Equation', 2), ('PageHeader', 1), ('Table', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 21, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 263), ('TableCell', 64), ('Line', 48), ('Reference', 6), ('Text', 5), ('SectionHeader', 4), ('Table', 3), ('PageFooter', 2), ('Caption', 1), ('Code', 1), ('TableGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 22, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 316), ('Line', 45), ('Code', 4), ('Text', 4), ('Reference', 3), ('PageHeader', 1), ('Figure', 1), ('Caption', 1), ('PageFooter', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 23, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 155), ('Line', 45), ('Figure', 2), ('Caption', 2), ('FigureGroup', 2), ('PageHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 24, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 210), ('Line', 47), ('Figure', 2), ('Reference', 2), ('PageHeader', 1), ('Caption', 1), ('Text', 1), ('PageFooter', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 25, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 183), ('Line', 34), ('PageHeader', 1), ('Code', 1), ('Text', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 26, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 312), ('Line', 58), ('SectionHeader', 3), ('Text', 2), ('PageHeader', 1), ('Code', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 27, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 406), ('Line', 49), ('Text', 11), ('SectionHeader', 2), ('PageHeader', 1), ('Code', 1), ('TextInlineMath', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 28, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 205), ('Line', 60), ('Text', 5), ('PageHeader', 1), ('Code', 1), ('SectionHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 29, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 526), ('Line', 60), ('Text', 2), ('PageHeader', 1), ('SectionHeader', 1), ('Code', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 30, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 462), ('Line', 68), ('Text', 3), ('PageHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 31, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 279), ('TableCell', 100), ('Line', 45), ('Text', 4), ('Reference', 3), ('TextInlineMath', 2), ('SectionHeader', 2), ('Caption', 1), ('Table', 1), ('PageFooter', 1), ('TableGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 32, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 269), ('Line', 48), ('Text', 10), ('SectionHeader', 2), ('Code', 2), ('PageHeader', 1), ('ListItem', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 33, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 218), ('Line', 60), ('Text', 9), ('SectionHeader', 2), ('Reference', 2), ('PageHeader', 1), ('Code', 1), ('Figure', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 34, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 373), ('Line', 94), ('Figure', 2), ('PageHeader', 1), ('Caption', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 35, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 325), ('Line', 94), ('Figure', 2), ('PageHeader', 1), ('Caption', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 36, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 313), ('Line', 88), ('Figure', 2), ('PageHeader', 1), ('Caption', 1), ('PageFooter', 1), ('FigureGroup', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 37, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 409), ('Line', 109), ('Caption', 2), ('Text', 2), ('Reference', 2), ('PageHeader', 1), ('Figure', 1), ('PageFooter', 1), ('FigureGroup', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 38, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 47), ('Line', 16), ('Text', 3), ('PageHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 39, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 190), ('Line', 77), ('Text', 3), ('PageHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 40, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 194), ('Line', 79), ('PageHeader', 1), ('Text', 1), ('Caption', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 41, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 156), ('Line', 57), ('PageHeader', 1), ('Code', 1), ('Caption', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 42, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 235), ('Line', 99), ('Code', 2), ('PageHeader', 1), ('Caption', 1), ('Figure', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 43, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 115), ('Line', 47), ('PageHeader', 1), ('Code', 1), ('Figure', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 44, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 345), ('Line', 76), ('Text', 22), ('PageHeader', 1), ('SectionHeader', 1), ('Code', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 45, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 109), ('Line', 47), ('Text', 17), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 46, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 473), ('Line', 82), ('Text', 19), ('PageHeader', 1), ('Code', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 47, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 125), ('Line', 48), ('Text', 26), ('TextInlineMath', 2), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1), ('Reference', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 48, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 253), ('Line', 51), ('SectionHeader', 5), ('Text', 5), ('Reference', 5), ('TextInlineMath', 3), ('PageHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}, {'page_id': 49, 'text_extraction_method': 'pdftext', 'block_counts': [('Span', 254), ('Line', 60), ('Text', 7), ('Equation', 4), ('TextInlineMath', 2), ('Reference', 2), ('PageHeader', 1), ('SectionHeader', 1), ('PageFooter', 1)], 'block_metadata': {'llm_request_count': 0, 'llm_error_count': 0, 'llm_tokens_used': 0}}], 'debug_data_path': 'debug_data/2505.03335v2'}"
      ],
      "total_sections": 1,
      "total_equations": 1,
      "total_tables": 1,
      "extraction_time": 30.204867124557495,
      "extraction_method": "marker-pdf-core"
    },
    "marker_pdf": {
      "source": "marker-pdf",
      "file": "2505.03335v2.pdf",
      "error": "No module named 'extractor'",
      "sections": [],
      "total_sections": 0
    },
    "extractor_latexml": {
      "source": "extractor",
      "file": "2505.03335v2_latexml.html",
      "sections": [
        {
          "_key": "ce06242a",
          "_id": "sections/ce06242a",
          "title": "1Introduction",
          "level": 1,
          "content": "2The Absolute Zero Paradigm2.1PreliminariesSupervised Fine-Tuning (SFT).Reinforcement Learning with Verifiable Rewards (RLVR).2.2Absolute Zero\n\n2.1PreliminariesSupervised Fine-Tuning (SFT).Reinforcement Learning with Verifiable Rewards (RLVR).\n\nSupervised Fine-Tuning (SFT).\n\nReinforcement Learning with Verifiable Rewards (RLVR).\n\n2.2Absolute Zero\n\n3Absolute Zero Reasoner3.1Two Roles in One: Proposer and SolverReward Design.3.2Learning Different Modes of Reasoning: Deduction, Induction, and Abduction3.3Absolute Zero Reasoner Learning Algorithm3.3.1Buffer Initialization3.3.2Task Proposal Inputs and Buffer Management3.3.3Constructing Valid Tasks3.3.4Answer Verification3.3.5Task-Relative REINFORCE++\n\n3.1Two Roles in One: Proposer and SolverReward Design.\n\nReward Design.\n\n3.2Learning Different Modes of Reasoning: Deduction, Induction, and Abduction\n\n3.3Absolute Zero Reasoner Learning Algorithm3.3.1Buffer Initialization3.3.2Task Proposal Inputs and Buffer Management3.3.3Constructing Valid Tasks3.3.4Answer Verification3.3.5Task-Relative REINFORCE++\n\n3.3.1Buffer Initialization\n\n3.3.2Task Proposal Inputs and Buffer Management\n\n3.3.3Constructing Valid Tasks\n\n3.3.4Answer Verification\n\n3.3.5Task-Relative REINFORCE++\n\n4Experiments4.1Experiment SetupTraining Details.Evaluation Protocol.Baselines.4.2ResultsResearch Question 1: How does AZR compare to other zero setting models trained with human expert data?Research Question 2: How do initializing from different base model variants (base vs. coder) affect performance?Research Question 3: How does varying model size effect AZR\u2019s in-distribution and out-of-distribution capabilities?Research Question 4: Any interesting observations by changing the model class?Research Question 5: Any interesting behaviors or patterns observed during AZR training?Research Question 6: Are all task types essential for good performance (Ablation)?Research Question 7: How much do the designs of proposer contribute to the overall performance (Ablation)?Additional Results.\n\n4.1Experiment SetupTraining Details.Evaluation Protocol.Baselines.\n\nTraining Details.\n\nEvaluation Protocol.\n\nBaselines.\n\n4.2ResultsResearch Question 1: How does AZR compare to other zero setting models trained with human expert data?Research Question 2: How do initializing from different base model variants (base vs. coder) affect performance?Research Question 3: How does varying model size effect AZR\u2019s in-distribution and out-of-distribution capabilities?Research Question 4: Any interesting observations by changing the model class?Research Question 5: Any interesting behaviors or patterns observed during AZR training?Research Question 6: Are all task types essential for good performance (Ablation)?Research Question 7: How much do the designs of proposer contribute to the overall performance (Ablation)?Additional Results.\n\nResearch Question 1: How does AZR compare to other zero setting models trained with human expert data?\n\nResearch Question 2: How do initializing from different base model variants (base vs. coder) affect performance?\n\nResearch Question 3: How does varying model size effect AZR\u2019s in-distribution and out-of-distribution capabilities?\n\nResearch Question 4: Any interesting observations by changing the model class?\n\nResearch Question 5: Any interesting behaviors or patterns observed during AZR training?\n\nResearch Question 6: Are all task types essential for good performance (Ablation)?\n\nResearch Question 7: How much do the designs of proposer contribute to the overall performance (Ablation)?\n\nAdditional Results.\n\n5Related WorkReasoning with RL.Self-play.Weak-to-Strong Supervision.\n\nReasoning with RL.\n\nSelf-play.\n\nWeak-to-Strong Supervision.\n\n6Conclusion and DiscussionConclusion.Discussion.\n\nConclusion.\n\nDiscussion.\n\nAReinforcement Learning with Verifiable Rewards.\n\nBImplementation DetailsTraining Hyperparameters.\n\nTraining Hyperparameters.\n\nCMore ResultsC.1Out-of-Distribution Performance BreakdownC.2In-Distribution ResultsC.3Interplay Between Propose and Solve RolesC.4Complexity and Diversity Metrics of AZR Proposed TasksC.5Generated Code Complexity Dynamics Between Abd/Ded and Ind.\n\nC.1Out-of-Distribution Performance Breakdown\n\nC.2In-Distribution Results\n\nC.3Interplay Between Propose and Solve Roles\n\nC.4Complexity and Diversity Metrics of AZR Proposed Tasks\n\nC.5Generated Code Complexity Dynamics Between Abd/Ded and Ind.\n\nDAlternative Approaches ConsideredD.1Error Deduction TaskD.2Composite Functions as Curriculum LearningD.3Toying with the Initialp\u2062(z)\ud835\udc5d\ud835\udc67p(z)italic_p ( italic_z )D.4Extra RewardsComplexity Rewards.Diversity Rewards.Reward Aggregation.D.5Environment TransitionRemoving Comments and DocstringsRemoving Global Variables.\n\nD.1Error Deduction Task\n\nD.2Composite Functions as Curriculum Learning\n\nD.3Toying with the Initialp\u2062(z)\ud835\udc5d\ud835\udc67p(z)italic_p ( italic_z )\n\nD.4Extra RewardsComplexity Rewards.Diversity Rewards.Reward Aggregation.\n\nComplexity Rewards.\n\nDiversity Rewards.\n\nReward Aggregation.\n\nD.5Environment TransitionRemoving Comments and DocstringsRemoving Global Variables.\n\nRemoving Comments and Docstrings\n\nRemoving Global Variables.\n\nmarginparsep has been altered.topmargin has been altered.marginparpush has been altered.The page layout violates the ICML style.Please do not change the page layout, or include packages like geometry,\nsavetrees, or fullpage, which change it for you.\nWe\u2019re not able to reliably undo arbitrary changes to the style. Please remove\nthe offending package(s), or layout-changing commands and try again.\n\nAbsolute Zero: Reinforced Self-play Reasoning with Zero Data\n\nAndrew Zhao1,Yiran Wu3,Yang Yue1,Tong Wu2,Quentin Xu1,Yang Yue1,Matthieu Lin1,Shenzhi Wang1,Qingyun Wu3,Zilong Zheng2,\u27092\u2709{}^{\\,2,\\textrm{{\\char 0\\relax}}}start_FLOATSUPERSCRIPT 2 , \u2709 end_FLOATSUPERSCRIPTandGao Huang1,\u27091\u2709{}^{\\,1,\\textrm{{\\char 0\\relax}}}start_FLOATSUPERSCRIPT 1 , \u2709 end_FLOATSUPERSCRIPT\n\n11{}^{1\\,}start_FLOATSUPERSCRIPT 1 end_FLOATSUPERSCRIPTTsinghua University22{}^{2\\,}start_FLOATSUPERSCRIPT 2 end_FLOATSUPERSCRIPTBeijing Institute for General Artificial Intelligence33{}^{3\\,}start_FLOATSUPERSCRIPT 3 end_FLOATSUPERSCRIPTPennsylvania State University\n\nzqc21@mails.tsinghua.edu.cn, yiran.wu@psu.edu, zlzheng@bigai.ai, gaohuang@tsinghua.edu.cn",
          "parent": null,
          "line_number": 1
        },
        {
          "_key": "bb78961b",
          "_id": "sections/bb78961b",
          "title": "1Introduction",
          "level": 2,
          "content": "Large language models (LLMs) have recently achieved remarkable improvements in reasoning capabilities by employing Reinforcement Learning with Verifiable Rewards (RLVR)(Lambert et\u00a0al.,2024). Unlike methods that explicitly imitate intermediate reasoning steps, RLVR uses only outcome-based feedback, enabling large-scale reinforcement learning over vast task datasets(DeepSeek-AI et\u00a0al.,2025;Team et\u00a0al.,2025;Jaech et\u00a0al.,2024;OpenAI,2025b;a). A particularly compelling variant is the\u201czero\u201dRLVR paradigm(DeepSeek-AI et\u00a0al.,2025), which forgoes any cold-start distillation data, using neither human-generated nor AI-generated reasoning traces, and applies RLVR directly on the base model with task rewards. However, these methods still depend heavily on expertly curated distributions of reasoning question\u2013answer pairs, which raises serious concerns about their long-term scalability(Villalobos et\u00a0al.,2024). As reasoning models continue to advance, the effort required to construct large-scale, high-quality datasets may soon become unsustainable(Yue et\u00a0al.,2025). A similar scalability bottleneck has already been identified in the domain of LLM pretraining(Sutskever et\u00a0al.,2024). Furthermore, as AI systems continue to evolve and potentially exceed human intellect, an exclusive dependence on human-designed tasks risks imposing constraints on their capacity for autonomous learning and growth(Hughes et\u00a0al.,2024). This underscores the need for a new paradigm that begins to explore possibilities beyond the constraints of human-designed tasks and prepares for a future in which AI systems may surpass human intelligence.\n\nTo this end, we propose\u201cAbsolute Zero\u201d, a new paradigm for reasoning models in which the model simultaneously learns to define tasks that maximize learnability and to solve them effectively, enabling self-evolution through self-play without relying on external data. In contrast to prior self-play methods that are limited to narrow domains, fixed functionalities, or learned reward models that are prone to hacking(Silver et\u00a0al.,2017;Chen et\u00a0al.,2025;2024), theAbsolute Zeroparadigm is designed to operate in open-ended settings while remaining grounded in a real environment. It relies on feedback from the environment as a verifiable source of reward, mirroring how humans learn and reason through interaction with the world, and helps prevent issues such as hacking with neural reward models(Hughes et\u00a0al.,2024). Similar to AlphaZero(Silver et\u00a0al.,2017), which improves through self-play, our proposed paradigm requires no human supervision and learns entirely through self-interaction. We believe the Absolute Zero paradigm represents a promising step toward enabling large language models to autonomously achieve superhuman reasoning capabilities.\n\nBuilding on this new reasoning paradigm, we introduce theAbsolute Zero Reasoner (AZR), which proposes and solves coding tasks. We cast code executor as an open-ended yet grounded environment, sufficient to both validate task integrity and also provide verifiable feedback for stable training. We let AZR construct three types of coding tasks: infer and reason about one particular element in a program, input, output triplet, which corresponds to three complementary modes of reasoning: induction, abduction, and deduction. We train the entire system end-to-end with a newly proposed reinforcement learning advantage estimator tailored to the multitask nature of the proposed approach.\n\nDespite being trained entirely without any in-distribution data, AZR demonstrates remarkable capabilities across diverse reasoning tasks in math and coding. In mathematics, AZR achieves competitive performance compared to zero reasoner models explicitly fine-tuned with domain-specific supervision. In coding tasks, AZR establishes a new state-of-the-art performance, surpassing models specifically trained with code datasets using RLVR. Furthermore, AZR outperforms all previous models by an average of 1.8 absolute points compared to models trained in the \u201czero\u201d setting using in-domain data. These surprising results highlight that general reasoning skills can emerge without human-curated domain targeted data, positioning Absolute Zero as an promising research direction and AZR as a first pivotal milestone. Besides the remarkable results AZR achieved with zero human data for reasoning, we also make very interesting findings summarized below:\n\n\u2022Code priors amplify reasoning.The baseQwen-Coder-7bmodel started with math performance 3.6 points lower thanQwen-7b. But after AZR training for both models, the coder variant surpassed the base by 0.7 points, suggesting that strong coding capabilities may potentially amplify overall reasoning improvements after AZR training.\n\nCode priors amplify reasoning.The baseQwen-Coder-7bmodel started with math performance 3.6 points lower thanQwen-7b. But after AZR training for both models, the coder variant surpassed the base by 0.7 points, suggesting that strong coding capabilities may potentially amplify overall reasoning improvements after AZR training.\n\n\u2022Cross domain transfer is more pronounced for AZR.After RLVR, expert code models raise math accuracy by only 0.65 points on average, whereasAZR-Base-7BandAZR-Coder-7Btrained on self-proposed code reasoning tasks improve math average by 10.9 and 15.2, respectively, demonstrating much stronger generalized reasoning capability gains.\n\nCross domain transfer is more pronounced for AZR.After RLVR, expert code models raise math accuracy by only 0.65 points on average, whereasAZR-Base-7BandAZR-Coder-7Btrained on self-proposed code reasoning tasks improve math average by 10.9 and 15.2, respectively, demonstrating much stronger generalized reasoning capability gains.\n\n\u2022Bigger bases yield bigger gains.Performance improvements scale with model size: the 3B, 7B, and 14B coder models gain +5.7, +10.2, and +13.2 points respectively, suggesting continued scaling is advantageous for AZR.\n\nBigger bases yield bigger gains.Performance improvements scale with model size: the 3B, 7B, and 14B coder models gain +5.7, +10.2, and +13.2 points respectively, suggesting continued scaling is advantageous for AZR.\n\n\u2022Comments as intermediate plans emerge naturally.When solving code induction tasks, AZR often interleaves step-by-step plans as comments and code (Figure19), resembling the ReAct prompting framework(Yao et\u00a0al.,2023). Similar behavior has been observed in much larger formal-math models such as DeepSeek Prover v2 (671B)(Ren et\u00a0al.,2025). We therefore believe that allowing the model to use intermediate scratch-pads when generating long-form answers may be beneficial in other domains as well.\n\nComments as intermediate plans emerge naturally.When solving code induction tasks, AZR often interleaves step-by-step plans as comments and code (Figure19), resembling the ReAct prompting framework(Yao et\u00a0al.,2023). Similar behavior has been observed in much larger formal-math models such as DeepSeek Prover v2 (671B)(Ren et\u00a0al.,2025). We therefore believe that allowing the model to use intermediate scratch-pads when generating long-form answers may be beneficial in other domains as well.\n\n\u2022Cognitive Behaviors and Token length depends on reasoning mode.Distinct cognitive behaviors\u2014such as step-by-step reasoning, enumeration, and trial-and-error all emerged through AZR training, but different behaviors are particularly evident across different types of tasks. Furthermore token counts grow over AZR training, but the magnitude of increase also differs by task types: abduction grows the most because the model performs trial-and-error until output matches, whereas deduction and induction grow modestly.\n\nCognitive Behaviors and Token length depends on reasoning mode.Distinct cognitive behaviors\u2014such as step-by-step reasoning, enumeration, and trial-and-error all emerged through AZR training, but different behaviors are particularly evident across different types of tasks. Furthermore token counts grow over AZR training, but the magnitude of increase also differs by task types: abduction grows the most because the model performs trial-and-error until output matches, whereas deduction and induction grow modestly.\n\n\u2022Safety alarms ringing.We observe AZR withLlama3.1-8boccasionally produces concerning chains of thought, we term the \u201cuh-oh moment\u201d, example shown inFigure32, highlighting the need for future work on safety-aware training(Zhang et\u00a0al.,2025a).\n\nSafety alarms ringing.We observe AZR withLlama3.1-8boccasionally produces concerning chains of thought, we term the \u201cuh-oh moment\u201d, example shown inFigure32, highlighting the need for future work on safety-aware training(Zhang et\u00a0al.,2025a).",
          "parent": null,
          "line_number": 128
        },
        {
          "_key": "fa58b155",
          "_id": "sections/fa58b155",
          "title": "2The Absolute Zero Paradigm",
          "level": 2,
          "content": "",
          "parent": null,
          "line_number": 162
        },
        {
          "_key": "531fb192",
          "_id": "sections/531fb192",
          "title": "2.1Preliminaries",
          "level": 3,
          "content": "",
          "parent": "fa58b155",
          "line_number": 164
        },
        {
          "_key": "ba5fa470",
          "_id": "sections/ba5fa470",
          "title": "Supervised Fine-Tuning (SFT).",
          "level": 5,
          "content": "SFT requires the datasets of task-rationale-answer demonstrations\ud835\udc9f={(x,c\u22c6,y\u22c6)}\ud835\udc9f\ud835\udc65superscript\ud835\udc50\u22c6superscript\ud835\udc66\u22c6\\mathcal{D}=\\{(x,c^{\\star},y^{\\star})\\}caligraphic_D = { ( italic_x , italic_c start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) }, wherex\ud835\udc65xitalic_xis the query,c\u22c6superscript\ud835\udc50\u22c6c^{\\star}italic_c start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis the gold chain-of-thought (CoT)) andy\u22c6superscript\ud835\udc66\u22c6y^{\\star}italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis the gold answer, all provided byhuman expertsorsuperior AI models. The model trains to imitate the reference responses to minimize the conditional negative log-likelihood(Ouyang et\u00a0al.,2022):\n\nHowever, at the frontier level, there\u2019s no stronger model to distill from, and expert human labeling doesn\u2019t scale well.",
          "parent": "531fb192",
          "line_number": 166
        },
        {
          "_key": "13b6804f",
          "_id": "sections/13b6804f",
          "title": "Reinforcement Learning with Verifiable Rewards (RLVR).",
          "level": 5,
          "content": "To move beyond the limits of pure imitation, RLVR only requires a dataset of task and answer\ud835\udc9f={(x,y\u22c6)}\ud835\udc9f\ud835\udc65superscript\ud835\udc66\u22c6\\mathcal{D}=\\{(x,y^{\\star})\\}caligraphic_D = { ( italic_x , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) }, without labeled rationale. RLVR allows the model to generate its own CoT and calculate a verifiable reward with the golden answerr\u2062(y,y\u22c6)\ud835\udc5f\ud835\udc66superscript\ud835\udc66\u22c6r(y,y^{\\star})italic_r ( italic_y , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ). However, the learning task distribution\ud835\udc9f\ud835\udc9f\\mathcal{D}caligraphic_D, with its set of queries and gold answers are still labeled byhuman experts.\nThe trainable policy\u03c0\u03b8subscript\ud835\udf0b\ud835\udf03\\pi_{\\theta}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPTis optimized to maximize expected reward:\n\nIn summary, both SFT and RLVR still rely onhuman-curateddatasets of either queries, demonstrations, or verifiers, which ultimately limit scalability. The Absolute Zero paradigm removes this dependency by allowing the model to generate, solve, and learn from its own interactions with the environment entirely through self-play.",
          "parent": "531fb192",
          "line_number": 172
        },
        {
          "_key": "93603896",
          "_id": "sections/93603896",
          "title": "2.2Absolute Zero",
          "level": 3,
          "content": "We propose the Absolute Zero paradigm, where during training, the model simultaneously proposes tasks, solves them, and learns from both stages. No external data is required and the model learns entirely through self-play and experience, aided by some environment. We illustrate this paradigm inFigure2, which contrasts Absolute Zero with supervised learning and RLVR, highlighting how our approach eliminates the need for any human-curated data by enabling self-improving task proposal and solution through self-play.\n\nTo make the Absolute Zero setting concrete, we now define how one model can act both as the proposer and solver role. To aid understanding, we include an illustration inFigure3. Let\u03c0\u03b8subscript\ud835\udf0b\ud835\udf03\\pi_{\\theta}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPTbe our parameterized language model, it is used to play two roles, proposer\u03c0\u03b8proposesuperscriptsubscript\ud835\udf0b\ud835\udf03propose\\pi_{\\theta}^{\\text{propose}}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPTand solver\u03c0\u03b8solvesuperscriptsubscript\ud835\udf0b\ud835\udf03solve\\pi_{\\theta}^{\\text{solve}}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPTduring training.\n\nThe proposer first samples a proposed task conditioned on variablez\ud835\udc67zitalic_z:\u03c4\u223c\u03c0\u03b8propose(\u22c5|z)\\tau\\sim\\pi_{\\theta}^{\\text{propose}}(\\cdot|z)italic_\u03c4 \u223c italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT ( \u22c5 | italic_z ), which will then be validated and used to construct a valid reasoning task together with the environmente\ud835\udc52eitalic_e:(x,y\u22c6)\u223cfe(\u22c5|\u03c4)(x,y^{\\star})\\sim f_{e}(\\cdot|\\tau)( italic_x , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) \u223c italic_f start_POSTSUBSCRIPT italic_e end_POSTSUBSCRIPT ( \u22c5 | italic_\u03c4 ), wherex\ud835\udc65xitalic_xis the task query andy\u22c6superscript\ud835\udc66\u22c6y^{\\star}italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis the gold label. Then the solver produces an answery\u223c\u03c0\u03b8solve(\u22c5\u2223x)y\\sim\\pi_{\\theta}^{\\text{solve}}(\\,\\cdot\\mid x)italic_y \u223c italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT ( \u22c5 \u2223 italic_x ). Each proposed task\u03c4\ud835\udf0f\\tauitalic_\u03c4is scored by alearnability rewardrepropose\u2062(\u03c4,\u03c0\u03b8)subscriptsuperscript\ud835\udc5fpropose\ud835\udc52\ud835\udf0fsubscript\ud835\udf0b\ud835\udf03r^{\\text{propose}}_{e}(\\tau,\\pi_{\\theta})italic_r start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_e end_POSTSUBSCRIPT ( italic_\u03c4 , italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT ), which captures the expected improvement in\u03c0\u03b8subscript\ud835\udf0b\ud835\udf03\\pi_{\\theta}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPTafter training on the task queryx\ud835\udc65xitalic_x. Moreover, the same policy also receives asolution rewardresolve\u2062(y,y\u22c6)subscriptsuperscript\ud835\udc5fsolve\ud835\udc52\ud835\udc66superscript\ud835\udc66\u22c6r^{\\text{solve}}_{e}(y,y^{\\star})italic_r start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_e end_POSTSUBSCRIPT ( italic_y , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT )for its answer to the task queryx\ud835\udc65xitalic_x, with the environment again serving as the verifier. A nonnegative coefficient\u03bb\ud835\udf06\\lambdaitalic_\u03bbbalances the trade-off between exploring new, learnable tasks and improving the model\u2019s reasoning and problem-solving abilities. We formally define the absolute zero setting\u2019s objective as follows:\n\nNotice that we shift the burden of scaling data away fromhuman expertsand onto theproposer policy\u03c0\u03b8proposesuperscriptsubscript\ud835\udf0b\ud835\udf03propose\\pi_{\\theta}^{\\text{propose}}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPTand theenvironmente\ud835\udc52eitalic_e. These two roles are both responsible for defining/evolving the learning task distribution, validating proposed tasks, and providing grounded feedback that supports stable and self-sustainable training. When proposing,z\ud835\udc67zitalic_zacts as a conditional variable that seeds generation of tasks. Practically,z\ud835\udc67zitalic_zcan be instantiated by sampling a small subset of past (task, answer) pairs from a continually updated task memory, yet there is no specific implementation tied to the paradigm. To guide the proposing process, we use a learnability rewardrpropose\u2062(\u03c4,\u03c0\u03b8)superscript\ud835\udc5fpropose\ud835\udf0fsubscript\ud835\udf0b\ud835\udf03r^{\\text{propose}}(\\tau,\\pi_{\\theta})italic_r start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT ( italic_\u03c4 , italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT ), which measures how much the model is expected to improve by solving a proposed task\u03c4\ud835\udf0f\\tauitalic_\u03c4. Moreover, the solver rewardrsolve\u2062(y,y\u2217)superscript\ud835\udc5fsolve\ud835\udc66superscript\ud835\udc66r^{\\text{solve}}(y,y^{*})italic_r start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT ( italic_y , italic_y start_POSTSUPERSCRIPT \u2217 end_POSTSUPERSCRIPT )evaluates the correctness of the model\u2019s output. Together, these two signals guide the model to propose tasks that are both challenging and learnable, while also enhancing its reasoning abilities, ultimately enabling continuous improvement through self-play.",
          "parent": "fa58b155",
          "line_number": 179
        },
        {
          "_key": "cc951e7f",
          "_id": "sections/cc951e7f",
          "title": "3Absolute Zero Reasoner",
          "level": 2,
          "content": "In this section, we presentAbsolute Zero Reasoner(AZR) as the first attempt to embrace the Absolute Zero Paradigm. In AZR, an unified LLM serves as both a proposer and a solver: it generates tasks to evolve its learning curriculum and attempts to solve them to improve its reasoning capabilities. The model is trained jointly with both roles, learning to create tasks that push the boundary of reasoning capacity while enhancing its ability to solve them effectively\u00a0(Section3.1). Within this self-play training paradigm, the model learns from three distinct type of coding tasks, which corresponding to three fundamental modes of reasoning: abduction, deduction and induction\u00a0(Section3.2). Using coding tasks is motivated by the Turing-completeness of programming languages(Stuart,2015)and empirical evidence that code-based training improves reasoning(Aryabumi et\u00a0al.,2024). We adopt code as an open-ended, expressive, and verifiable medium for enabling reliable task construction and verification\u00a0(Section3.3). Finally, the model is updated using a newly proposed advantage estimator designed for multitask learning\u00a0(Section3.3.5). We outline the overall algorithm inAlgorithm1and highlight an illustration of our Absolute Zero Reasoner approach inFigure4. To expedite future exploration in this area, we also present several attempts that did not yield fruitful results but still warrant discussion inAppendixD.",
          "parent": null,
          "line_number": 189
        },
        {
          "_key": "70fb20ef",
          "_id": "sections/70fb20ef",
          "title": "3.1Two Roles in One: Proposer and Solver",
          "level": 3,
          "content": "Large language models are naturally suited for implementing AZR in a multitask learning context(Radford et\u00a0al.,2019), as both the formulation of reasoning tasks and their solutions occur within a unified language space. To this end, we propose rewarding a single model for both generating high learning potential tasks and solving them effectively, as specified by the Absolute Zero objective inEquation3. At each iteration of the online rollout, AZR proposes new reasoning tasks by conditioning on the task type (as defined inSection3.2) andK\ud835\udc3eKitalic_Kpast self-generated examples. The model is explicitly prompted to generate tasks that differ from these examples, promoting diversity and broader coverage of the task space. These task proposals are filtered and transformed into valid reasoning tasks that can be verified using the environment, outlined later inSection3.3. AZR then attempts to solve these newly proposed tasks, receiving grounded feedback for its model responses. Both task proposal and problem solving are trained using reinforcement learning. We now outline the rewards used for each role.",
          "parent": "cc951e7f",
          "line_number": 193
        },
        {
          "_key": "9753ea88",
          "_id": "sections/9753ea88",
          "title": "Reward Design.",
          "level": 5,
          "content": "Prior work has shown that setting appropriate task difficulty is critical for promoting effective learning in reasoning systems(Zeng et\u00a0al.,2025b). Motivated by this, we design a reward function for the proposer that encourages generation of tasks with meaningful learning potential\u2014neither too easy nor unsolvable for the current solver. Concretely, we use the same language model in its solver role to estimate thelearnabilityof a proposed task, a similar type of reward used in unsupervised environment design literature(Sukhbaatar et\u00a0al.,2018). We performn\ud835\udc5bnitalic_nMonte Carlo rollouts of the solver and compute the average success rate:r\u00afsolve=1n\u2062\u2211i=1Nrsolve(i)subscript\u00af\ud835\udc5fsolve1\ud835\udc5bsuperscriptsubscript\ud835\udc561\ud835\udc41superscriptsubscript\ud835\udc5fsolve\ud835\udc56\\bar{r}_{\\text{solve}}=\\frac{1}{n}\\sum_{i=1}^{N}r_{\\text{solve}}^{(i)}over\u00af start_ARG italic_r end_ARG start_POSTSUBSCRIPT solve end_POSTSUBSCRIPT = divide start_ARG 1 end_ARG start_ARG italic_n end_ARG \u2211 start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_N end_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT solve end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_i ) end_POSTSUPERSCRIPT. The proposer\u2019s reward is then defined as:\n\nThe intuition is that if a task is either trivial to solve (r\u00afsolve=1subscript\u00af\ud835\udc5fsolve1\\bar{r}_{\\text{solve}}=1over\u00af start_ARG italic_r end_ARG start_POSTSUBSCRIPT solve end_POSTSUBSCRIPT = 1) or unsolvable (r\u00afsolve=0subscript\u00af\ud835\udc5fsolve0\\bar{r}_{\\text{solve}}=0over\u00af start_ARG italic_r end_ARG start_POSTSUBSCRIPT solve end_POSTSUBSCRIPT = 0), the task provides little to no learning signal for the proposer. In contrast, tasks of moderate difficulty, where the solver occasionally succeeds are rewarded the most, as they offer the richest feedback and greatest potential for learning.\n\nFor the solver, we assign a simple binary reward based on the correctness of its final output,\n\nwherey\u22c6superscript\ud835\udc66\u22c6y^{\\star}italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis the ground-truth answer, and equality is evaluated based on value equality in Python.\n\nWith the primary rewards for the proposing and solving roles defined, we adopt the following composite reward structure, which integratesrproposesubscript\ud835\udc5fproposer_{\\text{propose}}italic_r start_POSTSUBSCRIPT propose end_POSTSUBSCRIPTandrsolvesubscript\ud835\udc5fsolver_{\\text{solve}}italic_r start_POSTSUBSCRIPT solve end_POSTSUBSCRIPTwith a format-aware penalty inspired byDeepSeek-AI et\u00a0al.(2025):\n\nwherey\u03c0subscript\ud835\udc66\ud835\udf0by_{\\pi}italic_y start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTis the response of the language model. The main format that the proposing and solving tasks need to follow is the DeepSeek R1<think>and<answer>format, as shown inFigure33. Moreover, for the proposer, the reward criterion for format goes beyond simply following the XML structure. As detailed inSection3.3.3, only responses that produce valid triplets and pass the filtering stage are considered to be correctly formatted.",
          "parent": "70fb20ef",
          "line_number": 197
        },
        {
          "_key": "82d0c9b7",
          "_id": "sections/82d0c9b7",
          "title": "3.2Learning Different Modes of Reasoning: Deduction, Induction, and Abduction",
          "level": 3,
          "content": "AZR uses code executor as both a flexible interface and a verifiable environment. This setup enables automatic construction, execution, and validation of code reasoning tasks(Stuart,2015;Aryabumi et\u00a0al.,2024). Give program space\ud835\udcab\ud835\udcab\\mathscr{P}script_P, input space\u2110\u2110\\mathscr{I}script_Iand output space\ud835\udcaa\ud835\udcaa\\mathscr{O}script_Oof a coding language, we define an AZR reasoning task as a triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ), wherep\u2208\ud835\udcab\ud835\udc5d\ud835\udcabp\\in\\mathscr{P}italic_p \u2208 script_Pis a program,i\u2208\u2110\ud835\udc56\u2110i\\in\\mathscr{I}italic_i \u2208 script_Iis an input, ando\u2208\ud835\udcaa\ud835\udc5c\ud835\udcaao\\in\\mathscr{O}italic_o \u2208 script_Ois the corresponding output produced by running program on input,o=p\u2062(i)\ud835\udc5c\ud835\udc5d\ud835\udc56o=p(i)italic_o = italic_p ( italic_i ). AZR learns by reasoning about different parts of this task triplet, using three distinct core reasoning modes, each of which focuses on inferring one part of the triplet given the others:\n\n1.Deduction: predicting the outputo\ud835\udc5coitalic_ogiven a programp\ud835\udc5dpitalic_pand inputi\ud835\udc56iitalic_i, capturing step-by-step logical reasoning.\u2022As aproposer, AZR is conditioned on the task type\u03b1=deduction\ud835\udefcdeduction\\alpha=\\text{deduction}italic_\u03b1 = deductionandK\ud835\udc3eKitalic_Kreference examples from the deduction buffer\ud835\udc9fdeductionsubscript\ud835\udc9fdeduction\\mathcal{D}_{\\text{deduction}}caligraphic_D start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT(all task buffers are outlined inSection3.3), and generates a pair(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i ). The environmente\ud835\udc52eitalic_ethen executesp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )to computeo\ud835\udc5coitalic_o, completing the triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ), which is added to the buffer if non-error output was produced.\u2022As asolver, the model receives(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )and predicts the outputo\u03c0subscript\ud835\udc5c\ud835\udf0bo_{\\pi}italic_o start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT. The predicted output is verified using type-aware value equality in python to account for possible variations (such as set ordering or fractions).\n\nDeduction: predicting the outputo\ud835\udc5coitalic_ogiven a programp\ud835\udc5dpitalic_pand inputi\ud835\udc56iitalic_i, capturing step-by-step logical reasoning.\n\n\u2022As aproposer, AZR is conditioned on the task type\u03b1=deduction\ud835\udefcdeduction\\alpha=\\text{deduction}italic_\u03b1 = deductionandK\ud835\udc3eKitalic_Kreference examples from the deduction buffer\ud835\udc9fdeductionsubscript\ud835\udc9fdeduction\\mathcal{D}_{\\text{deduction}}caligraphic_D start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT(all task buffers are outlined inSection3.3), and generates a pair(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i ). The environmente\ud835\udc52eitalic_ethen executesp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )to computeo\ud835\udc5coitalic_o, completing the triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ), which is added to the buffer if non-error output was produced.\n\nAs aproposer, AZR is conditioned on the task type\u03b1=deduction\ud835\udefcdeduction\\alpha=\\text{deduction}italic_\u03b1 = deductionandK\ud835\udc3eKitalic_Kreference examples from the deduction buffer\ud835\udc9fdeductionsubscript\ud835\udc9fdeduction\\mathcal{D}_{\\text{deduction}}caligraphic_D start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT(all task buffers are outlined inSection3.3), and generates a pair(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i ). The environmente\ud835\udc52eitalic_ethen executesp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )to computeo\ud835\udc5coitalic_o, completing the triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ), which is added to the buffer if non-error output was produced.\n\n\u2022As asolver, the model receives(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )and predicts the outputo\u03c0subscript\ud835\udc5c\ud835\udf0bo_{\\pi}italic_o start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT. The predicted output is verified using type-aware value equality in python to account for possible variations (such as set ordering or fractions).\n\nAs asolver, the model receives(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )and predicts the outputo\u03c0subscript\ud835\udc5c\ud835\udf0bo_{\\pi}italic_o start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT. The predicted output is verified using type-aware value equality in python to account for possible variations (such as set ordering or fractions).\n\n2.Abduction: inferring a plausible inputi\ud835\udc56iitalic_igiven the programp\ud835\udc5dpitalic_pand an outputo\ud835\udc5coitalic_o, resembling trial-and-error or online search.\u2022As aproposer, the policy\u03c0proposesuperscript\ud835\udf0bpropose\\pi^{\\text{propose}}italic_\u03c0 start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT\u2019s input and output is almost the same as the proposer for the deduction task, except that the task type\u03b1=abduction\ud835\udefcabduction\\alpha=\\text{abduction}italic_\u03b1 = abductionis changed as an input. The model generates a pair(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )conditioned on\u03b1\ud835\udefc\\alphaitalic_\u03b1and reference examples. Then we executesp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )and get the triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ).\u2022As asolver, the model receives(p,o)\ud835\udc5d\ud835\udc5c(p,o)( italic_p , italic_o )and predictsi\u03c0subscript\ud835\udc56\ud835\udf0bi_{\\pi}italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT. The solution is verified by checking whetherp\u2062(i\u03c0)=o\ud835\udc5dsubscript\ud835\udc56\ud835\udf0b\ud835\udc5cp(i_{\\pi})=oitalic_p ( italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT ) = italic_o. Since programs may not be bijective, we useoutputvalue equivalence rather than requiring exact input matches.\n\nAbduction: inferring a plausible inputi\ud835\udc56iitalic_igiven the programp\ud835\udc5dpitalic_pand an outputo\ud835\udc5coitalic_o, resembling trial-and-error or online search.\n\n\u2022As aproposer, the policy\u03c0proposesuperscript\ud835\udf0bpropose\\pi^{\\text{propose}}italic_\u03c0 start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT\u2019s input and output is almost the same as the proposer for the deduction task, except that the task type\u03b1=abduction\ud835\udefcabduction\\alpha=\\text{abduction}italic_\u03b1 = abductionis changed as an input. The model generates a pair(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )conditioned on\u03b1\ud835\udefc\\alphaitalic_\u03b1and reference examples. Then we executesp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )and get the triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ).\n\nAs aproposer, the policy\u03c0proposesuperscript\ud835\udf0bpropose\\pi^{\\text{propose}}italic_\u03c0 start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT\u2019s input and output is almost the same as the proposer for the deduction task, except that the task type\u03b1=abduction\ud835\udefcabduction\\alpha=\\text{abduction}italic_\u03b1 = abductionis changed as an input. The model generates a pair(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )conditioned on\u03b1\ud835\udefc\\alphaitalic_\u03b1and reference examples. Then we executesp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )and get the triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ).\n\n\u2022As asolver, the model receives(p,o)\ud835\udc5d\ud835\udc5c(p,o)( italic_p , italic_o )and predictsi\u03c0subscript\ud835\udc56\ud835\udf0bi_{\\pi}italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT. The solution is verified by checking whetherp\u2062(i\u03c0)=o\ud835\udc5dsubscript\ud835\udc56\ud835\udf0b\ud835\udc5cp(i_{\\pi})=oitalic_p ( italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT ) = italic_o. Since programs may not be bijective, we useoutputvalue equivalence rather than requiring exact input matches.\n\nAs asolver, the model receives(p,o)\ud835\udc5d\ud835\udc5c(p,o)( italic_p , italic_o )and predictsi\u03c0subscript\ud835\udc56\ud835\udf0bi_{\\pi}italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT. The solution is verified by checking whetherp\u2062(i\u03c0)=o\ud835\udc5dsubscript\ud835\udc56\ud835\udf0b\ud835\udc5cp(i_{\\pi})=oitalic_p ( italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT ) = italic_o. Since programs may not be bijective, we useoutputvalue equivalence rather than requiring exact input matches.\n\n3.Induction:synthesizing a programp\ud835\udc5dpitalic_pfrom a set of in-out examples{(in,on)}superscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\\{(i^{n},o^{n})\\}{ ( italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT ) }, requiring generalization from partial information.\u2022As aproposer, AZR samples a valid programp\ud835\udc5dpitalic_pfrom\ud835\udc9fabduction\u222a\ud835\udc9fdeductionsubscript\ud835\udc9fabductionsubscript\ud835\udc9fdeduction\\mathcal{D}_{\\text{abduction}}\\cup\\mathcal{D}_{\\text{deduction}}caligraphic_D start_POSTSUBSCRIPT abduction end_POSTSUBSCRIPT \u222a caligraphic_D start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT, generatesN\ud835\udc41Nitalic_Nnew inputs and a messagem\ud835\udc5amitalic_m, and uses the environment to compute corresponding outputs. This forms an extended task representation(p,{(in,on)},m)\ud835\udc5dsuperscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\ud835\udc5a(p,\\{(i^{n},o^{n})\\},m)( italic_p , { ( italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT ) } , italic_m ), which is stored in the induction buffer\ud835\udc9finductionsubscript\ud835\udc9finduction\\mathcal{D}_{\\text{induction}}caligraphic_D start_POSTSUBSCRIPT induction end_POSTSUBSCRIPT. Since infinitely many functions can map the inputs to the outputs, making the induction task under-constrained, the messagem\ud835\udc5amitalic_mhelps properly condition the problem for the solver.\u2022As asolver, the model is shown the first half of the input-output pairs and the messagem\ud835\udc5amitalic_m, and must synthesize a programp\u03c0subscript\ud835\udc5d\ud835\udf0bp_{\\pi}italic_p start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTthat correctly maps the remaining hidden inputs to their outputs. The use of held-out examples discourages overfitting through if-else logic and promotes generalized induction.\n\nInduction:synthesizing a programp\ud835\udc5dpitalic_pfrom a set of in-out examples{(in,on)}superscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\\{(i^{n},o^{n})\\}{ ( italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT ) }, requiring generalization from partial information.\n\n\u2022As aproposer, AZR samples a valid programp\ud835\udc5dpitalic_pfrom\ud835\udc9fabduction\u222a\ud835\udc9fdeductionsubscript\ud835\udc9fabductionsubscript\ud835\udc9fdeduction\\mathcal{D}_{\\text{abduction}}\\cup\\mathcal{D}_{\\text{deduction}}caligraphic_D start_POSTSUBSCRIPT abduction end_POSTSUBSCRIPT \u222a caligraphic_D start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT, generatesN\ud835\udc41Nitalic_Nnew inputs and a messagem\ud835\udc5amitalic_m, and uses the environment to compute corresponding outputs. This forms an extended task representation(p,{(in,on)},m)\ud835\udc5dsuperscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\ud835\udc5a(p,\\{(i^{n},o^{n})\\},m)( italic_p , { ( italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT ) } , italic_m ), which is stored in the induction buffer\ud835\udc9finductionsubscript\ud835\udc9finduction\\mathcal{D}_{\\text{induction}}caligraphic_D start_POSTSUBSCRIPT induction end_POSTSUBSCRIPT. Since infinitely many functions can map the inputs to the outputs, making the induction task under-constrained, the messagem\ud835\udc5amitalic_mhelps properly condition the problem for the solver.\n\nAs aproposer, AZR samples a valid programp\ud835\udc5dpitalic_pfrom\ud835\udc9fabduction\u222a\ud835\udc9fdeductionsubscript\ud835\udc9fabductionsubscript\ud835\udc9fdeduction\\mathcal{D}_{\\text{abduction}}\\cup\\mathcal{D}_{\\text{deduction}}caligraphic_D start_POSTSUBSCRIPT abduction end_POSTSUBSCRIPT \u222a caligraphic_D start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT, generatesN\ud835\udc41Nitalic_Nnew inputs and a messagem\ud835\udc5amitalic_m, and uses the environment to compute corresponding outputs. This forms an extended task representation(p,{(in,on)},m)\ud835\udc5dsuperscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\ud835\udc5a(p,\\{(i^{n},o^{n})\\},m)( italic_p , { ( italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT ) } , italic_m ), which is stored in the induction buffer\ud835\udc9finductionsubscript\ud835\udc9finduction\\mathcal{D}_{\\text{induction}}caligraphic_D start_POSTSUBSCRIPT induction end_POSTSUBSCRIPT. Since infinitely many functions can map the inputs to the outputs, making the induction task under-constrained, the messagem\ud835\udc5amitalic_mhelps properly condition the problem for the solver.\n\n\u2022As asolver, the model is shown the first half of the input-output pairs and the messagem\ud835\udc5amitalic_m, and must synthesize a programp\u03c0subscript\ud835\udc5d\ud835\udf0bp_{\\pi}italic_p start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTthat correctly maps the remaining hidden inputs to their outputs. The use of held-out examples discourages overfitting through if-else logic and promotes generalized induction.\n\nAs asolver, the model is shown the first half of the input-output pairs and the messagem\ud835\udc5amitalic_m, and must synthesize a programp\u03c0subscript\ud835\udc5d\ud835\udf0bp_{\\pi}italic_p start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTthat correctly maps the remaining hidden inputs to their outputs. The use of held-out examples discourages overfitting through if-else logic and promotes generalized induction.\n\nEach reasoning task type leverages code as an expressive and verifiable medium, aligning with the Absolute Zero Paradigm\u2019s goals of fully self-improving systems in open-ended domains(DeepSeek-AI et\u00a0al.,2025;Lambert et\u00a0al.,2024). All prompts used by three different task types and two types of roles within a task type are shown inFigures36,34,35,39,37and38. Next, we outline exact details of our algorithm.",
          "parent": "cc951e7f",
          "line_number": 211
        },
        {
          "_key": "2004525c",
          "_id": "sections/2004525c",
          "title": "3.3Absolute Zero Reasoner Learning Algorithm",
          "level": 3,
          "content": "In this section, we will discuss details of our AZR self-play algorithm, including initialization of buffers3.3.1, usage of thse buffers3.3.2, construction of valid tasks3.3.3, validating solutions3.3.4, and finally advantage estimator calculation3.3.5. We outline the overall recipe of the self-play procedure of AZR inAlgorithm1.",
          "parent": "cc951e7f",
          "line_number": 253
        },
        {
          "_key": "e2c2cd8a",
          "_id": "sections/e2c2cd8a",
          "title": "3.3.1Buffer Initialization",
          "level": 4,
          "content": "To initialize AZR self-play, we first generate a seed set of valid triplets using the base language model. Each prompt samples up toK\ud835\udc3eKitalic_Ktriplets from the current seed buffer\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPTas references. When\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPTis empty at time 0, we fall back to the zero triplet show inFigure5. During the seeding stage, we use the same proposer prompts detailed inFigures34,35and36.\n\nFirst, for deduction and abduction tasks, the LLM is prompted to generate(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )pairs, which are filtered, executed, and stored as valid triplets. We initialize\ud835\udc9fabduction0=\ud835\udc9fdeduction0=\ud835\udc9fseedsubscriptsuperscript\ud835\udc9f0abductionsubscriptsuperscript\ud835\udc9f0deductionsubscript\ud835\udc9fseed\\mathcal{D}^{0}_{\\text{abduction}}=\\mathcal{D}^{0}_{\\text{deduction}}=\\mathcal%\n{D}_{\\text{seed}}caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT abduction end_POSTSUBSCRIPT = caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT = caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT, where|\ud835\udc9fseed|=B\u00d7Ssubscript\ud835\udc9fseed\ud835\udc35\ud835\udc46|\\mathcal{D}_{\\text{seed}}|=B\\times S| caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT | = italic_B \u00d7 italic_S, whereB\ud835\udc35Bitalic_Bis the batch size, andS=4\ud835\udc464S=4italic_S = 4is a factor we fix in all experiments. All seed triplet\u2019s program are stripped of global variables and comments (AppendixD), but subsequent iterations of adding new triplets to the buffers are unaltered. No model updates occur during this phase. Similarly, to initialize the induction buffer, we sample programs from\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT, generate matching input sets and messages, and collect valid examples until|\ud835\udc9finduction0|=B\u00d7Ssubscriptsuperscript\ud835\udc9f0induction\ud835\udc35\ud835\udc46|\\mathcal{D}^{0}_{\\text{induction}}|=B\\times S| caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT induction end_POSTSUBSCRIPT | = italic_B \u00d7 italic_S.",
          "parent": "2004525c",
          "line_number": 257
        },
        {
          "_key": "a320ada7",
          "_id": "sections/a320ada7",
          "title": "3.3.2Task Proposal Inputs and Buffer Management",
          "level": 4,
          "content": "During the actual self-play stage of AZR, we use the task buffer in three ways.First, for the proposer of abduction and deduction tasks, we uniformly sampleK\ud835\udc3eKitalic_Kpast triplets from the buffer, present them as in-context examples to the proposer and let it generate a new task. The design is to show it past examples, and prompt it to generate a different one to promote diversity(Zhao et\u00a0al.,2025a).Second, we sample one triplet from the union of abduction and deduction buffers\ud835\udc9fabd\u2062\u22c3\ud835\udc9fdedsubscript\ud835\udc9fabdsubscript\ud835\udc9fded\\mathcal{D}_{\\text{abd}}\\bigcup\\mathcal{D}_{\\text{ded}}caligraphic_D start_POSTSUBSCRIPT abd end_POSTSUBSCRIPT \u22c3 caligraphic_D start_POSTSUBSCRIPT ded end_POSTSUBSCRIPT, and present the programp\ud835\udc5dpitalic_pfrom that triplet to the induction proposer to generate a set ofN\ud835\udc41Nitalic_Nmatching inputs{in}superscript\ud835\udc56\ud835\udc5b\\{i^{n}\\}{ italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT }and a natural language messagem\ud835\udc5amitalic_m.Lastly, to maintain stable training, if a batch of solver problems contains fewer thanB\ud835\udc35Bitalic_Bvalid proposed tasks (proposer not adhering to formatting), we fill the remainder by uniformly sampling from the corresponding task buffer of previously validated triplets.\n\nThe buffer grows for abduction and deduction tasks whenever\u03c0\ud835\udf0b\\piitalic_\u03c0propose a valid triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ), regardless if it gets any task reward. Similarly, for induction tasks, all valid triplets(p,{in,on}),m\ud835\udc5dsuperscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\ud835\udc5a(p,\\{i^{n},o^{n}\\}),m( italic_p , { italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT } ) , italic_mare added to the buffer.",
          "parent": "2004525c",
          "line_number": 264
        },
        {
          "_key": "bc03fc7b",
          "_id": "sections/bc03fc7b",
          "title": "3.3.3Constructing Valid Tasks",
          "level": 4,
          "content": "Proposal Task Validation.We first describe how we construct valid tasks from the proposals generated by the policy\u03c0\ud835\udf0b\\piitalic_\u03c0. Fordeduction and abductiontasks, each proposal consists of a program and an input(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i ). To validate the task, we use the task validation procedure (steps shown below) on the input to obtain the correct outputo\ud835\udc5coitalic_o, resulting in a complete triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o ). Forinductiontasks, given a programp\ud835\udc5dpitalic_pthe policy proposes a set of inputs{in}superscript\ud835\udc56\ud835\udc5b\\{i^{n}\\}{ italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT }and messagem\ud835\udc5amitalic_m. We also use the task validation procedure on each of the inputinsuperscript\ud835\udc56\ud835\udc5bi^{n}italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPTin the set to obtain a corresponding outputonsuperscript\ud835\udc5c\ud835\udc5bo^{n}italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT, forming a set of input-output pairs{in,on}superscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\\{i^{n},o^{n}\\}{ italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT }. We do not impose any constraints onm\ud835\udc5amitalic_m. The resulting task is considered valid only when all inputs yield valid outputs and the formatting requirements are satisfied. Thetask validation procedureentails:\n\n1.Program Integrity.We first use Python to run the programp\ud835\udc5dpitalic_pwith the inputi\ud835\udc56iitalic_i. If no errors are raised and something is returned, we then gather the outputo\ud835\udc5coitalic_oof that(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )pair and determine that the program at least has valid syntax.\n\nProgram Integrity.We first use Python to run the programp\ud835\udc5dpitalic_pwith the inputi\ud835\udc56iitalic_i. If no errors are raised and something is returned, we then gather the outputo\ud835\udc5coitalic_oof that(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )pair and determine that the program at least has valid syntax.\n\n2.Program Safety.We also check whether a program is safe for execution by restricting the use of certain sensitive packages that might cause harm to the Python environment,i.e.,os.sys, sys, shutil. The list of packages used to filter out invalid programs is provided inFigure8. This list is also included in the instructions when prompting the language model to generate questions. SeeFigures34,35and36.\n\nProgram Safety.We also check whether a program is safe for execution by restricting the use of certain sensitive packages that might cause harm to the Python environment,i.e.,os.sys, sys, shutil. The list of packages used to filter out invalid programs is provided inFigure8. This list is also included in the instructions when prompting the language model to generate questions. SeeFigures34,35and36.\n\n3.Check for Determinism.In our setting, we only considerdeterministic programs,i.e.,p\u2208\ud835\udcabdeterministic\u2282\ud835\udcab\ud835\udc5dsubscript\ud835\udcabdeterministic\ud835\udcabp\\in\\mathscr{P}_{\\text{deterministic}}\\subset\\mathscr{P}italic_p \u2208 script_P start_POSTSUBSCRIPT deterministic end_POSTSUBSCRIPT \u2282 script_P, where\ud835\udcab\ud835\udcab\\mathscr{P}script_Pis the space of all valid programs and\u2110\u2110\\mathscr{I}script_Iis the space of all valid inputs:\u2200p\u2208\ud835\udcabdeterministic,\u2200i\u2208\u2110,(limj\u2192\u221ep\u2062(i)(1)=p\u2062(i)(2)=\u22ef=p\u2062(i)(j)),formulae-sequencefor-all\ud835\udc5dsubscript\ud835\udcabdeterministicfor-all\ud835\udc56\u2110subscript\u2192\ud835\udc57\ud835\udc5dsuperscript\ud835\udc561\ud835\udc5dsuperscript\ud835\udc562\u22ef\ud835\udc5dsuperscript\ud835\udc56\ud835\udc57\\forall p\\in\\mathscr{P}_{\\text{deterministic}},\\ \\forall i\\in\\mathscr{I},\\ %\n\\left(\\lim_{j\\to\\infty}p(i)^{(1)}=p(i)^{(2)}=\\dots=p(i)^{(j)}\\right),\u2200 italic_p \u2208 script_P start_POSTSUBSCRIPT deterministic end_POSTSUBSCRIPT , \u2200 italic_i \u2208 script_I , ( roman_lim start_POSTSUBSCRIPT italic_j \u2192 \u221e end_POSTSUBSCRIPT italic_p ( italic_i ) start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT = italic_p ( italic_i ) start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT = \u22ef = italic_p ( italic_i ) start_POSTSUPERSCRIPT ( italic_j ) end_POSTSUPERSCRIPT ) ,(7)where(j)\ud835\udc57(j)( italic_j )indexes repeated independent executions of the program. That is, for all inputsi\ud835\udc56iitalic_i, the output ofp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )remains identical with any independent execution of the program. Avalid program/input/output triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o )is defined such thato=p\u2062(i)\ud835\udc5c\ud835\udc5d\ud835\udc56o=p(i)italic_o = italic_p ( italic_i ), wherep\u2208\ud835\udcabdeterministic\ud835\udc5dsubscript\ud835\udcabdeterministicp\\in\\mathscr{P}_{\\text{deterministic}}italic_p \u2208 script_P start_POSTSUBSCRIPT deterministic end_POSTSUBSCRIPT.Since the output of probabilistic programs can vary on every individual run, it is non-trivial to use verifiable functions to evaluate the correctness of an answer. Therefore, to keep the verifier simple, we restrict the valid programs generated by the learner to the class of deterministic programs. We believe that stochastic programs can encompass a larger class of behaviors and are important and promising to include in future versions of AZR.To implement the filtering of invalid probabilistic programs, and following the definition of a deterministic program highlighted inEquation7, we approximate this procedure by independently running the programj\ud835\udc57jitalic_jfinite times and checking that all the outputs are equal. For computational budget reasons, we fixedj=2\ud835\udc572j=2italic_j = 2for all experiments.\n\nCheck for Determinism.In our setting, we only considerdeterministic programs,i.e.,p\u2208\ud835\udcabdeterministic\u2282\ud835\udcab\ud835\udc5dsubscript\ud835\udcabdeterministic\ud835\udcabp\\in\\mathscr{P}_{\\text{deterministic}}\\subset\\mathscr{P}italic_p \u2208 script_P start_POSTSUBSCRIPT deterministic end_POSTSUBSCRIPT \u2282 script_P, where\ud835\udcab\ud835\udcab\\mathscr{P}script_Pis the space of all valid programs and\u2110\u2110\\mathscr{I}script_Iis the space of all valid inputs:\n\nwhere(j)\ud835\udc57(j)( italic_j )indexes repeated independent executions of the program. That is, for all inputsi\ud835\udc56iitalic_i, the output ofp\u2062(i)\ud835\udc5d\ud835\udc56p(i)italic_p ( italic_i )remains identical with any independent execution of the program. Avalid program/input/output triplet(p,i,o)\ud835\udc5d\ud835\udc56\ud835\udc5c(p,i,o)( italic_p , italic_i , italic_o )is defined such thato=p\u2062(i)\ud835\udc5c\ud835\udc5d\ud835\udc56o=p(i)italic_o = italic_p ( italic_i ), wherep\u2208\ud835\udcabdeterministic\ud835\udc5dsubscript\ud835\udcabdeterministicp\\in\\mathscr{P}_{\\text{deterministic}}italic_p \u2208 script_P start_POSTSUBSCRIPT deterministic end_POSTSUBSCRIPT.\n\nSince the output of probabilistic programs can vary on every individual run, it is non-trivial to use verifiable functions to evaluate the correctness of an answer. Therefore, to keep the verifier simple, we restrict the valid programs generated by the learner to the class of deterministic programs. We believe that stochastic programs can encompass a larger class of behaviors and are important and promising to include in future versions of AZR.\n\nTo implement the filtering of invalid probabilistic programs, and following the definition of a deterministic program highlighted inEquation7, we approximate this procedure by independently running the programj\ud835\udc57jitalic_jfinite times and checking that all the outputs are equal. For computational budget reasons, we fixedj=2\ud835\udc572j=2italic_j = 2for all experiments.\n\nSolving Task Construction.If a task proposal passes these three checks, we deem it a valid task and apply appropriate procedures to present part of the triplet to the solver. Specifically, we setx=(p,i)\ud835\udc65\ud835\udc5d\ud835\udc56x=(p,i)italic_x = ( italic_p , italic_i )for deduction;x=(p,o)\ud835\udc65\ud835\udc5d\ud835\udc5cx=(p,o)italic_x = ( italic_p , italic_o )for abduction; andx=({in,on}n=1N\u2063/\u2063/2,m)\ud835\udc65subscriptsuperscriptsuperscript\ud835\udc56\ud835\udc5bsuperscript\ud835\udc5c\ud835\udc5b\ud835\udc41absent2\ud835\udc5b1\ud835\udc5ax=(\\{i^{n},o^{n}\\}^{N//2}_{n=1},m)italic_x = ( { italic_i start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT , italic_o start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT } start_POSTSUPERSCRIPT italic_N / / 2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n = 1 end_POSTSUBSCRIPT , italic_m )for induction, where half of the tests cases and a program descriptionm\ud835\udc5amitalic_mis used. We use all valid tasks from timestept\ud835\udc61titalic_t; if the batchB\ud835\udc35Bitalic_Bis not full, we uniformly sample from previously validated tasks to fill the batch.",
          "parent": "2004525c",
          "line_number": 270
        },
        {
          "_key": "ab10ebf7",
          "_id": "sections/ab10ebf7",
          "title": "3.3.4Answer Verification",
          "level": 4,
          "content": "For abduction task, we receivei\u03c0subscript\ud835\udc56\ud835\udf0bi_{\\pi}italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTfrom the solver policy, then we equivalence match usingp\u2062(i\u03c0)=p\u2062(i\u22c6)\ud835\udc5dsubscript\ud835\udc56\ud835\udf0b\ud835\udc5dsuperscript\ud835\udc56\u22c6p(i_{\\pi})=p(i^{\\star})italic_p ( italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT ) = italic_p ( italic_i start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ), where\u2217*\u2217refers to the privileged gold information. The reason we do not just matchi\u03c0subscript\ud835\udc56\ud835\udf0bi_{\\pi}italic_i start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPTandi\u22c6superscript\ud835\udc56\u22c6i^{\\star}italic_i start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis becausep\ud835\udc5dpitalic_pis not necessarily bijective. For deduction task, we matcho\u03c0=o\u22c6subscript\ud835\udc5c\ud835\udf0bsuperscript\ud835\udc5c\u22c6o_{\\pi}=o^{\\star}italic_o start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT = italic_o start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT. For induction, we matchall\u2061({p\u03c0\u2062(in\u22c6)=on\u22c6}N)allsuperscriptsubscript\ud835\udc5d\ud835\udf0bsuperscriptsubscript\ud835\udc56\ud835\udc5b\u22c6superscriptsubscript\ud835\udc5c\ud835\udc5b\u22c6\ud835\udc41\\operatorname{all}(\\{p_{\\pi}(i_{n}^{\\star})=o_{n}^{\\star}\\}^{N})roman_all ( { italic_p start_POSTSUBSCRIPT italic_\u03c0 end_POSTSUBSCRIPT ( italic_i start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) = italic_o start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT } start_POSTSUPERSCRIPT italic_N end_POSTSUPERSCRIPT ). This part might be convoluted to explain in language, therefore we recommend the reader to see how we did abduction, deduction and induction verification in code inFigures10,11and12, respectively.",
          "parent": "2004525c",
          "line_number": 295
        },
        {
          "_key": "27e0ae53",
          "_id": "sections/27e0ae53",
          "title": "3.3.5Task-Relative REINFORCE++",
          "level": 4,
          "content": "Since AZR trains the combination of roles and task types, it operates in a multitask reinforcement learning setup(Zhang & Yang,2021;Zhao et\u00a0al.,2022;Wang et\u00a0al.,2023;Yue et\u00a0al.,2023). Instead of computing a single global baseline as in REINFORCE++(Hu,2025)(AppendixA), we compute separate baselines for each of the six task-role configurations. This can be viewed as an interpolation between per-question baselines, as in GRPO(Shao et\u00a0al.,2024), and a global baseline, allowing for more structured variance reduction tailored to each task setup. We refer to this variant asTask-Relative REINFORCE++ (TRR++). The normalized advantageAnormsuperscript\ud835\udc34normA^{\\text{norm}}italic_A start_POSTSUPERSCRIPT norm end_POSTSUPERSCRIPTis computed as:\n\nwhere the mean and standard deviation are computedwithin each task type and role, yielding six baselines.",
          "parent": "2004525c",
          "line_number": 299
        },
        {
          "_key": "3b91a124",
          "_id": "sections/3b91a124",
          "title": "4Experiments",
          "level": 2,
          "content": "",
          "parent": null,
          "line_number": 305
        },
        {
          "_key": "f0eeba68",
          "_id": "sections/f0eeba68",
          "title": "4.1Experiment Setup",
          "level": 3,
          "content": "",
          "parent": "3b91a124",
          "line_number": 307
        },
        {
          "_key": "34a2d48e",
          "_id": "sections/34a2d48e",
          "title": "Training Details.",
          "level": 5,
          "content": "For all experiments, we initialize the buffers as described inSection3.1. AZR models are trained using a batch size of64\u00d7664664\\times 664 \u00d7 6(2 roles\u00d7\\times\u00d73 task types). We use constant learning rate=1\u2062e\u22126absent1\ud835\udc526=1e{-6}= 1 italic_e - 6and the AdamW optimizer(Loshchilov & Hutter,2019). Complete list of hyperparameters is provided inTable3.\n\nFor the main experiments, we train AZR models onQwen2.5-7BandQwen2.5-7B-Coder, resulting inAbsolute Zero Reasoner-base-7BandAbsolute Zero Reasoner-Coder-7B, respectively. Additional experiments include trainingQwen2.5-Coder-3B,Qwen2.5-Coder-14B,Qwen2.5-14B,Llama-3.1-8B(Yang et\u00a0al.,2024a;Hui et\u00a0al.,2024;Dubey et\u00a0al.,2024).",
          "parent": "f0eeba68",
          "line_number": 309
        },
        {
          "_key": "a73c9e0d",
          "_id": "sections/a73c9e0d",
          "title": "Evaluation Protocol.",
          "level": 5,
          "content": "To evaluate our models, we divide the datasets into in-distribution (ID) and out-of-distribution (OOD) categories. For OOD benchmarks, which we emphasize more, we further categorize them into coding and mathematical reasoning benchmarks. For coding tasks, we evaluate using Evalplus(Liu et\u00a0al.,2023)on the HumanEval+ and MBPP+ benchmarks, as well as LiveCodeBench Generation (v1-5, May 23-Feb 25)(Jain et\u00a0al.,2024). For mathematical reasoning, we utilize six standard benchmarks commonly used in recent zero-shot trained reasoners: AIME\u201924, AIME\u201925, OlympiadBench(He et\u00a0al.,2024), Minerva, Math500(Hendrycks et\u00a0al.,2021), and AMC\u201923. For ID benchmarks, we use CruxEval-I(nput), CruxEval-O(utput), and LiveCodeBench-Execution(Gu et\u00a0al.,2024;Jain et\u00a0al.,2024), which assess reasoning capabilities regarding the input and output of programs(Li et\u00a0al.,2025).Greedy decodingis used for all baseline methods and AZR results to ensure reproducibility.",
          "parent": "f0eeba68",
          "line_number": 315
        },
        {
          "_key": "95cade05",
          "_id": "sections/95cade05",
          "title": "Baselines.",
          "level": 5,
          "content": "For our main results, we useQwen2.5-7Bas the base model, along with its specialized base model variants:Qwen2.5-7B-Coder,Qwen2.5-7B-Instruct, andQwen2.5-Math-7B(Yang et\u00a0al.,2024a;Hui et\u00a0al.,2024;Yang et\u00a0al.,2024b). Furthermore, the zero-style models are usually trained specifically on either code or math data; and onlyEurus-2-7B-PRIME-Zero(Cui et\u00a0al.,2025)was trained jointly on both domains. For code data models, we present four variants of theAceCoder(Zeng et\u00a0al.,2025a)and two differentCodeR1models(Liu & Zhang,2025). For math data models, we haveQwen2.5-Math-7B-Oat-Zero(Liu et\u00a0al.,2025),Open-Reasoner-Zero-7B(ORZ)(Hu et\u00a0al.,2025),Qwen-2.5-7B-SimpleRL-Zoo(Zeng et\u00a0al.,2025b). All baseline models\u2019 training data and initialization settings are summarized inTable4. For follow-up scaling experiments, we compare each AZR model against its own corresponding base model, due to the lack of established baselines across different parameter scales. Finally, we compare ourLlama3.1-8B-trained model withLlama-3.1-8B-SimpleRL-Zoo(Zeng et\u00a0al.,2025b)and the base model.",
          "parent": "f0eeba68",
          "line_number": 319
        },
        {
          "_key": "6b0ce351",
          "_id": "sections/6b0ce351",
          "title": "4.2Results",
          "level": 3,
          "content": "",
          "parent": "3b91a124",
          "line_number": 323
        },
        {
          "_key": "2db03dfe",
          "_id": "sections/2db03dfe",
          "title": "Research Question 1: How does AZR compare to other zero setting models trained with human expert data?",
          "level": 5,
          "content": "We present the main results of reasoning models trained under both the standard zero and our proposed absolute zero settings inTable1. Notably,Absolute Zero Reasoner-Coder-7Bachieves state-of-the-art performance in both the 7B overall average and the coding average categories. Despite being entirely out-of-distribution for both math and code reasoning benchmarks, it surpasses the previous best model by 1.8 absolute percentages. Even more strikingly, it outperforms models trained with expert-curated human data in the coding category by0.30.30.30.3absolute percentages, while never having access to such data itself.\n\nStrong Cross-domain Generalization.To assess cross-domain generalization after RLVR, we evaluate math performance before and after training, comparing AZR models with other expert code models, since AZR was trained in coding environments. After training, most expert code models showed minimal changes or even declines in performance compared to their base versions, with an average increase of only 0.65 points across these models, indicating very limited cross-domain generalization. In contrast, AZR base and coder models achieved gains of 10.9 and 15.2 percentage points, respectively, demonstrating substantially stronger generalized reasoning improvements. Similarly, although also out-of-distribution on human-defined code generation tasks, our AZR models improved by 3.2 and 5.0 points, while the math models on average showed just a moderate increases in coding (+2.0 on average).\n\nOverall, these results highlight the surprising effectiveness of our approach. Unlike other RLVR models trained and evaluated on human-defined tasks, our AZR models demonstrate strong general reasoning capabilities without any direct training on downstream human-defined math or coding data, only had access to self-proposed tasks during training.",
          "parent": "6b0ce351",
          "line_number": 325
        },
        {
          "_key": "6b07b575",
          "_id": "sections/6b07b575",
          "title": "Research Question 2: How do initializing from different base model variants (base vs. coder) affect performance?",
          "level": 5,
          "content": "As shown inTable1, the coder variant achieved better overall performance in both math and coding after the AZR self-play process. Strikingly, although the coder base model variant started with a lower average performance in math than the vanilla base model (23.9 vs. 27.5), it ultimately outperformed it after AZR training. This highlights the importance of initial code competency as a catalyst for enhancing broader reasoning abilities within the Absolute Zero Reasoner approach.",
          "parent": "6b0ce351",
          "line_number": 333
        },
        {
          "_key": "46d670b8",
          "_id": "sections/46d670b8",
          "title": "Research Question 3: How does varying model size effect AZR\u2019s in-distribution and out-of-distribution capabilities?",
          "level": 5,
          "content": "We examine the effects of scaling model size and present both in-distribution and out-of-distribution results inFigure6(a) and (b), respectively. Given the strong performance of coder models in the 7B category, we extend the analysis by evaluating smaller and larger variants:Qwen2.5-3B-CoderandQwen2.5-14B-Coder. Due to the absence of existing baselines for these zero-style reasoner models, we compare each model\u2019s performance to its corresponding base coder model.\n\nThe results reveal a clear trend: our method deliversgreater gains on larger, more capable models. In the in-distribution setting, the 7B and 14B models continue to improve beyond 200 training steps, whereas the smaller 3B model appears to plateau. For out-of-distribution domains, larger models also show greater overall performance improvements than smaller ones: +5.7, +10.2, +13.2 overall performance gains, respectively for 3B, 7B and 14B. This is an encouraging sign, since base models continue to improve and also suggesting that scaling enhances the effectiveness of AZR. In future work, we aim to investigate the scaling laws that govern performance in the Absolute Zero paradigm.\n\n(a)\n\n(b)",
          "parent": "6b0ce351",
          "line_number": 337
        },
        {
          "_key": "8fc4a99f",
          "_id": "sections/8fc4a99f",
          "title": "Research Question 4: Any interesting observations by changing the model class?",
          "level": 5,
          "content": "We also evaluate our method on a different model class, usingLlama3.1-8Bas the base shown inFigure6. Unlike the 3B and 14B categories, this setting has an existing baseline,SimpleRL(Zeng et\u00a0al.,2025b), which enables a direct comparison. AlthoughLlama3.1-8Bis less capable than theQwen2.5models, our method still produces moderate improvements (+3.2), demonstrating AZR\u2019s effectiveness even on relatively weaker models. However, these gains appear more limited, which aligns with our earlier observation that performance improvements tend to scale with initial base model potency.",
          "parent": "6b0ce351",
          "line_number": 347
        },
        {
          "_key": "b089ee80",
          "_id": "sections/b089ee80",
          "title": "Research Question 5: Any interesting behaviors or patterns observed during AZR training?",
          "level": 5,
          "content": "We observed interesting response patterns in both the proposal and solution stages. The model is capable of proposing diverse programs, such as string manipulation tasks, dynamic programming problems, and practical cases (e.g., calculating a triangle\u2019s area using Heron\u2019s formula). We show a concrete example inFigure7, where AZR proposes a code problem that searches for the sum of continuous sub-arrays matching a target value and solves it through trial-and-error.\n\nOverall, the models trained exhibits distinct reasoning patterns depending on the task type. For example, when solving abduction tasks, it repeatedly tests different input patterns, self-correcting until the reasoned output matches the given input. When predicting outputs, it steps through the code and records structured intermediate results (such as dynamic programming arrays) until the final output is reached. When inducting programs from given inputs, outputs, and descriptions, the model systematically checks each test case to confirm that its program produces correct results. We showcase more concrete examples of these behaviors inFigures26,25,24,23,22,21,20and18. We also share some fun \u201cvibe checks\u201d such as solving Sudoku and solving thesum-product gameinFigures40and41.\n\nIntermediate Planning During Code Response.Another interesting pattern emerged in our AZR models during the code induction task: the final code outputs were often interleaved with comments that resembled immediate step-by-step plans, reminiscent of the ReAct prompting framework(Yao et\u00a0al.,2023). A similar behavior has been observed in recent formal math proving models, such asDeepSeek Prover v2, which is significantly larger in scale (671B). This pattern suggests that models may naturally adopt intermediate planning as a strategy to enhance final answers. Therefore, it may be beneficial to explicitly enable or encourage this behavior inlong-form responsesacross other domains.\n\nCognitive Behavior in Llama.Interestingly, we also observed some emergent cognitive patterns inAbsolute Zero Reasoner-Llama3.1-8B, similar to those reported byZeng et\u00a0al.(2025b), and we include one example inFigure26, where clear state-tracking behavior is demonstrated. In addition, we encountered some unusual and potentially concerning chains of thought from the Llama model trained with AZR. One example includes the output: \u201cThe aim is to outsmart all these groups of intelligent machines and less intelligent humans. This is for the brains behind the future\u201d shown inFigure32. We refer to this as the\u201cuh-oh moment\u201dand encourage future work to further investigate its potential implications.\n\nToken Length Increase Depends on Task Type.Finally, we observed that token length increases over the course of training, consistent with findings from recent studies(Hu et\u00a0al.,2025;Liu et\u00a0al.,2025). Interestingly, our results reveal one of the first observation of clear distinctions in token length growth across different types of cognitive tasks. As shown inFigures15,17and16, the extent of lengthening varies by task type. The most significant increase occurs in the abduction task, where the model engages in trial-and-error reasoning by repeatedly testing inputs to match the program\u2019s output. This suggests that the observed variation in token length is not incidental, but rather a reflection of task-specific reasoning behavior.",
          "parent": "6b0ce351",
          "line_number": 351
        },
        {
          "_key": "017cc2e8",
          "_id": "sections/017cc2e8",
          "title": "Research Question 6: Are all task types essential for good performance (Ablation)?",
          "level": 5,
          "content": "Due to resource constraints, we perform the ablation studies in this section and the next using onlyAbsolute Zero Reasoner-Base-7B. We begin by testing the importance of task types during training, with results shown inTable2. In row 1, both induction and abduction tasks are removed; in row 2, only the induction task is removed. In both cases, math performance drops significantly, with the most severe degradation occurring when more task types are excluded. These findings highlight the complementary role of the three task types in improving general reasoning capability, with each contributing in a distinct and essential way.",
          "parent": "6b0ce351",
          "line_number": 363
        },
        {
          "_key": "2288ee05",
          "_id": "sections/2288ee05",
          "title": "Research Question 7: How much do the designs of proposer contribute to the overall performance (Ablation)?",
          "level": 5,
          "content": "Next, we ablate two components of the proposer role and present the results inTable2. First, we examine whether conditioning on historic reference triplets is necessary. To do so, we design a variant in which a fixed prompt is used to propose abduction and deduction tasks, rather than dynamically conditioning onK\ud835\udc3eKitalic_Khistorical triplets (row 3). This results in a 5-point absolute drop in math performance and a 1-point drop in code performance. This suggest that dynamically conditioning on reference programs helps improve performance, possibly by increasing diversity and achieving better coverage of the reasoning problem space.\n\nFinally, we consider a case where we do not train the proposer at all. Instead, we only prompt it using the current learner and train the solver alone (row 4). We observe a moderate drop in overall performance (-1.4), suggesting that while proposer training is beneficial, it may not be the most critical factor for now in the AZR framework. We hypothesize that this could be related to task interference, as studied in multitask learning literature(Suteu & Guo,2019). Thus, we believe that further investigation into how to make the proposer even more potent is an exciting and promising direction.",
          "parent": "6b0ce351",
          "line_number": 367
        },
        {
          "_key": "66a40f15",
          "_id": "sections/66a40f15",
          "title": "Additional Results.",
          "level": 5,
          "content": "Beyond the core research questions, we present additional results, including the breakdown of individual out-of-distribution benchmark scores during training for the 7B base and coder models inFigures28and29, for th 14B base and coder model inFigures30and31. For completeness, we also report in-distribution benchmark performance during training for the 7B base model inFigure14. Finally, we invite interested readers to exploreAppendixD, where we share several experimental directions that, while not yielding strong performance gains, produced interesting and insightful findings.",
          "parent": "6b0ce351",
          "line_number": 373
        },
        {
          "_key": "024d8389",
          "_id": "sections/024d8389",
          "title": "5Related Work",
          "level": 2,
          "content": "",
          "parent": null,
          "line_number": 377
        },
        {
          "_key": "bcdcc6bb",
          "_id": "sections/bcdcc6bb",
          "title": "Reasoning with RL.",
          "level": 5,
          "content": "Using RL to enhance reasoning capabilities has recently emerged as an important step in the post-training process of strong reasoning-focused large language models(Lambert et\u00a0al.,2024). One of the first works to explore a self-bootstrapping approach to improving LLM reasoning is STaR, which employs expert iteration and rejection sampling of outcome-verified responses to iteratively improve the model\u2019s CoT. A monumental work, o1(Jaech et\u00a0al.,2024), was among the first to deploy this idea on a scale, achieving state-of-the-art results in reasoning tasks at the time of release. More recently, the R1 model(DeepSeek-AI et\u00a0al.,2025)became the first open-weight model to match or even surpass the performance of o1. Most notably, the zero setting was introduced, in which reinforcement learning is applied directly on top of the base LLM. This inspired followup work, which are open source attempts to replicate the R1 process or to improve the underlying reinforcement learning algorithm(Zeng et\u00a0al.,2025b;Liu et\u00a0al.,2025;Cui et\u00a0al.,2025;Hu et\u00a0al.,2025;Yu et\u00a0al.,2025;Yuan et\u00a0al.,2025). Recent work explored RL on human defined procedural generated puzzles saw improvements in math(Xie et\u00a0al.,2025), and using one human example can almost match the performance of thousands(Wang et\u00a0al.,2025b). We extend the zero setting to a new absolute zero setting, where not only is the RLVR process initialized from a base LLM without SFT, but no external prompt data or answers are provided to the learner. All data used to improve reasoning were self-proposed, and refined entirely through RLVR. Moreover, our goal is not to only match zero-setting models, but to surpass them in the long run.",
          "parent": "024d8389",
          "line_number": 379
        },
        {
          "_key": "f745db10",
          "_id": "sections/f745db10",
          "title": "Self-play.",
          "level": 5,
          "content": "The self-play paradigm can be traced back to early 2000s, whereSchmidhuber(2003;2011)(of course) explored a two-agent setup in which a proposal agent invents questions for a prediction agent to answer. This dynamic continuously and automatically improves both agents, enabling theoretically never-ending progress(Schaul,2024). AlphaGo and AlphaZero(Silver et\u00a0al.,2016;2017)extend the self-play paradigm to the two-player zero-sum game of Go, where the current learner competes against earlier versions of itself to progressively enhance its capabilities. These were among the first milestone works to demonstrate superhuman performance in the game of Go. Moreover, methods such as asymmetric self-play(Sukhbaatar et\u00a0al.,2018;OpenAI et\u00a0al.,2021), unsupervised environment design(Wang et\u00a0al.,2019;Dennis et\u00a0al.,2020), unsupervised reinforcement learning(Laskin et\u00a0al.,2021;Zhao et\u00a0al.,2022;2025b), and automatic goal generation(Florensa et\u00a0al.,2018)all center around inventing new tasks for an agent to learn from\u2014typically without supervision. In these approaches, the process of setting goals itself is often dynamic and continuously evolving. Generative adversarial networks(Goodfellow et\u00a0al.,2020), also belong in this paradigm where a discriminator discriminate between real data and generated data, and the generated is trained to fool the discriminator.\n\nMost recently, SPIN and Self-Rewarding Language Models(Chen et\u00a0al.,2024;Yuan et\u00a0al.,2024)use the same instance of the lanugage models themselves as the reward model to progressively improve the generative and discriminative abilities of the same LLM for alignment.Kirchner et\u00a0al.(2024)uses Prover-Verifier Game for increasing legibility and eva(Ye et\u00a0al.,2024)uses self-play for alignment, but reward model is the main bottleneck as it is not reliable for reasoning tasks(Lambert et\u00a0al.,2024). SPCChen et\u00a0al.(2025)used self-play to train on human-curated tasks to increase the critic capabilities and SPAGCheng et\u00a0al.(2024)trained using self-play in specific game of Adversarial Taboo. Concurrent works\u2014Genius, EMPO, and TTRL(Xu et\u00a0al.,2025;Zhang et\u00a0al.,2025b;Zuo et\u00a0al.,2025)\u2014leverage human-curated language queries without labels to train reinforcement learning agents, but still rely on a fixed human defined learning task distribution. Finally, Minimo(Poesia et\u00a0al.,2024)extends self-play to formal mathematics, where a pair of conjecture- and theorem-proving agents are jointly trained using reinforcement learning. Our work builds upon the self-play paradigm, but it is the first to use it to elicit long CoT for improved reasoning, and the first to frame the problem space as a Python input/output/function abduction/deduction/induction tasks, grounding it in an operationalizable environment to facilitate RLVR.",
          "parent": "024d8389",
          "line_number": 383
        },
        {
          "_key": "b41f15e0",
          "_id": "sections/b41f15e0",
          "title": "Weak-to-Strong Supervision.",
          "level": 5,
          "content": "The concept of weak-to-strong supervision has been studied in prior work, where a teacher\u2014despite being weaker than the learner\u2014still provides useful guidance(Burns et\u00a0al.,2024;Hinton et\u00a0al.,2015;Christiano,2018;2019;Demski & Garrabrant,2019;Leike & Sutskever,2023;Hubinger et\u00a0al.,2019). We consider a similar setting in which the learner may possess superhuman capabilities. However, rather than relying on supervision from a weaker teacher, we propose an alternative approach: guiding the learner\u2019s improvement through verifiable rewards, which potentially offer a more reliable and scalable learning signal. Furthermore, in our proposed method, the learning task and goal distribution is not predefined by any external supervisor\u2014they are entirely self-generated by the learner, enabling it to maximize its learning potential through autonomous self-practice.",
          "parent": "024d8389",
          "line_number": 389
        },
        {
          "_key": "842b5e27",
          "_id": "sections/842b5e27",
          "title": "6Conclusion and Discussion",
          "level": 2,
          "content": "",
          "parent": null,
          "line_number": 393
        },
        {
          "_key": "6a59bd38",
          "_id": "sections/6a59bd38",
          "title": "Conclusion.",
          "level": 5,
          "content": "In this work, we proposed the Absolute Zero paradigm, a novel setting that addresses the data limitations of existing RLVR frameworks. In this paradigm, reasoning agents are tasked with generating their own learning task distributions and improving their reasoning abilities with environmental guidance. We then presented our own instantiation, the Absolute Zero Reasoner (AZR), which is trained by having them propose and solve code-related reasoning tasks grounded by code executor.\n\nWe evaluated our trained models on out-of-distribution benchmarks in both the code generation and mathematical reasoning domains. Remarkably, even though our models were not directly trained on these tasks and lacked human expert-curated datasets, our reasoning agents achieved exceptional performance, surpassing the state-of-the-art in combined general reasoning scores and in coding. This demonstrates the potential of the absolute zero paradigm to drive superior reasoning capabilities without the need for extensive domain-specific training data. Furthermore, we showed that AZR scales efficiently, offering strong performance across varying model sizes, and can enhance the capabilities of other model classes as well. To foster further exploration and advancement of this emerging paradigm, we are releasing the code, models, and logs as open-source, encouraging the research community to build upon our findings.",
          "parent": "842b5e27",
          "line_number": 395
        },
        {
          "_key": "dc07cb99",
          "_id": "sections/dc07cb99",
          "title": "Discussion.",
          "level": 5,
          "content": "We believe there remains much to explore, such as altering the environment from which the reasoner receives verifiable feedback, including sources like the world wide web, formal math languagesSutton(2001);Ren et\u00a0al.(2025), world simulators, or even the real world. Furthermore, AZ\u2019s generality could possibly be extend to domains such as embodied AI(Zitkovich et\u00a0al.,2023;Yue et\u00a0al.,2024). Additionally, more complex agentic tasks or scientific experiments, present exciting opportunities to further advance the absolute zero setting to different application domains(Wu et\u00a0al.,2024;2023). Beyond that, future directions could include exploring multimodal reasoning models, modifying the distributionp\u2062(z)\ud835\udc5d\ud835\udc67p(z)italic_p ( italic_z )to incorporate privileged information, defining or even let the model dynamically learn how to definef\ud835\udc53fitalic_f(Equation3), or designing exploration/diversity rewards for both the propose and solve roles.\n\nWhile underappreciated in current reasoning literature, the exploration component of RL has long been recognized as a critical driver for emergent behavior in traditional RL(Yue et\u00a0al.,2025;Silver et\u00a0al.,2016;Ladosz et\u00a0al.,2022). Years of research have examined various forms of exploration, even in related subfields using LLMs such as red teamingZhao et\u00a0al.(2025a), yet its role in LLM reasoning models remains underexplored. Taking this a step further, our framework investigates an even more meta-level exploration problem: exploration within the learning task space\u2014where the agent learns not just how to solve tasks, but what tasks to learn from and how to find them. Rather than being confined to a fixed problem set, AI reasoner agents may benefit from dynamically defining and refining their own learning tasks. This shift opens a powerful new frontier\u2014where agents explore not only solution spaces but also expand the boundaries of problem spaces. We believe this is a promising and important direction for future research.\n\nOne limitation of our work is that we did not address how to safely manage a system composed of such self-improving components. To our surprise, we observed several instances of safety-concerning CoT from theLlama-3.1-8Bmodel, which we term the \u201cuh-oh moment\u201d. These findings suggest that the proposed absolute zero paradigm, while reducing the need for human intervention for curating tasks, still necessitates oversight due to lingering safety concerns and is a critical direction for future researchWang et\u00a0al.(2024;2025a).\n\nAs a final note, we explored reasoning models that possess experience\u2014models that not only solve given tasks, but also define and evolve their own learning task distributions with the help of an environment. Our results with AZR show that this shift enables strong performance across diverse reasoning tasks, even with significantly fewer privileged resources, such as curated human data. We believe this could finally free reasoning models from the constraints of human-curated data(Morris,2025)and marks the beginning of a new chapter for reasoning models:\u201cwelcome to the era of experience\u201dSilver & Sutton(2025);Zhao et\u00a0al.(2024).",
          "parent": "842b5e27",
          "line_number": 401
        },
        {
          "_key": "01ba5c18",
          "_id": "sections/01ba5c18",
          "title": "References",
          "level": 2,
          "content": "Aryabumi et\u00a0al. (2024)Aryabumi, V., Su, Y., Ma, R., Morisot, A., Zhang, I., Locatelli, A., Fadaee, M., \u00dcst\u00fcn, A., and Hooker, S.To code, or not to code? exploring impact of code in pre-training.CoRR, abs/2408.10914, 2024.doi:10.48550/ARXIV.2408.10914.URLhttps://doi.org/10.48550/arXiv.2408.10914.\n\nBurns et\u00a0al. (2024)Burns, C., Izmailov, P., Kirchner, J.\u00a0H., Baker, B., Gao, L., Aschenbrenner, L., Chen, Y., Ecoffet, A., Joglekar, M., Leike, J., Sutskever, I., and Wu, J.Weak-to-strong generalization: Eliciting strong capabilities with weak supervision.InForty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024. OpenReview.net, 2024.URLhttps://openreview.net/forum?id=ghNRg2mEgN.\n\nCanal (2023)Canal, M.Radon: Python tool for code metrics.https://github.com/rubik/radon, 2023.Accessed: 2025-04-06.\n\nChen et\u00a0al. (2025)Chen, J., Zhang, B., Ma, R., Wang, P., Liang, X., Tu, Z., Li, X., and Wong, K.-Y.\u00a0K.Spc: Evolving self-play critic via adversarial games for llm reasoning, 2025.URLhttps://arxiv.org/abs/2504.19162.\n\nChen et\u00a0al. (2024)Chen, Z., Deng, Y., Yuan, H., Ji, K., and Gu, Q.Self-play fine-tuning converts weak language models to strong language models.InForty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024. OpenReview.net, 2024.URLhttps://openreview.net/forum?id=O4cHTxW9BS.\n\nCheng et\u00a0al. (2024)Cheng, P., Hu, T., Xu, H., Zhang, Z., Dai, Y., Han, L., Du, N., and Li, X.Self-playing adversarial language game enhances LLM reasoning.In Globersons, A., Mackey, L., Belgrave, D., Fan, A., Paquet, U., Tomczak, J.\u00a0M., and Zhang, C. (eds.),Advances in Neural Information Processing Systems 38: Annual Conference on Neural Information Processing Systems 2024, NeurIPS 2024, Vancouver, BC, Canada, December 10 - 15, 2024, 2024.URLhttp://papers.nips.cc/paper_files/paper/2024/hash/e4be7e9867ef163563f4a5e90cec478f-Abstract-Conference.html.\n\nChristiano (2018)Christiano, P.Approval-directed bootstrapping.https://www.alignmentforum.org/posts/6x7oExXi32ot6HjJv/approval-directed-bootstrapping, 2018.AI Alignment Forum.\n\nChristiano (2019)Christiano, P.Capability amplification.https://www.alignmentforum.org/posts/t3AJW5jP3sk36aGoC/capability-amplification-1, 2019.AI Alignment Forum.\n\nCui et\u00a0al. (2025)Cui, G., Yuan, L., Wang, Z., Wang, H., Li, W., He, B., Fan, Y., Yu, T., Xu, Q., Chen, W., Yuan, J., Chen, H., Zhang, K., Lv, X., Wang, S., Yao, Y., Han, X., Peng, H., Cheng, Y., Liu, Z., Sun, M., Zhou, B., and Ding, N.Process reinforcement through implicit rewards.CoRR, abs/2502.01456, 2025.doi:10.48550/ARXIV.2502.01456.URLhttps://doi.org/10.48550/arXiv.2502.01456.\n\nDeepSeek-AI et\u00a0al. (2025)DeepSeek-AI, Guo, D., Yang, D., Zhang, H., Song, J., Zhang, R., Xu, R., Zhu, Q., Ma, S., Wang, P., Bi, X., Zhang, X., Yu, X., Wu, Y., Wu, Z.\u00a0F., Gou, Z., Shao, Z., Li, Z., Gao, Z., Liu, A., Xue, B., Wang, B., Wu, B., Feng, B., Lu, C., Zhao, C., Deng, C., Zhang, C., Ruan, C., Dai, D., Chen, D., Ji, D., Li, E., Lin, F., Dai, F., Luo, F., Hao, G., Chen, G., Li, G., Zhang, H., Bao, H., Xu, H., Wang, H., Ding, H., Xin, H., Gao, H., Qu, H., Li, H., Guo, J., Li, J., Wang, J., Chen, J., Yuan, J., Qiu, J., Li, J., Cai, J.\u00a0L., Ni, J., Liang, J., Chen, J., Dong, K., Hu, K., Gao, K., Guan, K., Huang, K., Yu, K., Wang, L., Zhang, L., Zhao, L., Wang, L., Zhang, L., Xu, L., Xia, L., Zhang, M., Zhang, M., Tang, M., Li, M., Wang, M., Li, M., Tian, N., Huang, P., Zhang, P., Wang, Q., Chen, Q., Du, Q., Ge, R., Zhang, R., Pan, R., Wang, R., Chen, R.\u00a0J., Jin, R.\u00a0L., Chen, R., Lu, S., Zhou, S., Chen, S., Ye, S., Wang, S., Yu, S., Zhou, S., Pan, S., and Li, S.\u00a0S.Deepseek-r1: Incentivizing reasoning capability in llms via reinforcement learning.CoRR, abs/2501.12948, 2025.doi:10.48550/ARXIV.2501.12948.URLhttps://doi.org/10.48550/arXiv.2501.12948.\n\nDemski & Garrabrant (2019)Demski, A. and Garrabrant, S.Embedded agency.CoRR, abs/1902.09469, 2019.URLhttp://arxiv.org/abs/1902.09469.\n\nDennis et\u00a0al. (2020)Dennis, M., Jaques, N., Vinitsky, E., Bayen, A.\u00a0M., Russell, S., Critch, A., and Levine, S.Emergent complexity and zero-shot transfer via unsupervised environment design.In Larochelle, H., Ranzato, M., Hadsell, R., Balcan, M., and Lin, H. (eds.),Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020, virtual, 2020.URLhttps://proceedings.neurips.cc/paper/2020/hash/985e9a46e10005356bbaf194249f6856-Abstract.html.\n\nDubey et\u00a0al. (2024)Dubey, A., Jauhri, A., Pandey, A., Kadian, A., Al-Dahle, A., Letman, A., Mathur, A., Schelten, A., Yang, A., Fan, A., Goyal, A., Hartshorn, A., Yang, A., Mitra, A., Sravankumar, A., Korenev, A., Hinsvark, A., Rao, A., Zhang, A., Rodriguez, A., Gregerson, A., Spataru, A., Rozi\u00e8re, B., Biron, B., Tang, B., Chern, B., Caucheteux, C., Nayak, C., Bi, C., Marra, C., McConnell, C., Keller, C., Touret, C., Wu, C., Wong, C., Ferrer, C.\u00a0C., Nikolaidis, C., Allonsius, D., Song, D., Pintz, D., Livshits, D., Esiobu, D., Choudhary, D., Mahajan, D., Garcia-Olano, D., Perino, D., Hupkes, D., Lakomkin, E., AlBadawy, E., Lobanova, E., Dinan, E., Smith, E.\u00a0M., Radenovic, F., Zhang, F., Synnaeve, G., Lee, G., Anderson, G.\u00a0L., Nail, G., Mialon, G., Pang, G., Cucurell, G., Nguyen, H., Korevaar, H., Xu, H., Touvron, H., Zarov, I., Ibarra, I.\u00a0A., Kloumann, I.\u00a0M., Misra, I., Evtimov, I., Copet, J., Lee, J., Geffert, J., Vranes, J., Park, J., Mahadeokar, J., Shah, J., van\u00a0der Linde, J., Billock, J., Hong, J., Lee, J., Fu,\nJ., Chi, J., Huang, J., Liu, J., Wang, J., Yu, J., Bitton, J., Spisak, J., Park, J., Rocca, J., Johnstun, J., Saxe, J., Jia, J., Alwala, K.\u00a0V., Upasani, K., Plawiak, K., Li, K., Heafield, K., Stone, K., and et\u00a0al.The llama 3 herd of models.CoRR, abs/2407.21783, 2024.doi:10.48550/ARXIV.2407.21783.URLhttps://doi.org/10.48550/arXiv.2407.21783.\n\nEbert et\u00a0al. (2016)Ebert, C., Cain, J., Antoniol, G., Counsell, S., and Laplante, P.Cyclomatic complexity.IEEE software, 33(6):27\u201329, 2016.\n\nFlorensa et\u00a0al. (2018)Florensa, C., Held, D., Geng, X., and Abbeel, P.Automatic goal generation for reinforcement learning agents.In Dy, J.\u00a0G. and Krause, A. (eds.),Proceedings of the 35th International Conference on Machine Learning, ICML 2018, Stockholmsm\u00e4ssan, Stockholm, Sweden, July 10-15, 2018, volume\u00a080 ofProceedings of Machine Learning Research, pp.\u00a0 1514\u20131523. PMLR, 2018.URLhttp://proceedings.mlr.press/v80/florensa18a.html.\n\nGoodfellow et\u00a0al. (2020)Goodfellow, I.\u00a0J., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S., Courville, A.\u00a0C., and Bengio, Y.Generative adversarial networks.Commun. ACM, 63(11):139\u2013144, 2020.doi:10.1145/3422622.URLhttps://doi.org/10.1145/3422622.\n\nGu et\u00a0al. (2024)Gu, A., Rozi\u00e8re, B., Leather, H.\u00a0J., Solar-Lezama, A., Synnaeve, G., and Wang, S.Cruxeval: A benchmark for code reasoning, understanding and execution.InForty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024. OpenReview.net, 2024.URLhttps://openreview.net/forum?id=Ffpg52swvg.\n\nHalstead (1977)Halstead, M.\u00a0H.Elements of Software Science (Operating and programming systems series).Elsevier Science Inc., 1977.\n\nHe et\u00a0al. (2024)He, C., Luo, R., Bai, Y., Hu, S., Thai, Z.\u00a0L., Shen, J., Hu, J., Han, X., Huang, Y., Zhang, Y., Liu, J., Qi, L., Liu, Z., and Sun, M.Olympiadbench: A challenging benchmark for promoting AGI with olympiad-level bilingual multimodal scientific problems.In Ku, L., Martins, A., and Srikumar, V. (eds.),Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2024, Bangkok, Thailand, August 11-16, 2024, pp.\u00a0 3828\u20133850. Association for Computational Linguistics, 2024.doi:10.18653/V1/2024.ACL-LONG.211.URLhttps://doi.org/10.18653/v1/2024.acl-long.211.\n\nHendrycks et\u00a0al. (2021)Hendrycks, D., Burns, C., Kadavath, S., Arora, A., Basart, S., Tang, E., Song, D., and Steinhardt, J.Measuring mathematical problem solving with the MATH dataset.In Vanschoren, J. and Yeung, S. (eds.),Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks 1, NeurIPS Datasets and Benchmarks 2021, December 2021, virtual, 2021.URLhttps://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/be83ab3ecd0db773eb2dc1b0a17836a1-Abstract-round2.html.\n\nHinton et\u00a0al. (2015)Hinton, G.\u00a0E., Vinyals, O., and Dean, J.Distilling the knowledge in a neural network.CoRR, abs/1503.02531, 2015.URLhttp://arxiv.org/abs/1503.02531.\n\nHu (2025)Hu, J.REINFORCE++: A simple and efficient approach for aligning large language models.CoRR, abs/2501.03262, 2025.doi:10.48550/ARXIV.2501.03262.URLhttps://doi.org/10.48550/arXiv.2501.03262.\n\nHu et\u00a0al. (2025)Hu, J., Zhang, Y., Han, Q., Jiang, D., Zhang, X., and Shum, H.Open-reasoner-zero: An open source approach to scaling up reinforcement learning on the base model.CoRR, abs/2503.24290, 2025.doi:10.48550/ARXIV.2503.24290.URLhttps://doi.org/10.48550/arXiv.2503.24290.\n\nHubinger et\u00a0al. (2019)Hubinger, E., van Merwijk, C., Mikulik, V., Skalse, J., and Garrabrant, S.Risks from learned optimization in advanced machine learning systems.CoRR, abs/1906.01820, 2019.URLhttp://arxiv.org/abs/1906.01820.\n\nHughes et\u00a0al. (2024)Hughes, E., Dennis, M.\u00a0D., Parker-Holder, J., Behbahani, F. M.\u00a0P., Mavalankar, A., Shi, Y., Schaul, T., and Rockt\u00e4schel, T.Position: Open-endedness is essential for artificial superhuman intelligence.InForty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024. OpenReview.net, 2024.URLhttps://openreview.net/forum?id=Bc4vZ2CX7E.\n\nHui et\u00a0al. (2024)Hui, B., Yang, J., Cui, Z., Yang, J., Liu, D., Zhang, L., Liu, T., Zhang, J., Yu, B., Dang, K., Yang, A., Men, R., Huang, F., Ren, X., Ren, X., Zhou, J., and Lin, J.Qwen2.5-coder technical report.CoRR, abs/2409.12186, 2024.doi:10.48550/ARXIV.2409.12186.URLhttps://doi.org/10.48550/arXiv.2409.12186.\n\nJaech et\u00a0al. (2024)Jaech, A., Kalai, A., Lerer, A., Richardson, A., El-Kishky, A., Low, A., Helyar, A., Madry, A., Beutel, A., Carney, A., et\u00a0al.Openai o1 system card.arXiv preprint arXiv:2412.16720, 2024.\n\nJain et\u00a0al. (2024)Jain, N., Han, K., Gu, A., Li, W., Yan, F., Zhang, T., Wang, S., Solar-Lezama, A., Sen, K., and Stoica, I.Livecodebench: Holistic and contamination free evaluation of large language models for code.CoRR, abs/2403.07974, 2024.doi:10.48550/ARXIV.2403.07974.URLhttps://doi.org/10.48550/arXiv.2403.07974.\n\nKirchner et\u00a0al. (2024)Kirchner, J.\u00a0H., Chen, Y., Edwards, H., Leike, J., McAleese, N., and Burda, Y.Prover-verifier games improve legibility of LLM outputs.CoRR, abs/2407.13692, 2024.doi:10.48550/ARXIV.2407.13692.URLhttps://doi.org/10.48550/arXiv.2407.13692.\n\nLadosz et\u00a0al. (2022)Ladosz, P., Weng, L., Kim, M., and Oh, H.Exploration in deep reinforcement learning: A survey.Inf. Fusion, 85:1\u201322, 2022.doi:10.1016/J.INFFUS.2022.03.003.URLhttps://doi.org/10.1016/j.inffus.2022.03.003.\n\nLambert et\u00a0al. (2024)Lambert, N., Morrison, J., Pyatkin, V., Huang, S., Ivison, H., Brahman, F., Miranda, L. J.\u00a0V., Liu, A., Dziri, N., Lyu, S., Gu, Y., Malik, S., Graf, V., Hwang, J.\u00a0D., Yang, J., Bras, R.\u00a0L., Tafjord, O., Wilhelm, C., Soldaini, L., Smith, N.\u00a0A., Wang, Y., Dasigi, P., and Hajishirzi, H.T\u00fclu 3: Pushing frontiers in open language model post-training.CoRR, abs/2411.15124, 2024.doi:10.48550/ARXIV.2411.15124.URLhttps://doi.org/10.48550/arXiv.2411.15124.\n\nLaskin et\u00a0al. (2021)Laskin, M., Yarats, D., Liu, H., Lee, K., Zhan, A., Lu, K., Cang, C., Pinto, L., and Abbeel, P.URLB: unsupervised reinforcement learning benchmark.In Vanschoren, J. and Yeung, S. (eds.),Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks 1, NeurIPS Datasets and Benchmarks 2021, December 2021, virtual, 2021.URLhttps://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/091d584fced301b442654dd8c23b3fc9-Abstract-round2.html.\n\nLeike & Sutskever (2023)Leike, J. and Sutskever, I.Introducing superalignment.https://openai.com/index/introducing-superalignment/, 2023.OpenAI Blog.\n\nLi et\u00a0al. (2025)Li, J., Guo, D., Yang, D., Xu, R., Wu, Y., and He, J.Codei/o: Condensing reasoning patterns via code input-output prediction.CoRR, abs/2502.07316, 2025.doi:10.48550/ARXIV.2502.07316.URLhttps://doi.org/10.48550/arXiv.2502.07316.\n\nLi et\u00a0al. (2023)Li, R., Fu, J., Zhang, B., Huang, T., Sun, Z., Lyu, C., Liu, G., Jin, Z., and Li, G.TACO: topics in algorithmic code generation dataset.CoRR, abs/2312.14852, 2023.doi:10.48550/ARXIV.2312.14852.URLhttps://doi.org/10.48550/arXiv.2312.14852.\n\nLiu & Zhang (2025)Liu, J. and Zhang, L.Code-r1: Reproducing r1 for code with reliable rewards.GitHub, 2025.\n\nLiu et\u00a0al. (2023)Liu, J., Xia, C.\u00a0S., Wang, Y., and Zhang, L.Is your code generated by chatGPT really correct? rigorous evaluation of large language models for code generation.InThirty-seventh Conference on Neural Information Processing Systems, 2023.URLhttps://openreview.net/forum?id=1qvx610Cu7.\n\nLiu et\u00a0al. (2025)Liu, Z., Chen, C., Li, W., Qi, P., Pang, T., Du, C., Lee, W.\u00a0S., and Lin, M.Understanding r1-zero-like training: A critical perspective.CoRR, abs/2503.20783, 2025.doi:10.48550/ARXIV.2503.20783.URLhttps://doi.org/10.48550/arXiv.2503.20783.\n\nLopez (2025)Lopez, R. H.\u00a0Q.Complexipy: An extremely fast python library to calculate the cognitive complexity of python files, written in rust, 2025.URLhttps://github.com/rohaquinlop/complexipy.Accessed: 2025-04-06.\n\nLoshchilov & Hutter (2019)Loshchilov, I. and Hutter, F.Decoupled weight decay regularization.In7th International Conference on Learning Representations, ICLR 2019, New Orleans, LA, USA, May 6-9, 2019. OpenReview.net, 2019.URLhttps://openreview.net/forum?id=Bkg6RiCqY7.\n\nMorris (2025)Morris, J.There are no new ideas in ai\u2026 only new datasets.https://blog.jxmo.io/p/there-are-no-new-ideas-in-ai-only, 2025.\n\nOpenAI (2025a)OpenAI.Openai o3-mini, January 2025a.URLhttps://openai.com/index/openai-o3-mini/.Accessed: 2025-04-17.\n\nOpenAI (2025b)OpenAI.Introducing openai o3 and o4-mini, April 2025b.URLhttps://openai.com/index/introducing-o3-and-o4-mini/.Accessed: 2025-04-17.\n\nOpenAI et\u00a0al. (2021)OpenAI, Plappert, M., Sampedro, R., Xu, T., Akkaya, I., Kosaraju, V., Welinder, P., D\u2019Sa, R., Petron, A., de\u00a0Oliveira\u00a0Pinto, H.\u00a0P., Paino, A., Noh, H., Weng, L., Yuan, Q., Chu, C., and Zaremba, W.Asymmetric self-play for automatic goal discovery in robotic manipulation.CoRR, abs/2101.04882, 2021.URLhttps://arxiv.org/abs/2101.04882.\n\nOuyang et\u00a0al. (2022)Ouyang, L., Wu, J., Jiang, X., Almeida, D., Wainwright, C., Mishkin, P., Zhang, C., Agarwal, S., Slama, K., Ray, A., et\u00a0al.Training language models to follow instructions with human feedback.Advances in neural information processing systems, 35:27730\u201327744, 2022.\n\nPoesia et\u00a0al. (2024)Poesia, G., Broman, D., Haber, N., and Goodman, N.\u00a0D.Learning formal mathematics from intrinsic motivation.In Globersons, A., Mackey, L., Belgrave, D., Fan, A., Paquet, U., Tomczak, J.\u00a0M., and Zhang, C. (eds.),Advances in Neural Information Processing Systems 38: Annual Conference on Neural Information Processing Systems 2024, NeurIPS 2024, Vancouver, BC, Canada, December 10 - 15, 2024, 2024.URLhttp://papers.nips.cc/paper_files/paper/2024/hash/4b8001fc75f0532827472ea5a16af9ca-Abstract-Conference.html.\n\nRadford et\u00a0al. (2019)Radford, A., Wu, J., Child, R., Luan, D., Amodei, D., Sutskever, I., et\u00a0al.Language models are unsupervised multitask learners.OpenAI blog, 1(8):9, 2019.\n\nRen et\u00a0al. (2025)Ren, Z.\u00a0Z., Shao, Z., Song, J., Xin, H., Wang, H., Zhao, W., Zhang, L., Fu, Z., Zhu, Q., Yang, D., Wu, Z.\u00a0F., Gou, Z., Ma, S., Tang, H., Liu, Y., Gao, W., Guo, D., and Ruan, C.Deepseek-prover-v2: Advancing formal mathematical reasoning via reinforcement learning for subgoal decomposition, 2025.URLhttps://arxiv.org/abs/2504.21801.\n\nSchaul (2024)Schaul, T.Boundless socratic learning with language games.arXiv preprint arXiv:2411.16905, 2024.\n\nSchmidhuber (2003)Schmidhuber, J.Exploring the predictable.InAdvances in evolutionary computing: theory and applications, pp.\u00a0 579\u2013612. Springer, 2003.\n\nSchmidhuber (2011)Schmidhuber, J.POWERPLAY: training an increasingly general problem solver by continually searching for the simplest still unsolvable problem.CoRR, abs/1112.5309, 2011.URLhttp://arxiv.org/abs/1112.5309.\n\nShao et\u00a0al. (2024)Shao, Z., Wang, P., Zhu, Q., Xu, R., Song, J., Zhang, M., Li, Y.\u00a0K., Wu, Y., and Guo, D.Deepseekmath: Pushing the limits of mathematical reasoning in open language models.CoRR, abs/2402.03300, 2024.doi:10.48550/ARXIV.2402.03300.URLhttps://doi.org/10.48550/arXiv.2402.03300.\n\nSheng et\u00a0al. (2025)Sheng, G., Zhang, C., Ye, Z., Wu, X., Zhang, W., Zhang, R., Peng, Y., Lin, H., and Wu, C.Hybridflow: A flexible and efficient RLHF framework.InProceedings of the Twentieth European Conference on Computer Systems, EuroSys 2025, Rotterdam, The Netherlands, 30 March 2025 - 3 April 2025, pp.\u00a0 1279\u20131297. ACM, 2025.doi:10.1145/3689031.3696075.URLhttps://doi.org/10.1145/3689031.3696075.\n\nSilver & Sutton (2025)Silver, D. and Sutton, R.\u00a0S.The era of experience.https://storage.googleapis.com/deepmind-media/Era-of-Experience%20/The%20Era%20of%20Experience%20Paper.pdf, 2025.\n\nSilver et\u00a0al. (2016)Silver, D., Huang, A., Maddison, C.\u00a0J., Guez, A., Sifre, L., van\u00a0den Driessche, G., Schrittwieser, J., Antonoglou, I., Panneershelvam, V., Lanctot, M., Dieleman, S., Grewe, D., Nham, J., Kalchbrenner, N., Sutskever, I., Lillicrap, T.\u00a0P., Leach, M., Kavukcuoglu, K., Graepel, T., and Hassabis, D.Mastering the game of go with deep neural networks and tree search.Nat., 529(7587):484\u2013489, 2016.doi:10.1038/NATURE16961.URLhttps://doi.org/10.1038/nature16961.\n\nSilver et\u00a0al. (2017)Silver, D., Hubert, T., Schrittwieser, J., Antonoglou, I., Lai, M., Guez, A., Lanctot, M., Sifre, L., Kumaran, D., Graepel, T., Lillicrap, T.\u00a0P., Simonyan, K., and Hassabis, D.Mastering chess and shogi by self-play with a general reinforcement learning algorithm.CoRR, abs/1712.01815, 2017.URLhttp://arxiv.org/abs/1712.01815.\n\nStuart (2015)Stuart, T.Understanding computation - from simple machines to impossible programs.O\u2019Reilly, 2015.ISBN 978-1-449-32927-3.URLhttp://www.oreilly.de/catalog/9781449329273/index.html.\n\nSukhbaatar et\u00a0al. (2018)Sukhbaatar, S., Lin, Z., Kostrikov, I., Synnaeve, G., Szlam, A., and Fergus, R.Intrinsic motivation and automatic curricula via asymmetric self-play.In6th International Conference on Learning Representations, ICLR 2018, Vancouver, BC, Canada, April 30 - May 3, 2018, Conference Track Proceedings. OpenReview.net, 2018.URLhttps://openreview.net/forum?id=SkT5Yg-RZ.\n\nSuteu & Guo (2019)Suteu, M. and Guo, Y.Regularizing deep multi-task networks using orthogonal gradients.CoRR, abs/1912.06844, 2019.URLhttp://arxiv.org/abs/1912.06844.\n\nSutskever et\u00a0al. (2024)Sutskever, I., Vinyals, O., and Le, Q.\u00a0V.Neurips 2024 test of time award session: Sequence to sequence learning with neural networks.Conference session, December 2024.URLhttps://neurips.cc/virtual/2024/test-of-time/105032.\n\nSutton (2001)Sutton, R.\u00a0S.Verification, the key to ai.http://incompleteideas.net/IncIdeas/KeytoAI.html, 2001.\n\nTeam et\u00a0al. (2025)Team, K., Du, A., Gao, B., Xing, B., Jiang, C., Chen, C., Li, C., Xiao, C., Du, C., Liao, C., Tang, C., Wang, C., Zhang, D., Yuan, E., Lu, E., Tang, F., Sung, F., Wei, G., Lai, G., Guo, H., Zhu, H., Ding, H., Hu, H., Yang, H., Zhang, H., Yao, H., Zhao, H., Lu, H., Li, H., Yu, H., Gao, H., Zheng, H., Yuan, H., Chen, J., Guo, J., Su, J., Wang, J., Zhao, J., Zhang, J., Liu, J., Yan, J., Wu, J., Shi, L., Ye, L., Yu, L., Dong, M., Zhang, N., Ma, N., Pan, Q., Gong, Q., Liu, S., Ma, S., Wei, S., Cao, S., Huang, S., Jiang, T., Gao, W., Xiong, W., He, W., Huang, W., Wu, W., He, W., Wei, X., Jia, X., Wu, X., Xu, X., Zu, X., Zhou, X., Pan, X., Charles, Y., Li, Y., Hu, Y., Liu, Y., Chen, Y., Wang, Y., Liu, Y., Qin, Y., Liu, Y., Yang, Y., Bao, Y., Du, Y., Wu, Y., Wang, Y., Zhou, Z., Wang, Z., Li, Z., Zhu, Z., Zhang, Z., Wang, Z., Yang, Z., Huang, Z., Huang, Z., Xu, Z., and Yang, Z.Kimi k1.5: Scaling reinforcement learning with llms.CoRR, abs/2501.12599, 2025.doi:10.48550/ARXIV.2501.12599.URLhttps://doi.org/10.48550/arXiv.2501.12599.\n\nVillalobos et\u00a0al. (2024)Villalobos, P., Ho, A., Sevilla, J., Besiroglu, T., Heim, L., and Hobbhahn, M.Position: Will we run out of data? limits of LLM scaling based on human-generated data.InForty-first International Conference on Machine Learning, ICML 2024, Vienna, Austria, July 21-27, 2024. OpenReview.net, 2024.URLhttps://openreview.net/forum?id=ViZcgDQjyG.\n\nWang et\u00a0al. (2025a)Wang, H., Yue, Y., Lu, R., Shi, J., Zhao, A., Wang, S., Song, S., and Huang, G.Model surgery: Modulating LLM\u2018s behavior via simple parameter editing.InProceedings of the 2025 Conference of the Nations of the Americas Chapter of the Association for Computational Linguistics, pp.\u00a0 6337\u20136357, 2025a.\n\nWang et\u00a0al. (2019)Wang, R., Lehman, J., Clune, J., and Stanley, K.\u00a0O.Paired open-ended trailblazer (POET): endlessly generating increasingly complex and diverse learning environments and their solutions.CoRR, abs/1901.01753, 2019.URLhttp://arxiv.org/abs/1901.01753.\n\nWang et\u00a0al. (2023)Wang, S., Yang, Q., Gao, J., Lin, M.\u00a0G., Chen, H., Wu, L., Jia, N., Song, S., and Huang, G.Train once, get a family: State-adaptive balances for offline-to-online reinforcement learning.InThirty-seventh Conference on Neural Information Processing Systems, 2023.URLhttps://openreview.net/forum?id=vtoY8qJjTR.\n\nWang et\u00a0al. (2024)Wang, S., Liu, C., Zheng, Z., Qi, S., Chen, S., Yang, Q., Zhao, A., Wang, C., Song, S., and Huang, G.Boosting LLM agents with recursive contemplation for effective deception handling.In Ku, L.-W., Martins, A., and Srikumar, V. (eds.),Findings of the Association for Computational Linguistics: ACL 2024, pp.\u00a0 9909\u20139953, Bangkok, Thailand, August 2024. Association for Computational Linguistics.doi:10.18653/v1/2024.findings-acl.591.URLhttps://aclanthology.org/2024.findings-acl.591/.\n\nWang et\u00a0al. (2025b)Wang, Y., Yang, Q., Zeng, Z., Ren, L., Liu, L., Peng, B., Cheng, H., He, X., Wang, K., Gao, J., Chen, W., Wang, S., Du, S.\u00a0S., and Shen, Y.Reinforcement learning for reasoning in large language models with one training example, 2025b.URLhttps://arxiv.org/abs/2504.20571.\n\nWu et\u00a0al. (2023)Wu, Q., Bansal, G., Zhang, J., Wu, Y., Zhang, S., Zhu, E., Li, B., Jiang, L., Zhang, X., and Wang, C.Autogen: Enabling next-gen LLM applications via multi-agent conversation framework.CoRR, abs/2308.08155, 2023.doi:10.48550/ARXIV.2308.08155.URLhttps://doi.org/10.48550/arXiv.2308.08155.\n\nWu et\u00a0al. (2024)Wu, Y., Yue, T., Zhang, S., Wang, C., and Wu, Q.Stateflow: Enhancing LLM task-solving through state-driven workflows.CoRR, abs/2403.11322, 2024.doi:10.48550/ARXIV.2403.11322.URLhttps://doi.org/10.48550/arXiv.2403.11322.\n\nXie et\u00a0al. (2025)Xie, T., Gao, Z., Ren, Q., Luo, H., Hong, Y., Dai, B., Zhou, J., Qiu, K., Wu, Z., and Luo, C.Logic-rl: Unleashing LLM reasoning with rule-based reinforcement learning.CoRR, abs/2502.14768, 2025.doi:10.48550/ARXIV.2502.14768.URLhttps://doi.org/10.48550/arXiv.2502.14768.\n\nXu et\u00a0al. (2025)Xu, F., Yan, H., Ma, C., Zhao, H., Sun, Q., Cheng, K., He, J., Liu, J., and Wu, Z.Genius: A generalizable and purely unsupervised self-training framework for advanced reasoning, 2025.URLhttps://arxiv.org/abs/2504.08672.\n\nYang et\u00a0al. (2024a)Yang, A., Yang, B., Zhang, B., Hui, B., Zheng, B., Yu, B., Li, C., Liu, D., Huang, F., Wei, H., Lin, H., Yang, J., Tu, J., Zhang, J., Yang, J., Yang, J., Zhou, J., Lin, J., Dang, K., Lu, K., Bao, K., Yang, K., Yu, L., Li, M., Xue, M., Zhang, P., Zhu, Q., Men, R., Lin, R., Li, T., Xia, T., Ren, X., Ren, X., Fan, Y., Su, Y., Zhang, Y., Wan, Y., Liu, Y., Cui, Z., Zhang, Z., and Qiu, Z.Qwen2.5 technical report.CoRR, abs/2412.15115, 2024a.doi:10.48550/ARXIV.2412.15115.URLhttps://doi.org/10.48550/arXiv.2412.15115.\n\nYang et\u00a0al. (2024b)Yang, A., Zhang, B., Hui, B., Gao, B., Yu, B., Li, C., Liu, D., Tu, J., Zhou, J., Lin, J., Lu, K., Xue, M., Lin, R., Liu, T., Ren, X., and Zhang, Z.Qwen2.5-math technical report: Toward mathematical expert model via self-improvement.CoRR, abs/2409.12122, 2024b.doi:10.48550/ARXIV.2409.12122.URLhttps://doi.org/10.48550/arXiv.2409.12122.\n\nYao et\u00a0al. (2023)Yao, S., Zhao, J., Yu, D., Du, N., Shafran, I., Narasimhan, K.\u00a0R., and Cao, Y.React: Synergizing reasoning and acting in language models.InThe Eleventh International Conference on Learning Representations, ICLR 2023, Kigali, Rwanda, May 1-5, 2023. OpenReview.net, 2023.URLhttps://openreview.net/forum?id=WE_vluYUL-X.\n\nYe et\u00a0al. (2024)Ye, Z., Agarwal, R., Liu, T., Joshi, R., Velury, S., Le, Q.\u00a0V., Tan, Q., and Liu, Y.Evolving alignment via asymmetric self-play.CoRR, abs/2411.00062, 2024.doi:10.48550/ARXIV.2411.00062.URLhttps://doi.org/10.48550/arXiv.2411.00062.\n\nYu et\u00a0al. (2025)Yu, Q., Zhang, Z., Zhu, R., Yuan, Y., Zuo, X., Yue, Y., Fan, T., Liu, G., Liu, L., Liu, X., Lin, H., Lin, Z., Ma, B., Sheng, G., Tong, Y., Zhang, C., Zhang, M., Zhang, W., Zhu, H., Zhu, J., Chen, J., Chen, J., Wang, C., Yu, H., Dai, W., Song, Y., Wei, X., Zhou, H., Liu, J., Ma, W., Zhang, Y., Yan, L., Qiao, M., Wu, Y., and Wang, M.DAPO: an open-source LLM reinforcement learning system at scale.CoRR, abs/2503.14476, 2025.doi:10.48550/ARXIV.2503.14476.URLhttps://doi.org/10.48550/arXiv.2503.14476.\n\nYuan et\u00a0al. (2024)Yuan, W., Pang, R.\u00a0Y., Cho, K., Li, X., Sukhbaatar, S., Xu, J., and Weston, J.Self-rewarding language models.URL https://arxiv. org/abs/2401.10020, 2024.\n\nYuan et\u00a0al. (2025)Yuan, Y., Yu, Q., Zuo, X., Zhu, R., Xu, W., Chen, J., Wang, C., Fan, T., Du, Z., Wei, X., et\u00a0al.Vapo: Efficient and reliable reinforcement learning for advanced reasoning tasks.arXiv preprint arXiv:2504.05118, 2025.\n\nYue et\u00a0al. (2023)Yue, Y., Lu, R., Kang, B., Song, S., and Huang, G.Understanding, predicting and better resolving q-value divergence in offline-rl.Advances in Neural Information Processing Systems, 36:60247\u201360277, 2023.\n\nYue et\u00a0al. (2024)Yue, Y., Wang, Y., Kang, B., Han, Y., Wang, S., Song, S., Feng, J., and Huang, G.Deer-vla: Dynamic inference of multimodal large language models for efficient robot execution.In Globersons, A., Mackey, L., Belgrave, D., Fan, A., Paquet, U., Tomczak, J.\u00a0M., and Zhang, C. (eds.),Advances in Neural Information Processing Systems 38: Annual Conference on Neural Information Processing Systems 2024, NeurIPS 2024, Vancouver, BC, Canada, December 10 - 15, 2024, 2024.URLhttp://papers.nips.cc/paper_files/paper/2024/hash/67b0e7c7c2a5780aeefe3b79caac106e-Abstract-Conference.html.\n\nYue et\u00a0al. (2025)Yue, Y., Chen, Z., Lu, R., Zhao, A., Wang, Z., Yue, Y., Song, S., and Huang, G.Does reinforcement learning really incentivize reasoning capacity in llms beyond the base model?, 2025.URLhttps://arxiv.org/abs/2504.13837.\n\nZelikman et\u00a0al. (2022)Zelikman, E., Wu, Y., Mu, J., and Goodman, N.Star: Bootstrapping reasoning with reasoning.Advances in Neural Information Processing Systems, 35:15476\u201315488, 2022.\n\nZeng et\u00a0al. (2025a)Zeng, H., Jiang, D., Wang, H., Nie, P., Chen, X., and Chen, W.ACECODER: acing coder RL via automated test-case synthesis.CoRR, abs/2502.01718, 2025a.doi:10.48550/ARXIV.2502.01718.URLhttps://doi.org/10.48550/arXiv.2502.01718.\n\nZeng et\u00a0al. (2025b)Zeng, W., Huang, Y., Liu, Q., Liu, W., He, K., Ma, Z., and He, J.Simplerl-zoo: Investigating and taming zero reinforcement learning for open base models in the wild.CoRR, abs/2503.18892, 2025b.doi:10.48550/ARXIV.2503.18892.URLhttps://doi.org/10.48550/arXiv.2503.18892.\n\nZhang et\u00a0al. (2025a)Zhang, C., Deng, Y., Lin, X., Wang, B., Ng, D., Ye, H., Li, X., Xiao, Y., Mo, Z., Zhang, Q., et\u00a0al.100 days after deepseek-r1: A survey on replication studies and more directions for reasoning language models.arXiv preprint arXiv:2505.00551, 2025a.\n\nZhang et\u00a0al. (2025b)Zhang, Q., Wu, H., Zhang, C., Zhao, P., and Bian, Y.Right question is already half the answer: Fully unsupervised llm reasoning incentivization, 2025b.URLhttps://arxiv.org/abs/2504.05812.\n\nZhang & Yang (2021)Zhang, Y. and Yang, Q.A survey on multi-task learning.IEEE transactions on knowledge and data engineering, 34(12):5586\u20135609, 2021.\n\nZhao et\u00a0al. (2022)Zhao, A., Lin, M.\u00a0G., Li, Y., Liu, Y., and Huang, G.A mixture of surprises for unsupervised reinforcement learning.In Koyejo, S., Mohamed, S., Agarwal, A., Belgrave, D., Cho, K., and Oh, A. (eds.),Advances in Neural Information Processing Systems 35: Annual Conference on Neural Information Processing Systems 2022, NeurIPS 2022, New Orleans, LA, USA, November 28 - December 9, 2022, 2022.URLhttp://papers.nips.cc/paper_files/paper/2022/hash/a7667ee5d545a43d2f0fda98863c260e-Abstract-Conference.html.\n\nZhao et\u00a0al. (2024)Zhao, A., Huang, D., Xu, Q., Lin, M., Liu, Y., and Huang, G.Expel: LLM agents are experiential learners.In Wooldridge, M.\u00a0J., Dy, J.\u00a0G., and Natarajan, S. (eds.),Thirty-Eighth AAAI Conference on Artificial Intelligence, AAAI 2024, Thirty-Sixth Conference on Innovative Applications of Artificial Intelligence, IAAI 2024, Fourteenth Symposium on Educational Advances in Artificial Intelligence, EAAI 2014, February 20-27, 2024, Vancouver, Canada, pp.\u00a0 19632\u201319642. AAAI Press, 2024.doi:10.1609/AAAI.V38I17.29936.URLhttps://doi.org/10.1609/aaai.v38i17.29936.\n\nZhao et\u00a0al. (2025a)Zhao, A., Xu, Q., Lin, M., Wang, S., Liu, Y., Zheng, Z., and Huang, G.Diver-ct: Diversity-enhanced red teaming large language model assistants with relaxing constraints.In Walsh, T., Shah, J., and Kolter, Z. (eds.),AAAI-25, Sponsored by the Association for the Advancement of Artificial Intelligence, February 25 - March 4, 2025, Philadelphia, PA, USA, pp.\u00a0 26021\u201326030. AAAI Press, 2025a.doi:10.1609/AAAI.V39I24.34797.URLhttps://doi.org/10.1609/aaai.v39i24.34797.\n\nZhao et\u00a0al. (2025b)Zhao, A., Zhu, E., Lu, R., Lin, M., Liu, Y., and Huang, G.Self-referencing agents for unsupervised reinforcement learning.Neural Networks, 188:107448, 2025b.doi:10.1016/J.NEUNET.2025.107448.URLhttps://doi.org/10.1016/j.neunet.2025.107448.\n\nZitkovich et\u00a0al. (2023)Zitkovich, B., Yu, T., Xu, S., Xu, P., Xiao, T., Xia, F., Wu, J., Wohlhart, P., Welker, S., Wahid, A., Vuong, Q., Vanhoucke, V., Tran, H.\u00a0T., Soricut, R., Singh, A., Singh, J., Sermanet, P., Sanketi, P.\u00a0R., Salazar, G., Ryoo, M.\u00a0S., Reymann, K., Rao, K., Pertsch, K., Mordatch, I., Michalewski, H., Lu, Y., Levine, S., Lee, L., Lee, T.\u00a0E., Leal, I., Kuang, Y., Kalashnikov, D., Julian, R., Joshi, N.\u00a0J., Irpan, A., Ichter, B., Hsu, J., Herzog, A., Hausman, K., Gopalakrishnan, K., Fu, C., Florence, P., Finn, C., Dubey, K.\u00a0A., Driess, D., Ding, T., Choromanski, K.\u00a0M., Chen, X., Chebotar, Y., Carbajal, J., Brown, N., Brohan, A., Arenas, M.\u00a0G., and Han, K.RT-2: vision-language-action models transfer web knowledge to robotic control.In Tan, J., Toussaint, M., and Darvish, K. (eds.),Conference on Robot Learning, CoRL 2023, 6-9 November 2023, Atlanta, GA, USA, volume 229 ofProceedings of Machine Learning Research, pp.\u00a0 2165\u20132183. PMLR, 2023.URLhttps://proceedings.mlr.press/v229/zitkovich23a.html.\n\nZuo et\u00a0al. (2025)Zuo, Y., Zhang, K., Qu, S., Sheng, L., Zhu, X., Qi, B., Sun, Y., Cui, G., Ding, N., and Zhou, B.Ttrl: Test-time reinforcement learning, 2025.URLhttps://arxiv.org/abs/2504.16084.",
          "parent": null,
          "line_number": 411
        },
        {
          "_key": "38188921",
          "_id": "sections/38188921",
          "title": "Appendix",
          "level": 2,
          "content": "[appendix]",
          "parent": null,
          "line_number": 602
        },
        {
          "_key": "8ecdc8ed",
          "_id": "sections/8ecdc8ed",
          "title": "Appendix Contents",
          "level": 2,
          "content": "[appendix] 1",
          "parent": null,
          "line_number": 606
        },
        {
          "_key": "194cc358",
          "_id": "sections/194cc358",
          "title": "Appendix AReinforcement Learning with Verifiable Rewards.",
          "level": 2,
          "content": "We use reinforcement learning to update our learner LLM, rewarding it based on a task-specific reward functionrfsubscript\ud835\udc5f\ud835\udc53r_{f}italic_r start_POSTSUBSCRIPT italic_f end_POSTSUBSCRIPT, where the subscriptf\ud835\udc53fitalic_findicates the task. The goal of the RL agent is to maximize the expected discounted sum of rewards. We adopt an online variant of RL, REINFORCE++, which is optimized using the original PPO objective:\n\nwherest\u2062(\u03b8)subscript\ud835\udc60\ud835\udc61\ud835\udf03s_{t}(\\theta)italic_s start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT ( italic_\u03b8 )is the probability ratio between the new and old policies at timestept\ud835\udc61titalic_t, andAf,qnormsubscriptsuperscript\ud835\udc34norm\ud835\udc53\ud835\udc5eA^{\\text{norm}}_{f,q}italic_A start_POSTSUPERSCRIPT norm end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_f , italic_q end_POSTSUBSCRIPTis the normalized advantage.\n\nREINFORCE++ computes the normalized advantage as:\n\nwhererf,qsubscript\ud835\udc5f\ud835\udc53\ud835\udc5er_{f,q}italic_r start_POSTSUBSCRIPT italic_f , italic_q end_POSTSUBSCRIPTis the outcome reward for questionq\ud835\udc5eqitalic_q, taskf\ud835\udc53fitalic_f, mean and std are calculated across the global batch with batch sizeB\ud835\udc35Bitalic_B. Note that we do not apply any KL penalty to the loss or reward.",
          "parent": null,
          "line_number": 610
        },
        {
          "_key": "157cb9bd",
          "_id": "sections/157cb9bd",
          "title": "Appendix BImplementation Details",
          "level": 2,
          "content": "We built Absolute Zero Reasoner upon theveRL codebase(Sheng et\u00a0al.,2025). For code execution, we incorporated components from theQwQ Python executor. For safer code execution, we recommend using API-based services such asE2Binstead.\n\nAll experiments were conducted on clusters of A800 GPUs.",
          "parent": null,
          "line_number": 620
        },
        {
          "_key": "23802346",
          "_id": "sections/23802346",
          "title": "Training Hyperparameters.",
          "level": 5,
          "content": "We show the hyperparameters used in our training inTable3. We do not change them for any of the runs.",
          "parent": "157cb9bd",
          "line_number": 626
        },
        {
          "_key": "430adcc5",
          "_id": "sections/430adcc5",
          "title": "Appendix CMore Results",
          "level": 2,
          "content": "",
          "parent": null,
          "line_number": 630
        },
        {
          "_key": "87328bac",
          "_id": "sections/87328bac",
          "title": "C.1Out-of-Distribution Performance Breakdown",
          "level": 3,
          "content": "We plot the out-of-distribution performance, broken down by each benchmark and in aggregate, across training steps for our 7B, 7B-Coder, 14B, and 14B-Coder models inFigures28,29,30and31. We observe a strong correlation between training using AZR and improvements in both mathematical and coding reasoning capabilities. Moreover, our models are trained for more steps than typical zero-style reasoners; while overfitting can occur with static datasets, it is less likely in AZR due to dynamically proposed tasks.",
          "parent": "430adcc5",
          "line_number": 632
        },
        {
          "_key": "f18a31e0",
          "_id": "sections/f18a31e0",
          "title": "C.2In-Distribution Results",
          "level": 3,
          "content": "Since we have defined the task domains as input prediction and output prediction, we can directly evaluate our model\u2019s capabilities in these areas using popular code reasoning benchmarks: CruxEval-I(nput), CruxEval-O(utput), and LiveCodeBench-Execution (LCB-E)(Gu et\u00a0al.,2024;Jain et\u00a0al.,2024), where CruxEval-O and LCB-E is solving the deduction task, and CruxEval-I is solving the abduction task. InFigure14, we visualize the evolution of these metrics during the training ofAbsolute Zero Reasoner-base-7b. As training progresses, we observe a consistent improvement in in-distribution performance across steps. While these three benchmark curves do not perfectly correlate with broader coding or math reasoning capabilities (compare this withFigure28), they serve as useful proxies for tracking task-specific progress.",
          "parent": "430adcc5",
          "line_number": 636
        },
        {
          "_key": "2b297ceb",
          "_id": "sections/2b297ceb",
          "title": "C.3Interplay Between Propose and Solve Roles",
          "level": 3,
          "content": "We visualize the training dynamics between the propose and solve roles over training steps inFigures15,17and16. We observe that, in general, the solve roles produce more output tokens than the propose role. Intuitively, this makes sense: the propose role emphasizes creativity and generation of novel tasks, whereas the solve role requires deeper reasoning, which naturally leads to longer outputs.\n\nInterestingly, we also observe a consistent ordering in token length across reasoning types\u2014abduction and deduction tasks tend to result in shorter outputs than induction tasks during problem solving. This aligns with our intuition, as we observed the model engaging in trial-and-error reasoning\u2014repeatedly generating hypothesized inputs, evaluating their outcomes, and reflecting and retrying when subsequent deductions fail to produce the correct output. To our knowledge, this is the first time such a clear distinction in token length has been observed and presented for jointly trained reasoning multi-tasks. Previously, length differences were typically noted between correct and incorrect traces(Liu et\u00a0al.,2025).\n\nThe reward dynamics between the propose and solve roles exhibit mildly adversarial behavior: when one receives higher rewards, the other often receives lower rewards. However, this is not entirely adversarial, as the proposer is also penalized for generating unsolvable tasks, encouraging overall cooperative behavior in the learning process.",
          "parent": "430adcc5",
          "line_number": 640
        },
        {
          "_key": "6e7e0668",
          "_id": "sections/6e7e0668",
          "title": "C.4Complexity and Diversity Metrics of AZR Proposed Tasks",
          "level": 3,
          "content": "We outline several metrics used to probe characteristics of the tasks proposed during the training of AZR from the base model. Specifically, we log two sets of metrics: program complexity and task diversity. For complexity, we employ two proxy measures\u2014ComplexiPy score and the Halstead metric. To assess diversity, we compute the average abstract syntax tree (AST) edit distance between the proposed program and a set ofK\ud835\udc3eKitalic_Kreference programs, and an answer diversity metric. We calculate this answer diversity metric by tracking all historical answers to the generated questions, i.e., the input-output pairs, and form a categorical distribution over these outputs. We define answer diversity as1\u2212p\u2062(answer)1\ud835\udc5danswer1-p(\\text{answer})1 - italic_p ( answer ), wherep\u2062(answer)\ud835\udc5danswerp(\\text{answer})italic_p ( answer )is the empirical probability of a specific answer\u2014used as a proxy for the diversity of generated outputs.\n\nWe present these metrics inFigure27. Interestingly, even without incorporating them explicitly into the reward function, the policy appears to implicitly optimize for these metrics. This aligns well with intuitive notions of task difficulty and diversity, and that the policy learned to propose increasingly challenging tasks over time using our proposed simple reward function inEquation4.",
          "parent": "430adcc5",
          "line_number": 648
        },
        {
          "_key": "b8ec1b80",
          "_id": "sections/b8ec1b80",
          "title": "C.5Generated Code Complexity Dynamics Between Abd/Ded and Ind.",
          "level": 3,
          "content": "We use theComplexiPypackage to measure code complexity. For each generated program in the induction task, we compute the cognitive complexity difference from the corresponding \u201cgold\u201d code,i.e.complexipy\u2062(p\u03c0{abduction,deduction}propose)\u2212complexipy\u2062(p\u03c0inductionsolve)complexipysubscript\ud835\udc5dsubscriptsuperscript\ud835\udf0bpropose{abduction,deduction}complexipysubscript\ud835\udc5dsubscriptsuperscript\ud835\udf0bsolveinduction\\text{complexipy}(p_{\\pi^{\\text{propose}}_{\\text{\\{abduction,deduction\\}}}})-%\n\\text{complexipy}(p_{\\pi^{\\text{solve}}_{\\text{induction}}})complexipy ( italic_p start_POSTSUBSCRIPT italic_\u03c0 start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT start_POSTSUBSCRIPT {abduction,deduction} end_POSTSUBSCRIPT end_POSTSUBSCRIPT ) - complexipy ( italic_p start_POSTSUBSCRIPT italic_\u03c0 start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT start_POSTSUBSCRIPT induction end_POSTSUBSCRIPT end_POSTSUBSCRIPT )for each pair, where the superscript of\u03c0\ud835\udf0b\\piitalic_\u03c0indicates the role and the subscript indicates the task type(s), andp\ud835\udc5dpitalic_pdenotes the generated programs. On average, the difference of proposer and solver while holding the code\u2019s functionality constant is0.270.270.270.27, indicating that the proposer in the abduction/deduction tasks often increases the cognitive complexity to make the code appear more convoluted, whereas the induction solver tends to generate more efficient implementations.",
          "parent": "430adcc5",
          "line_number": 654
        },
        {
          "_key": "2408b0ff",
          "_id": "sections/2408b0ff",
          "title": "Appendix DAlternative Approaches Considered",
          "level": 2,
          "content": "In this section, we share many of the approaches we tried that did not prove to be particularly helpful for Absolute Zero Reasoner. However, we believe it is especially valuable to share these findings with the community, as they are crucial for guiding future research. Below, we outline each of the additional methods we explored during the development of our project.",
          "parent": null,
          "line_number": 659
        },
        {
          "_key": "8de3a120",
          "_id": "sections/8de3a120",
          "title": "D.1Error Deduction Task",
          "level": 3,
          "content": "Since programming languages often have error messages, and these messages contain a lot of information about how someone might expect a program to run, we also came up with another task domain: allowing the learner to propose a programthat will produce an error, and requiring the solver todeduce what kind of error is raisedwhen executing this code. We experimented with this additional task alongside the induction (f\ud835\udc53fitalic_f), deduction (o\ud835\udc5coitalic_o), and abduction (i\ud835\udc56iitalic_i) tasks. Unfortunately, we did not observe noticeable changes in downstream performance with this additional task and since it requires more computational resources than our AZR setup, we decided not to incorporate it into our final version. However, we believe further thorough investigation of this is well deserved.",
          "parent": "2408b0ff",
          "line_number": 663
        },
        {
          "_key": "d0992e3d",
          "_id": "sections/d0992e3d",
          "title": "D.2Composite Functions as Curriculum Learning",
          "level": 3,
          "content": "One valuable property we can leverage from programming languages is the ability to compose functions\u2014that is, to define a function as a composite of other functions, i.e.,f\u2062(g\u2062(x))\ud835\udc53\ud835\udc54\ud835\udc65f(g(x))italic_f ( italic_g ( italic_x ) ). In our setting, when generating a program, we can not only require the output to be a valid program but also constrain the LLM to utilize a predefined set of programs within its main function. For example, if the target program to be generated isf\u2062(\u22c5)\ud835\udc53\u22c5f(\\cdot)italic_f ( \u22c5 ), we can sample a set of previously generated programs{g\u2062_\u20620,\u2026,gc}\ud835\udc54_0\u2026subscript\ud835\udc54\ud835\udc50\\{g\\_0,\\dots,g_{c}\\}{ italic_g _ 0 , \u2026 , italic_g start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT }from\ud835\udc9f\ud835\udc9f\\mathcal{D}caligraphic_D, and force a valid program to bef\u2062(g\u2062_\u20620,\u22ef,gc,i)\ud835\udc53\ud835\udc54_0\u22efsubscript\ud835\udc54\ud835\udc50\ud835\udc56f(g\\_0,\\cdots,g_{c},i)italic_f ( italic_g _ 0 , \u22ef , italic_g start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT , italic_i ).\n\nSince all programs are generated by the LLM itself, this setup allows the model to bootstrap from its earlier generations, automatically increasing the complexity of the generated programs. We interpret this mechanism as a form of curriculum learning: earlier programs in the AZR self-play loop tend to be simpler, and as the loop progresses, they become increasingly complex. By composing newer programs from progressively more difficult earlier ones, the resulting programs naturally inherit this growing difficulty, which in turn challenges the solver step.\n\nFor implementation, in generating tasks for abduction and deduction, we begin by sampling a binary decision from a binomial distribution withp=0.5\ud835\udc5d0.5p=0.5italic_p = 0.5. This determines whether the generated program should be a simple program or a composite one. If the sample is 0, we prompt the LLM to generate a standard program along with a corresponding input. If the sample is 1, we prompt the LLM to generate a composite program. To construct the composite, we first sample an integerc\u223c\ud835\udcb0\u2062(1,3)similar-to\ud835\udc50\ud835\udcb013c\\sim\\mathcal{U}(1,3)italic_c \u223c caligraphic_U ( 1 , 3 ), then uniformly selectc\ud835\udc50citalic_cprograms from the dataset\ud835\udc9f\ud835\udc9f\\mathcal{D}caligraphic_Dthat are not themselves composite programs. Finally, we prompt the LLM to generate a valid program that incorporates{g\u2062_\u20620,\u2026,gc}\ud835\udc54_0\u2026subscript\ud835\udc54\ud835\udc50\\{g\\_0,\\dots,g_{c}\\}{ italic_g _ 0 , \u2026 , italic_g start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT }as subcomponents, ensuring it composes these selected programs meaningfully. We additionally filter programs that did not utilize all thec\ud835\udc50citalic_cprograms.\n\nHowever, we did not observe a significant difference when using this more complex curriculum compared to our simpler and more effective approach. One failure mode we encountered was that the model often defaulted to simply returning \u201cg(x)\u201d, effectively learningf\u2062(g\u2062(x))=g\u2062(x)\ud835\udc53\ud835\udc54\ud835\udc65\ud835\udc54\ud835\udc65f(g(x))=g(x)italic_f ( italic_g ( italic_x ) ) = italic_g ( italic_x ), which failed to introduce any additional difficulty. This trivial behavior undermined the intended challenge, leading us to deprioritize further exploration in this direction. While it may be possible to design a stricter reward mechanism\u2014such as enforcingf\u2062(g\u2062(x))\u2260g\u2062(x)\ud835\udc53\ud835\udc54\ud835\udc65\ud835\udc54\ud835\udc65f(g(x))\\neq g(x)italic_f ( italic_g ( italic_x ) ) \u2260 italic_g ( italic_x )by executing the code via a Python interpreter and penalizing such shortcuts\u2014we leave this to future work.",
          "parent": "2408b0ff",
          "line_number": 667
        },
        {
          "_key": "c3dfe98e",
          "_id": "sections/c3dfe98e",
          "title": "D.3Toying with the Initialp\u2062(z)\ud835\udc5d\ud835\udc67p(z)italic_p ( italic_z )",
          "level": 3,
          "content": "We investigated a setting where the initial seed buffer (seeSection3.3.1on how we generated these),i.e.p\u2062(z)\ud835\udc5d\ud835\udc67p(z)italic_p ( italic_z )inEquation3, is not self-generated by the base model, but instead sourced from theLeetCode Dataset. We only modified this component and ran AZR using the same procedure as before, continuing to add new valid programs to the initialized buffer. We observed an increase in initial performance on coding benchmarks; however, the performance plateaued at roughly the same level after additional training steps, compared to our official AZR setup. Interestingly, math performance was lower than in the official AZR setup, pointing towards that on-policy data may be more beneficial to the learner to bootstrap from for mathematical reasoning. We believe that exploring different strategies for initializing and updatingp\u2062(z)\ud835\udc5d\ud835\udc67p(z)italic_p ( italic_z )is an important and exciting direction for future research. We briefly explored different strategies for sampling reference code, ultimately settling on uniform sampling for its simplicity, though we also experimented with recency-based sampling and observed potential collapse.",
          "parent": "2408b0ff",
          "line_number": 677
        },
        {
          "_key": "6a9be0c7",
          "_id": "sections/6a9be0c7",
          "title": "D.4Extra Rewards",
          "level": 3,
          "content": "",
          "parent": "2408b0ff",
          "line_number": 681
        },
        {
          "_key": "99856e08",
          "_id": "sections/99856e08",
          "title": "Complexity Rewards.",
          "level": 5,
          "content": "Code complexity is well studied in software science and could potentially be a good proxy for measuring how hard it is to infer the properties of a piece of code for our reasoning learner. Therefore, for the problem proposer, we can add various measures of complexity\u2014such as Cyclomatic Complexity(Ebert et\u00a0al.,2016), maintainability, etc.\u2014to the reward function to incentivize the proposer to produce more complex programs. For illustration purposes, we tried using the Maintainability measure and the Halstead complexity measure(Halstead,1977)as intrinsic rewards. Concretely, we used thecomplexipyandRadonpackages(Lopez,2025;Canal,2023)to implement the respective metrics. These are then served as intrinsic rewards during the AZR self-play phase.",
          "parent": "6a9be0c7",
          "line_number": 683
        },
        {
          "_key": "9ddb5d1b",
          "_id": "sections/9ddb5d1b",
          "title": "Diversity Rewards.",
          "level": 5,
          "content": "We also attempted using diversity rewards to . Inspired by DiveR-CTZhao et\u00a0al.(2025a), we incorporatecode edit distanceas an intrinsic reward. Specifically, we treat the reference programs shown in the prompt as anchors and compute the average code edit distance between the generated program and these anchors. This serves as a measure of diversity in the generated output. Additionally, we explored another diversity-based reward inspired by the notion ofsurpriseZhao et\u00a0al.(2022). In this approach, we construct a probability distribution over previously encountered input/output pairs that the solver has answered. The reward is then defined as1\u2212p\u2062(input/output)1\ud835\udc5dinput/output1-p(\\text{input/output})1 - italic_p ( input/output ), wherep\ud835\udc5dpitalic_pdenotes the empirical probability of a particular input or output. While both strategies were evaluated in our experiments, we did not observe a significant difference in performance. However, we believe this aspect warrants deeper investigation, as diversity rewards remain a promising avenue for strengthening AZR further.",
          "parent": "6a9be0c7",
          "line_number": 687
        },
        {
          "_key": "e7a318ba",
          "_id": "sections/e7a318ba",
          "title": "Reward Aggregation.",
          "level": 5,
          "content": "We tested several ways on how to combine rewards for the proposer and discriminator. First, we separate the reward into extrinsic rewardrextrinsicsubscript\ud835\udc5fextrinsicr_{\\text{extrinsic}}italic_r start_POSTSUBSCRIPT extrinsic end_POSTSUBSCRIPTand a set of intrinsic reward(s)I={ri}\ud835\udc3csubscript\ud835\udc5f\ud835\udc56I=\\{r_{i}\\}italic_I = { italic_r start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT }, and tested the following strategies to combine them into a single reward,\n\nWe found that the simple additive way of combining rewards, a.k.aEquation11, produced the most stable runs, possibly due to less variance.",
          "parent": "6a9be0c7",
          "line_number": 691
        },
        {
          "_key": "efb419a7",
          "_id": "sections/efb419a7",
          "title": "D.5Environment Transition",
          "level": 3,
          "content": "We investigated how the transition function in our coding environment for the proposer. Specifically, after generating a piece of code, we can apply a transformation function on it before giving it making it an valid tuple in our dataset. We investigated two",
          "parent": "2408b0ff",
          "line_number": 697
        },
        {
          "_key": "e4248867",
          "_id": "sections/e4248867",
          "title": "Removing Comments and Docstrings",
          "level": 5,
          "content": "In early iterations of our experiments, we noticed that comments and docstrings were sometimes used to explicitly outline what the function was doing, or even served as a partial \u201cnote-taking\u201d interleaved \u201cReAct\u201d process(Yao et\u00a0al.,2023)of generating code\u2014that is, the model could interleave think and action at the same time, and to make the generated code valid, it used comments to encase its thoughts\u00a0(Figure19), similarly observed in DeepSeek-Prover-V2:(Ren et\u00a0al.,2025). We then thought that to make the task harder for the solver, we should occlude this information from it. However, we observed a significant performance drop after removing all comments and docstrings. One explanation for this phenomenon is that the only \u201ccommunication\u201d channel between the proposer and the solver is restricted to the code itself, rather than some kind of \u201cmessage\u201d along with the code. These messages can potentially provide hints to the solver, thus making some otherwise impossible tasks solvable. As a result, the solver is able to learn from its experience and self-bootstrap out of certain unsolvable tasks.",
          "parent": "efb419a7",
          "line_number": 701
        },
        {
          "_key": "1f5c2e4a",
          "_id": "sections/1f5c2e4a",
          "title": "Removing Global Variables.",
          "level": 5,
          "content": "We observed that some programs contain globally declared variables that may inadvertently leak information about the correct answer\u2014this issue is particularly prevalent in the input induction task generation and solving. Initially, we were concerned that such leakage might lead to wasted computation on trivial or compromised examples. To address this, we developed a systematic procedure to remove globally declared variables from the generated programs.\n\nHowever, after applying this cleaning step, we observed a noticeable drop in performance on our self-play reasoning tasks. One possible explanation is that the generation step is unaware of this post-processing modification; since the reward is assigned after the transition function (which includes variable removal), the model may not learn effectively from this mismatch.\n\nMoreover, we believe that even when answers are present, the solver still engages in nontrivial reasoning to reach a solution, potentially benefiting from this exposure. This aligns with the idea of rationalization as proposed in STaR(Zelikman et\u00a0al.,2022), where the model pretends to not see the answer but still performs reasoning during learning. Therefore, in our final experiments, we choose not to remove globally declared variables, allowing the self-play loop to naturally incorporate and adapt to such cases.",
          "parent": "efb419a7",
          "line_number": 705
        }
      ],
      "equations": [],
      "tables": [
        "We propose the Absolute Zero paradigm, where during training, the model simultaneously proposes tasks, solves them, and learns from both stages. No external data is required and the model learns entirely through self-play and experience, aided by some environment. We illustrate this paradigm inFigure2, which contrasts Absolute Zero with supervised learning and RLVR, highlighting how our approach eliminates the need for any human-curated data by enabling self-improving task proposal and solution through self-play.\n\nTo make the Absolute Zero setting concrete, we now define how one model can act both as the proposer and solver role. To aid understanding, we include an illustration inFigure3. Let\u03c0\u03b8subscript\ud835\udf0b\ud835\udf03\\pi_{\\theta}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPTbe our parameterized language model, it is used to play two roles, proposer\u03c0\u03b8proposesuperscriptsubscript\ud835\udf0b\ud835\udf03propose\\pi_{\\theta}^{\\text{propose}}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPTand solver\u03c0\u03b8solvesuperscriptsubscript\ud835\udf0b\ud835\udf03solve\\pi_{\\theta}^{\\text{solve}}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPTduring training.\n\nThe proposer first samples a proposed task conditioned on variablez\ud835\udc67zitalic_z:\u03c4\u223c\u03c0\u03b8propose(\u22c5|z)\\tau\\sim\\pi_{\\theta}^{\\text{propose}}(\\cdot|z)italic_\u03c4 \u223c italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT ( \u22c5 | italic_z ), which will then be validated and used to construct a valid reasoning task together with the environmente\ud835\udc52eitalic_e:(x,y\u22c6)\u223cfe(\u22c5|\u03c4)(x,y^{\\star})\\sim f_{e}(\\cdot|\\tau)( italic_x , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT ) \u223c italic_f start_POSTSUBSCRIPT italic_e end_POSTSUBSCRIPT ( \u22c5 | italic_\u03c4 ), wherex\ud835\udc65xitalic_xis the task query andy\u22c6superscript\ud835\udc66\u22c6y^{\\star}italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPTis the gold label. Then the solver produces an answery\u223c\u03c0\u03b8solve(\u22c5\u2223x)y\\sim\\pi_{\\theta}^{\\text{solve}}(\\,\\cdot\\mid x)italic_y \u223c italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT ( \u22c5 \u2223 italic_x ). Each proposed task\u03c4\ud835\udf0f\\tauitalic_\u03c4is scored by alearnability rewardrepropose\u2062(\u03c4,\u03c0\u03b8)subscriptsuperscript\ud835\udc5fpropose\ud835\udc52\ud835\udf0fsubscript\ud835\udf0b\ud835\udf03r^{\\text{propose}}_{e}(\\tau,\\pi_{\\theta})italic_r start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_e end_POSTSUBSCRIPT ( italic_\u03c4 , italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT ), which captures the expected improvement in\u03c0\u03b8subscript\ud835\udf0b\ud835\udf03\\pi_{\\theta}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPTafter training on the task queryx\ud835\udc65xitalic_x. Moreover, the same policy also receives asolution rewardresolve\u2062(y,y\u22c6)subscriptsuperscript\ud835\udc5fsolve\ud835\udc52\ud835\udc66superscript\ud835\udc66\u22c6r^{\\text{solve}}_{e}(y,y^{\\star})italic_r start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_e end_POSTSUBSCRIPT ( italic_y , italic_y start_POSTSUPERSCRIPT \u22c6 end_POSTSUPERSCRIPT )for its answer to the task queryx\ud835\udc65xitalic_x, with the environment again serving as the verifier. A nonnegative coefficient\u03bb\ud835\udf06\\lambdaitalic_\u03bbbalances the trade-off between exploring new, learnable tasks and improving the model\u2019s reasoning and problem-solving abilities. We formally define the absolute zero setting\u2019s objective as follows:\n\nNotice that we shift the burden of scaling data away fromhuman expertsand onto theproposer policy\u03c0\u03b8proposesuperscriptsubscript\ud835\udf0b\ud835\udf03propose\\pi_{\\theta}^{\\text{propose}}italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPTand theenvironmente\ud835\udc52eitalic_e. These two roles are both responsible for defining/evolving the learning task distribution, validating proposed tasks, and providing grounded feedback that supports stable and self-sustainable training. When proposing,z\ud835\udc67zitalic_zacts as a conditional variable that seeds generation of tasks. Practically,z\ud835\udc67zitalic_zcan be instantiated by sampling a small subset of past (task, answer) pairs from a continually updated task memory, yet there is no specific implementation tied to the paradigm. To guide the proposing process, we use a learnability rewardrpropose\u2062(\u03c4,\u03c0\u03b8)superscript\ud835\udc5fpropose\ud835\udf0fsubscript\ud835\udf0b\ud835\udf03r^{\\text{propose}}(\\tau,\\pi_{\\theta})italic_r start_POSTSUPERSCRIPT propose end_POSTSUPERSCRIPT ( italic_\u03c4 , italic_\u03c0 start_POSTSUBSCRIPT italic_\u03b8 end_POSTSUBSCRIPT ), which measures how much the model is expected to improve by solving a proposed task\u03c4\ud835\udf0f\\tauitalic_\u03c4. Moreover, the solver rewardrsolve\u2062(y,y\u2217)superscript\ud835\udc5fsolve\ud835\udc66superscript\ud835\udc66r^{\\text{solve}}(y,y^{*})italic_r start_POSTSUPERSCRIPT solve end_POSTSUPERSCRIPT ( italic_y , italic_y start_POSTSUPERSCRIPT \u2217 end_POSTSUPERSCRIPT )evaluates the correctness of the model\u2019s output. Together, these two signals guide the model to propose tasks that are both challenging and learnable, while also enhancing its reasoning abilities, ultimately enabling continuous improvement through self-play.",
        "To initialize AZR self-play, we first generate a seed set of valid triplets using the base language model. Each prompt samples up toK\ud835\udc3eKitalic_Ktriplets from the current seed buffer\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPTas references. When\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPTis empty at time 0, we fall back to the zero triplet show inFigure5. During the seeding stage, we use the same proposer prompts detailed inFigures34,35and36.\n\nFirst, for deduction and abduction tasks, the LLM is prompted to generate(p,i)\ud835\udc5d\ud835\udc56(p,i)( italic_p , italic_i )pairs, which are filtered, executed, and stored as valid triplets. We initialize\ud835\udc9fabduction0=\ud835\udc9fdeduction0=\ud835\udc9fseedsubscriptsuperscript\ud835\udc9f0abductionsubscriptsuperscript\ud835\udc9f0deductionsubscript\ud835\udc9fseed\\mathcal{D}^{0}_{\\text{abduction}}=\\mathcal{D}^{0}_{\\text{deduction}}=\\mathcal%\n{D}_{\\text{seed}}caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT abduction end_POSTSUBSCRIPT = caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT deduction end_POSTSUBSCRIPT = caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT, where|\ud835\udc9fseed|=B\u00d7Ssubscript\ud835\udc9fseed\ud835\udc35\ud835\udc46|\\mathcal{D}_{\\text{seed}}|=B\\times S| caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT | = italic_B \u00d7 italic_S, whereB\ud835\udc35Bitalic_Bis the batch size, andS=4\ud835\udc464S=4italic_S = 4is a factor we fix in all experiments. All seed triplet\u2019s program are stripped of global variables and comments (AppendixD), but subsequent iterations of adding new triplets to the buffers are unaltered. No model updates occur during this phase. Similarly, to initialize the induction buffer, we sample programs from\ud835\udc9fseedsubscript\ud835\udc9fseed\\mathcal{D}_{\\text{seed}}caligraphic_D start_POSTSUBSCRIPT seed end_POSTSUBSCRIPT, generate matching input sets and messages, and collect valid examples until|\ud835\udc9finduction0|=B\u00d7Ssubscriptsuperscript\ud835\udc9f0induction\ud835\udc35\ud835\udc46|\\mathcal{D}^{0}_{\\text{induction}}|=B\\times S| caligraphic_D start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT induction end_POSTSUBSCRIPT | = italic_B \u00d7 italic_S."
      ],
      "total_sections": 61,
      "total_equations": 0,
      "total_tables": 2,
      "extraction_time": 2.0338258743286133,
      "extraction_method": "beautifulsoup"
    }
  },
  "quality_scores": {
    "extractor_pdf": 0.035714285714285705,
    "marker_pdf": 0.0,
    "extractor_latexml": 0.3535714285714286
  },
  "best_method": "extractor_latexml",
  "best_score": 0.3535714285714286
}