{"created": 1748882088.7058697, "duration": 0.28659892082214355, "exitcode": 1, "root": "/home/graham/workspace/experiments/marker", "environment": {}, "summary": {"failed": 1, "total": 1, "collected": 1}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/providers/test_docx_native.py::TestNativeDOCXExtractor::test_styled_document", "type": "Function", "lineno": 20}]}], "tests": [{"nodeid": "tests/providers/test_docx_native.py::TestNativeDOCXExtractor::test_styled_document", "lineno": 20, "outcome": "failed", "keywords": ["test_styled_document", "TestNativeDOCXExtractor", "test_docx_native.py", "providers", "tests", "marker", ""], "setup": {"duration": 0.00031118979677557945, "outcome": "passed"}, "call": {"duration": 0.12088535400107503, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/marker/tests/providers/test_docx_native.py", "lineno": 103, "message": "assert 0 >= 5\n +  where 0 = len([])"}, "traceback": [{"path": "tests/providers/test_docx_native.py", "lineno": 103, "message": "AssertionError"}], "stderr": "2025-06-02 12:34:48.613 | INFO     | marker.core.providers.docx_native:extract_document:55 - Extracting DOCX document: /tmp/tmpd3zs7vyc.docx\n2025-06-02 12:34:48.620 | INFO     | marker.core.providers.docx_native:extract_document:86 - Extracted 5 blocks from DOCX\n", "longrepr": "self = <test_docx_native.TestNativeDOCXExtractor object at 0x79841a8158a0>\n\n    def test_styled_document(self):\n        \"\"\"Test extraction of DOCX with styles and headings\"\"\"\n        # For this test, we need to create a real DOCX file\n        # Using python-docx to create a test document\n        try:\n            from docx import Document\n            from docx.shared import Pt\n            from docx.enum.text import WD_ALIGN_PARAGRAPH\n        except ImportError:\n            pytest.skip(\"python-docx not available for creating test documents\")\n    \n        # Create test document\n        doc = Document()\n    \n        # Add title\n        title = doc.add_heading('Test Document Title', 0)\n        title.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    \n        # Add metadata\n        doc.core_properties.title = \"Test Document\"\n        doc.core_properties.author = \"Test Author\"\n        doc.core_properties.subject = \"Testing\"\n        doc.core_properties.keywords = \"test, docx, extraction\"\n    \n        # Add content with various styles\n        doc.add_heading('Introduction', level=1)\n        doc.add_paragraph('This is the introduction paragraph with some regular text.')\n    \n        doc.add_heading('Background', level=2)\n        doc.add_paragraph('This section provides background information about the topic.')\n    \n        doc.add_heading('Detailed Analysis', level=3)\n        doc.add_paragraph('Here we dive into the detailed analysis of our subject.')\n    \n        # Add a table\n        doc.add_heading('Data Table', level=2)\n        table = doc.add_table(rows=3, cols=3)\n        table.style = 'Light List'\n    \n        # Header row\n        hdr_cells = table.rows[0].cells\n        hdr_cells[0].text = 'Name'\n        hdr_cells[1].text = 'Value'\n        hdr_cells[2].text = 'Status'\n    \n        # Data rows\n        row1 = table.rows[1].cells\n        row1[0].text = 'Test Item 1'\n        row1[1].text = '100'\n        row1[2].text = 'Active'\n    \n        row2 = table.rows[2].cells\n        row2[0].text = 'Test Item 2'\n        row2[1].text = '200'\n        row2[2].text = 'Pending'\n    \n        # Add conclusion\n        doc.add_heading('Conclusion', level=1)\n        doc.add_paragraph('In conclusion, this test demonstrates DOCX extraction capabilities.')\n    \n        # Save to temp file\n        with tempfile.NamedTemporaryFile(suffix='.docx', delete=False) as f:\n            doc.save(f.name)\n            temp_path = Path(f.name)\n    \n        try:\n            # Extract\n            start_time = time.time()\n            provider = NativeDOCXProvider()\n            extracted_doc = provider.extract_document(temp_path)\n            duration = time.time() - start_time\n    \n            # Verify extraction\n            assert extracted_doc.source_type == SourceType.DOCX\n            assert extracted_doc.metadata.title == \"Test Document\"\n            assert extracted_doc.metadata.author == \"Test Author\"\n    \n            # Check keywords\n            assert len(extracted_doc.keywords) >= 2  # At least \"test\" and \"Testing\" (subject)\n    \n            # Check headings\n            heading_blocks = [b for b in extracted_doc.blocks if b.type == BlockType.HEADING]\n>           assert len(heading_blocks) >= 5  # Title + 4 headings\nE           assert 0 >= 5\nE            +  where 0 = len([])\n\ntests/providers/test_docx_native.py:103: AssertionError"}, "teardown": {"duration": 0.00021971715614199638, "outcome": "passed"}}]}